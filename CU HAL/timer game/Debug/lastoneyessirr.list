
lastoneyessirr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008064  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08008178  08008178  00009178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086fc  080086fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008704  08008704  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800870c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001dc  080088e8  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080088e8  0000a430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb11  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cee  00000000  00000000  00015d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00017a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f4  00000000  00000000  000186d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bae  00000000  00000000  000190c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da69  00000000  00000000  00031c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d10b  00000000  00000000  0003f6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc7e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb0  00000000  00000000  000cc82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d13dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800815c 	.word	0x0800815c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800815c 	.word	0x0800815c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <LCD16X2_Init>:
/**
 * @brief Initialize the LCD
 * @param displayMode: Display mode (ON/OFF, cursor, blink)
 */
void LCD16X2_Init(uint8_t displayMode)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
    /* Enable GPIO clocks */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b4b      	ldr	r3, [pc, #300]	@ (80012b4 <LCD16X2_Init+0x138>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <LCD16X2_Init+0x138>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <LCD16X2_Init+0x138>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b45      	ldr	r3, [pc, #276]	@ (80012b4 <LCD16X2_Init+0x138>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a44      	ldr	r2, [pc, #272]	@ (80012b4 <LCD16X2_Init+0x138>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b42      	ldr	r3, [pc, #264]	@ (80012b4 <LCD16X2_Init+0x138>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]

    /* Configure GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]

    /* RS pin */
    GPIO_InitStruct.Pin = LCD16X2_RS_Pin;
 80011d0:	2320      	movs	r3, #32
 80011d2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_RS_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4837      	ldr	r0, [pc, #220]	@ (80012b8 <LCD16X2_Init+0x13c>)
 80011dc:	f001 f962 	bl	80024a4 <HAL_GPIO_Init>

    /* RW pin */
    GPIO_InitStruct.Pin = LCD16X2_RW_Pin;
 80011e0:	2310      	movs	r3, #16
 80011e2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_RW_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4833      	ldr	r0, [pc, #204]	@ (80012b8 <LCD16X2_Init+0x13c>)
 80011ec:	f001 f95a 	bl	80024a4 <HAL_GPIO_Init>

    /* EN pin */
    GPIO_InitStruct.Pin = LCD16X2_EN_Pin;
 80011f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_EN_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	482e      	ldr	r0, [pc, #184]	@ (80012b8 <LCD16X2_Init+0x13c>)
 80011fe:	f001 f951 	bl	80024a4 <HAL_GPIO_Init>

    /* Data pins */
    GPIO_InitStruct.Pin = LCD16X2_D4_Pin;
 8001202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001206:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D4_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	482b      	ldr	r0, [pc, #172]	@ (80012bc <LCD16X2_Init+0x140>)
 8001210:	f001 f948 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD16X2_D5_Pin;
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D5_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4827      	ldr	r0, [pc, #156]	@ (80012bc <LCD16X2_Init+0x140>)
 8001220:	f001 f940 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD16X2_D6_Pin;
 8001224:	2340      	movs	r3, #64	@ 0x40
 8001226:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D6_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4823      	ldr	r0, [pc, #140]	@ (80012bc <LCD16X2_Init+0x140>)
 8001230:	f001 f938 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD16X2_D7_Pin;
 8001234:	2320      	movs	r3, #32
 8001236:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D7_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	481f      	ldr	r0, [pc, #124]	@ (80012bc <LCD16X2_Init+0x140>)
 8001240:	f001 f930 	bl	80024a4 <HAL_GPIO_Init>

    /* Initialize LCD in 4-bit mode */
    HAL_Delay(50);  /* Wait for LCD to power up */
 8001244:	2032      	movs	r0, #50	@ 0x32
 8001246:	f000 fffb 	bl	8002240 <HAL_Delay>

    /* Set RW low for write operations */
    HAL_GPIO_WritePin(LCD16X2_RW_GPIO_Port, LCD16X2_RW_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2110      	movs	r1, #16
 800124e:	481a      	ldr	r0, [pc, #104]	@ (80012b8 <LCD16X2_Init+0x13c>)
 8001250:	f001 fac3 	bl	80027da <HAL_GPIO_WritePin>

    /* Set RS low for command */
    HAL_GPIO_WritePin(LCD16X2_RS_GPIO_Port, LCD16X2_RS_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2120      	movs	r1, #32
 8001258:	4817      	ldr	r0, [pc, #92]	@ (80012b8 <LCD16X2_Init+0x13c>)
 800125a:	f001 fabe 	bl	80027da <HAL_GPIO_WritePin>

    /* Send reset sequence for 4-bit mode */
    LCD16X2_Write4Bits(0x03);
 800125e:	2003      	movs	r0, #3
 8001260:	f000 f918 	bl	8001494 <LCD16X2_Write4Bits>
    HAL_Delay(5);
 8001264:	2005      	movs	r0, #5
 8001266:	f000 ffeb 	bl	8002240 <HAL_Delay>
    LCD16X2_Write4Bits(0x03);
 800126a:	2003      	movs	r0, #3
 800126c:	f000 f912 	bl	8001494 <LCD16X2_Write4Bits>
    HAL_Delay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f000 ffe5 	bl	8002240 <HAL_Delay>
    LCD16X2_Write4Bits(0x03);
 8001276:	2003      	movs	r0, #3
 8001278:	f000 f90c 	bl	8001494 <LCD16X2_Write4Bits>
    HAL_Delay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f000 ffdf 	bl	8002240 <HAL_Delay>
    LCD16X2_Write4Bits(0x02);  /* Set to 4-bit mode */
 8001282:	2002      	movs	r0, #2
 8001284:	f000 f906 	bl	8001494 <LCD16X2_Write4Bits>
    HAL_Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f000 ffd9 	bl	8002240 <HAL_Delay>

    /* Set function: 4-bit mode, 2 lines, 5x8 dots */
    LCD16X2_WriteCommand(LCD16X2_FUNCTION_SET | LCD16X2_4BIT_MODE | LCD16X2_2LINE | LCD16X2_5x8DOTS);
 800128e:	2028      	movs	r0, #40	@ 0x28
 8001290:	f000 f8b6 	bl	8001400 <LCD16X2_WriteCommand>

    /* Display control */
    LCD16X2_WriteCommand(LCD16X2_DISPLAY_CONTROL | displayMode);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f8af 	bl	8001400 <LCD16X2_WriteCommand>

    /* Clear display */
    LCD16X2_ClrScr();
 80012a2:	f000 f80d 	bl	80012c0 <LCD16X2_ClrScr>

    /* Entry mode set */
    LCD16X2_WriteCommand(LCD16X2_ENTRY_MODE_SET | LCD16X2_ENTRY_LEFT | LCD16X2_ENTRY_SHIFT_DEC);
 80012a6:	2006      	movs	r0, #6
 80012a8:	f000 f8aa 	bl	8001400 <LCD16X2_WriteCommand>
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40010800 	.word	0x40010800

080012c0 <LCD16X2_ClrScr>:

/**
 * @brief Clear the display
 */
void LCD16X2_ClrScr(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    LCD16X2_WriteCommand(LCD16X2_CLEAR_DISPLAY);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f000 f89b 	bl	8001400 <LCD16X2_WriteCommand>
    HAL_Delay(2);  /* Clear display command needs longer delay */
 80012ca:	2002      	movs	r0, #2
 80012cc:	f000 ffb8 	bl	8002240 <HAL_Delay>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <LCD16X2_GotoXY>:
 * @brief Set cursor position
 * @param x: Column position (0-15)
 * @param y: Row position (0-1)
 */
void LCD16X2_GotoXY(uint8_t x, uint8_t y)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4613      	mov	r3, r2
 80012e2:	71bb      	strb	r3, [r7, #6]
    uint8_t address;

    /* Calculate DDRAM address: first line starts at 0x00, second line at 0x40 */
    address = (y == 0) ? (0x00 + x) : (0x40 + x);
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <LCD16X2_GotoXY+0x1e>
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	e000      	b.n	80012f4 <LCD16X2_GotoXY+0x20>
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	73fb      	strb	r3, [r7, #15]

    LCD16X2_WriteCommand(LCD16X2_SET_DDRAM_ADDR | address);
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f87e 	bl	8001400 <LCD16X2_WriteCommand>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <LCD16X2_PutChar>:
/**
 * @brief Write a character to the LCD
 * @param c: Character to write
 */
void LCD16X2_PutChar(char c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
    LCD16X2_WriteData((uint8_t)c);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f885 	bl	8001428 <LCD16X2_WriteData>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <LCD16X2_Puts>:
/**
 * @brief Write a string to the LCD
 * @param s: String to write
 */
void LCD16X2_Puts(const char *s)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
    while(*s)
 800132e:	e006      	b.n	800133e <LCD16X2_Puts+0x18>
    {
        LCD16X2_PutChar(*s++);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffe7 	bl	800130c <LCD16X2_PutChar>
    while(*s)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f4      	bne.n	8001330 <LCD16X2_Puts+0xa>
    }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <LCD16X2_CreateCustomChar>:
 * @brief Create a custom character
 * @param location: Character code (0-7)
 * @param charmap: Character bitmap (8 bytes)
 */
void LCD16X2_CreateCustomChar(uint8_t location, uint8_t *charmap)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    /* Set CGRAM address */
    LCD16X2_WriteCommand(LCD16X2_SET_CGRAM_ADDR | ((location & 0x7) << 3));
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	b25b      	sxtb	r3, r3
 8001364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001368:	b25b      	sxtb	r3, r3
 800136a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136e:	b25b      	sxtb	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f844 	bl	8001400 <LCD16X2_WriteCommand>

    /* Write character pattern */
    for(i = 0; i < 8; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e009      	b.n	8001392 <LCD16X2_CreateCustomChar+0x42>
    {
        LCD16X2_WriteData(charmap[i]);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f84e 	bl	8001428 <LCD16X2_WriteData>
    for(i = 0; i < 8; i++)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3301      	adds	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b07      	cmp	r3, #7
 8001396:	d9f2      	bls.n	800137e <LCD16X2_CreateCustomChar+0x2e>
    }

    /* Return to DDRAM address */
    LCD16X2_WriteCommand(LCD16X2_SET_DDRAM_ADDR);
 8001398:	2080      	movs	r0, #128	@ 0x80
 800139a:	f000 f831 	bl	8001400 <LCD16X2_WriteCommand>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <LCD16X2_PutCustomChar>:
 * @param x: Column position (0-15)
 * @param y: Row position (0-1)
 * @param location: Character code (0-7)
 */
void LCD16X2_PutCustomChar(uint8_t x, uint8_t y, uint8_t location)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	460b      	mov	r3, r1
 80013b2:	71bb      	strb	r3, [r7, #6]
 80013b4:	4613      	mov	r3, r2
 80013b6:	717b      	strb	r3, [r7, #5]
    LCD16X2_GotoXY(x, y);
 80013b8:	79ba      	ldrb	r2, [r7, #6]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff88 	bl	80012d4 <LCD16X2_GotoXY>
    LCD16X2_WriteData(location);
 80013c4:	797b      	ldrb	r3, [r7, #5]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f82e 	bl	8001428 <LCD16X2_WriteData>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <LCD16X2_Write>:
/**
 * @brief Write a byte to the LCD
 * @param data: Byte to write
 */
static void LCD16X2_Write(uint8_t data)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
    LCD16X2_Write4Bits(data >> 4);    /* High nibble */
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f855 	bl	8001494 <LCD16X2_Write4Bits>
    LCD16X2_Write4Bits(data & 0x0F);  /* Low nibble */
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f84e 	bl	8001494 <LCD16X2_Write4Bits>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <LCD16X2_WriteCommand>:
/**
 * @brief Write a command to the LCD
 * @param cmd: Command to write
 */
static void LCD16X2_WriteCommand(uint8_t cmd)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
    /* Set RS low for command */
    HAL_GPIO_WritePin(LCD16X2_RS_GPIO_Port, LCD16X2_RS_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2120      	movs	r1, #32
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <LCD16X2_WriteCommand+0x24>)
 8001410:	f001 f9e3 	bl	80027da <HAL_GPIO_WritePin>
    LCD16X2_Write(cmd);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffdc 	bl	80013d4 <LCD16X2_Write>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010c00 	.word	0x40010c00

08001428 <LCD16X2_WriteData>:
/**
 * @brief Write data to the LCD
 * @param data: Data to write
 */
static void LCD16X2_WriteData(uint8_t data)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
    /* Set RS high for data */
    HAL_GPIO_WritePin(LCD16X2_RS_GPIO_Port, LCD16X2_RS_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2120      	movs	r1, #32
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <LCD16X2_WriteData+0x24>)
 8001438:	f001 f9cf 	bl	80027da <HAL_GPIO_WritePin>
    LCD16X2_Write(data);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ffc8 	bl	80013d4 <LCD16X2_Write>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010c00 	.word	0x40010c00

08001450 <LCD16X2_Pulse_E>:

/**
 * @brief Generate enable pulse
 */
static void LCD16X2_Pulse_E(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD16X2_EN_GPIO_Port, LCD16X2_EN_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800145a:	480d      	ldr	r0, [pc, #52]	@ (8001490 <LCD16X2_Pulse_E+0x40>)
 800145c:	f001 f9bd 	bl	80027da <HAL_GPIO_WritePin>
    LCD16X2_Delay_us(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f000 f84f 	bl	8001504 <LCD16X2_Delay_us>
    HAL_GPIO_WritePin(LCD16X2_EN_GPIO_Port, LCD16X2_EN_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800146c:	4808      	ldr	r0, [pc, #32]	@ (8001490 <LCD16X2_Pulse_E+0x40>)
 800146e:	f001 f9b4 	bl	80027da <HAL_GPIO_WritePin>
    LCD16X2_Delay_us(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f000 f846 	bl	8001504 <LCD16X2_Delay_us>
    HAL_GPIO_WritePin(LCD16X2_EN_GPIO_Port, LCD16X2_EN_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800147e:	4804      	ldr	r0, [pc, #16]	@ (8001490 <LCD16X2_Pulse_E+0x40>)
 8001480:	f001 f9ab 	bl	80027da <HAL_GPIO_WritePin>
    LCD16X2_Delay_us(100);  /* Command execution time */
 8001484:	2064      	movs	r0, #100	@ 0x64
 8001486:	f000 f83d 	bl	8001504 <LCD16X2_Delay_us>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40010c00 	.word	0x40010c00

08001494 <LCD16X2_Write4Bits>:
/**
 * @brief Write 4 bits to the LCD
 * @param nibble: 4 bits to write
 */
static void LCD16X2_Write4Bits(uint8_t nibble)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
    /* Set data pins */
    HAL_GPIO_WritePin(LCD16X2_D4_GPIO_Port, LCD16X2_D4_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ac:	4814      	ldr	r0, [pc, #80]	@ (8001500 <LCD16X2_Write4Bits+0x6c>)
 80014ae:	f001 f994 	bl	80027da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16X2_D5_GPIO_Port, LCD16X2_D5_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	105b      	asrs	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	480f      	ldr	r0, [pc, #60]	@ (8001500 <LCD16X2_Write4Bits+0x6c>)
 80014c4:	f001 f989 	bl	80027da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16X2_D6_GPIO_Port, LCD16X2_D6_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	109b      	asrs	r3, r3, #2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	2140      	movs	r1, #64	@ 0x40
 80014d8:	4809      	ldr	r0, [pc, #36]	@ (8001500 <LCD16X2_Write4Bits+0x6c>)
 80014da:	f001 f97e 	bl	80027da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16X2_D7_GPIO_Port, LCD16X2_D7_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	10db      	asrs	r3, r3, #3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	2120      	movs	r1, #32
 80014ee:	4804      	ldr	r0, [pc, #16]	@ (8001500 <LCD16X2_Write4Bits+0x6c>)
 80014f0:	f001 f973 	bl	80027da <HAL_GPIO_WritePin>

    /* Pulse enable */
    LCD16X2_Pulse_E();
 80014f4:	f7ff ffac 	bl	8001450 <LCD16X2_Pulse_E>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010800 	.word	0x40010800

08001504 <LCD16X2_Delay_us>:
/**
 * @brief Microsecond delay
 * @param us: Delay in microseconds
 */
static void LCD16X2_Delay_us(uint32_t us)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    /* Simple delay loop - adjust according to your system clock */
    uint32_t i;
    for(i = 0; i < (us * 8); i++)
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e003      	b.n	800151a <LCD16X2_Delay_us+0x16>
    {
        __NOP();
 8001512:	bf00      	nop
    for(i = 0; i < (us * 8); i++)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d3f6      	bcc.n	8001512 <LCD16X2_Delay_us+0xe>
    }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b08e      	sub	sp, #56	@ 0x38
 8001534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f000 fe21 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 f9df 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f000 fae9 	bl	8001b14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001542:	f000 fabd 	bl	8001ac0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001546:	f000 fa1f 	bl	8001988 <MX_TIM3_Init>
  MX_TIM4_Init();
 800154a:	f000 fa6b 	bl	8001a24 <MX_TIM4_Init>
  HAL_TIM_Base_Start(&htim3);
 800154e:	48b7      	ldr	r0, [pc, #732]	@ (800182c <main+0x2fc>)
 8001550:	f001 fdd4 	bl	80030fc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001554:	48b6      	ldr	r0, [pc, #728]	@ (8001830 <main+0x300>)
 8001556:	f001 fdd1 	bl	80030fc <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */
  LCD16X2_Init(LCD16X2_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
 800155a:	2004      	movs	r0, #4
 800155c:	f7ff fe0e 	bl	800117c <LCD16X2_Init>
  LCD16X2_GotoXY(0, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff feb6 	bl	80012d4 <LCD16X2_GotoXY>
  LCD16X2_CreateCustomChar(0, custom_char2);
 8001568:	49b2      	ldr	r1, [pc, #712]	@ (8001834 <main+0x304>)
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fef0 	bl	8001350 <LCD16X2_CreateCustomChar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag1==0 && flag2==0)
 8001570:	4bb1      	ldr	r3, [pc, #708]	@ (8001838 <main+0x308>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80a9 	bne.w	80016ce <main+0x19e>
 800157c:	4baf      	ldr	r3, [pc, #700]	@ (800183c <main+0x30c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 80a3 	bne.w	80016ce <main+0x19e>
	  	{
	  			ButtonPressed1=0;
 8001588:	4bad      	ldr	r3, [pc, #692]	@ (8001840 <main+0x310>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
	  			ButtonPressed2=0;
 800158e:	4bad      	ldr	r3, [pc, #692]	@ (8001844 <main+0x314>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
	  				//Alegere timp random player 1
	  			p1r=rand()%5;
 8001594:	f002 fa4a 	bl	8003a2c <rand>
 8001598:	4602      	mov	r2, r0
 800159a:	4bab      	ldr	r3, [pc, #684]	@ (8001848 <main+0x318>)
 800159c:	fb83 1302 	smull	r1, r3, r3, r2
 80015a0:	1059      	asrs	r1, r3, #1
 80015a2:	17d3      	asrs	r3, r2, #31
 80015a4:	1ac9      	subs	r1, r1, r3
 80015a6:	460b      	mov	r3, r1
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	1ad1      	subs	r1, r2, r3
 80015ae:	460b      	mov	r3, r1
 80015b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  			while(p1r==0)
 80015b4:	e00f      	b.n	80015d6 <main+0xa6>
	  			{
	  				p1r=rand()%5; //
 80015b6:	f002 fa39 	bl	8003a2c <rand>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001848 <main+0x318>)
 80015be:	fb83 1302 	smull	r1, r3, r3, r2
 80015c2:	1059      	asrs	r1, r3, #1
 80015c4:	17d3      	asrs	r3, r2, #31
 80015c6:	1ac9      	subs	r1, r1, r3
 80015c8:	460b      	mov	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	1ad1      	subs	r1, r2, r3
 80015d0:	460b      	mov	r3, r1
 80015d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  			while(p1r==0)
 80015d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0eb      	beq.n	80015b6 <main+0x86>

	  			}
	  				//Alegere timp random player 2
	  			p2r=rand()%5;
 80015de:	f002 fa25 	bl	8003a2c <rand>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b98      	ldr	r3, [pc, #608]	@ (8001848 <main+0x318>)
 80015e6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ea:	1059      	asrs	r1, r3, #1
 80015ec:	17d3      	asrs	r3, r2, #31
 80015ee:	1ac9      	subs	r1, r1, r3
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	1ad1      	subs	r1, r2, r3
 80015f8:	460b      	mov	r3, r1
 80015fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	  			while(p2r==0)
 80015fe:	e00f      	b.n	8001620 <main+0xf0>
	  			{
	  				p2r=rand()%5;
 8001600:	f002 fa14 	bl	8003a2c <rand>
 8001604:	4602      	mov	r2, r0
 8001606:	4b90      	ldr	r3, [pc, #576]	@ (8001848 <main+0x318>)
 8001608:	fb83 1302 	smull	r1, r3, r3, r2
 800160c:	1059      	asrs	r1, r3, #1
 800160e:	17d3      	asrs	r3, r2, #31
 8001610:	1ac9      	subs	r1, r1, r3
 8001612:	460b      	mov	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	1ad1      	subs	r1, r2, r3
 800161a:	460b      	mov	r3, r1
 800161c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	  			while(p2r==0)
 8001620:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0eb      	beq.n	8001600 <main+0xd0>
	  			}

	  			while(flag1==0 && flag2==0)
 8001628:	e047      	b.n	80016ba <main+0x18a>
	  			{
	  						//partitionare ecran in doua
	  					LCD16X2_GotoXY(0, 0);
 800162a:	2100      	movs	r1, #0
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fe51 	bl	80012d4 <LCD16X2_GotoXY>
	  					LCD16X2_PutCustomChar(7, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2007      	movs	r0, #7
 8001638:	f7ff feb5 	bl	80013a6 <LCD16X2_PutCustomChar>
	  					LCD16X2_PutCustomChar(8, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2008      	movs	r0, #8
 8001642:	f7ff feb0 	bl	80013a6 <LCD16X2_PutCustomChar>
	  					LCD16X2_PutCustomChar(7, 1, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2101      	movs	r1, #1
 800164a:	2007      	movs	r0, #7
 800164c:	f7ff feab 	bl	80013a6 <LCD16X2_PutCustomChar>
	  					LCD16X2_PutCustomChar(8, 1, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2101      	movs	r1, #1
 8001654:	2008      	movs	r0, #8
 8001656:	f7ff fea6 	bl	80013a6 <LCD16X2_PutCustomChar>

	  					  //Scriere nume jucatori.
	  					LCD16X2_GotoXY(0, 0);
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fe39 	bl	80012d4 <LCD16X2_GotoXY>
	  					LCD16X2_Puts("Player1");
 8001662:	487a      	ldr	r0, [pc, #488]	@ (800184c <main+0x31c>)
 8001664:	f7ff fe5f 	bl	8001326 <LCD16X2_Puts>
	  					  //Afisare timp intre cele doua apasari
	  					LCD16X2_GotoXY(3, 1);
 8001668:	2101      	movs	r1, #1
 800166a:	2003      	movs	r0, #3
 800166c:	f7ff fe32 	bl	80012d4 <LCD16X2_GotoXY>
	  					sprintf(s, "%ds",p1r);
 8001670:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4976      	ldr	r1, [pc, #472]	@ (8001850 <main+0x320>)
 8001678:	4618      	mov	r0, r3
 800167a:	f003 f93b 	bl	80048f4 <siprintf>
	  					LCD16X2_Puts(s);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fe50 	bl	8001326 <LCD16X2_Puts>

	  					LCD16X2_GotoXY(9, 0);
 8001686:	2100      	movs	r1, #0
 8001688:	2009      	movs	r0, #9
 800168a:	f7ff fe23 	bl	80012d4 <LCD16X2_GotoXY>
	  					LCD16X2_Puts("Player2");
 800168e:	4871      	ldr	r0, [pc, #452]	@ (8001854 <main+0x324>)
 8001690:	f7ff fe49 	bl	8001326 <LCD16X2_Puts>


	  					LCD16X2_GotoXY(12, 1);
 8001694:	2101      	movs	r1, #1
 8001696:	200c      	movs	r0, #12
 8001698:	f7ff fe1c 	bl	80012d4 <LCD16X2_GotoXY>
	  					sprintf(s, "%ds",p2r);
 800169c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	496b      	ldr	r1, [pc, #428]	@ (8001850 <main+0x320>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 f925 	bl	80048f4 <siprintf>
	  					LCD16X2_Puts(s);
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fe3a 	bl	8001326 <LCD16X2_Puts>

	  					HAL_Delay(1000);
 80016b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016b6:	f000 fdc3 	bl	8002240 <HAL_Delay>
	  			while(flag1==0 && flag2==0)
 80016ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <main+0x308>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <main+0x19e>
 80016c4:	4b5d      	ldr	r3, [pc, #372]	@ (800183c <main+0x30c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0ad      	beq.n	800162a <main+0xfa>
	  			}
	  	}

	  		if(flag1==1 && flag2==1)
 80016ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001838 <main+0x308>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f47f af4b 	bne.w	8001570 <main+0x40>
 80016da:	4b58      	ldr	r3, [pc, #352]	@ (800183c <main+0x30c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	f47f af45 	bne.w	8001570 <main+0x40>
	  		{
	  			LCD16X2_ClrScr();
 80016e6:	f7ff fdeb 	bl	80012c0 <LCD16X2_ClrScr>
	  			scor1=fabs(p1r-(float)timp1/10000);
 80016ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff faf4 	bl	8000cdc <__aeabi_i2f>
 80016f4:	4604      	mov	r4, r0
 80016f6:	4b58      	ldr	r3, [pc, #352]	@ (8001858 <main+0x328>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fae9 	bl	8000cd4 <__aeabi_ui2f>
 8001702:	4603      	mov	r3, r0
 8001704:	4955      	ldr	r1, [pc, #340]	@ (800185c <main+0x32c>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fbf0 	bl	8000eec <__aeabi_fdiv>
 800170c:	4603      	mov	r3, r0
 800170e:	4619      	mov	r1, r3
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fa2d 	bl	8000b70 <__aeabi_fsub>
 8001716:	4603      	mov	r3, r0
 8001718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  			scor2=fabs(p2r-(float)timp2/10000);
 800171e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fada 	bl	8000cdc <__aeabi_i2f>
 8001728:	4604      	mov	r4, r0
 800172a:	4b4d      	ldr	r3, [pc, #308]	@ (8001860 <main+0x330>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff facf 	bl	8000cd4 <__aeabi_ui2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4948      	ldr	r1, [pc, #288]	@ (800185c <main+0x32c>)
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fbd6 	bl	8000eec <__aeabi_fdiv>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff fa13 	bl	8000b70 <__aeabi_fsub>
 800174a:	4603      	mov	r3, r0
 800174c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24


	  			sprintf(s, "%.2fs  S1=%.2f\n",(float)timp1/10000,scor1);
 8001752:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <main+0x328>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fabb 	bl	8000cd4 <__aeabi_ui2f>
 800175e:	4603      	mov	r3, r0
 8001760:	493e      	ldr	r1, [pc, #248]	@ (800185c <main+0x32c>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fbc2 	bl	8000eec <__aeabi_fdiv>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fe5c 	bl	8000428 <__aeabi_f2d>
 8001770:	4604      	mov	r4, r0
 8001772:	460d      	mov	r5, r1
 8001774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001776:	f7fe fe57 	bl	8000428 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	1d38      	adds	r0, r7, #4
 8001780:	e9cd 2300 	strd	r2, r3, [sp]
 8001784:	4622      	mov	r2, r4
 8001786:	462b      	mov	r3, r5
 8001788:	4936      	ldr	r1, [pc, #216]	@ (8001864 <main+0x334>)
 800178a:	f003 f8b3 	bl	80048f4 <siprintf>
	  			LCD16X2_GotoXY(0, 0);
 800178e:	2100      	movs	r1, #0
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fd9f 	bl	80012d4 <LCD16X2_GotoXY>
	  			LCD16X2_Puts(s);
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fdc4 	bl	8001326 <LCD16X2_Puts>

	  			sprintf(s, "%.2fs  S2=%.2f\n",(float)timp2/10000,scor2);
 800179e:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <main+0x330>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fa95 	bl	8000cd4 <__aeabi_ui2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	492b      	ldr	r1, [pc, #172]	@ (800185c <main+0x32c>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fb9c 	bl	8000eec <__aeabi_fdiv>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe36 	bl	8000428 <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017c2:	f7fe fe31 	bl	8000428 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	1d38      	adds	r0, r7, #4
 80017cc:	e9cd 2300 	strd	r2, r3, [sp]
 80017d0:	4622      	mov	r2, r4
 80017d2:	462b      	mov	r3, r5
 80017d4:	4924      	ldr	r1, [pc, #144]	@ (8001868 <main+0x338>)
 80017d6:	f003 f88d 	bl	80048f4 <siprintf>
	  			LCD16X2_GotoXY(0, 1);
 80017da:	2101      	movs	r1, #1
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff fd79 	bl	80012d4 <LCD16X2_GotoXY>
	  			LCD16X2_Puts(s);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fd9e 	bl	8001326 <LCD16X2_Puts>

	  			HAL_Delay(3000);
 80017ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017ee:	f000 fd27 	bl	8002240 <HAL_Delay>

	  			if(scor1>scor2)
 80017f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017f6:	f7ff fc81 	bl	80010fc <__aeabi_fcmpgt>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d039      	beq.n	8001874 <main+0x344>
	  			{
	  				LCD16X2_ClrScr();
 8001800:	f7ff fd5e 	bl	80012c0 <LCD16X2_ClrScr>
	  				LCD16X2_GotoXY(0, 0);
 8001804:	2100      	movs	r1, #0
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fd64 	bl	80012d4 <LCD16X2_GotoXY>
	  				LCD16X2_Puts("Player2 a ");
 800180c:	4817      	ldr	r0, [pc, #92]	@ (800186c <main+0x33c>)
 800180e:	f7ff fd8a 	bl	8001326 <LCD16X2_Puts>
	  				LCD16X2_GotoXY(0, 1);
 8001812:	2101      	movs	r1, #1
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fd5d 	bl	80012d4 <LCD16X2_GotoXY>
	  				LCD16X2_Puts("castigat!!");
 800181a:	4815      	ldr	r0, [pc, #84]	@ (8001870 <main+0x340>)
 800181c:	f7ff fd83 	bl	8001326 <LCD16X2_Puts>
	  				HAL_Delay(5000);
 8001820:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001824:	f000 fd0c 	bl	8002240 <HAL_Delay>
 8001828:	e038      	b.n	800189c <main+0x36c>
 800182a:	bf00      	nop
 800182c:	200001f8 	.word	0x200001f8
 8001830:	20000240 	.word	0x20000240
 8001834:	20000000 	.word	0x20000000
 8001838:	200002d0 	.word	0x200002d0
 800183c:	200002d1 	.word	0x200002d1
 8001840:	200002d6 	.word	0x200002d6
 8001844:	200002d7 	.word	0x200002d7
 8001848:	66666667 	.word	0x66666667
 800184c:	08008178 	.word	0x08008178
 8001850:	08008180 	.word	0x08008180
 8001854:	08008184 	.word	0x08008184
 8001858:	200002d8 	.word	0x200002d8
 800185c:	461c4000 	.word	0x461c4000
 8001860:	200002da 	.word	0x200002da
 8001864:	0800818c 	.word	0x0800818c
 8001868:	0800819c 	.word	0x0800819c
 800186c:	080081ac 	.word	0x080081ac
 8001870:	080081b8 	.word	0x080081b8
	  			}
	  			else
	  			{
	  				LCD16X2_ClrScr();
 8001874:	f7ff fd24 	bl	80012c0 <LCD16X2_ClrScr>
	  				LCD16X2_GotoXY(0, 0);
 8001878:	2100      	movs	r1, #0
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fd2a 	bl	80012d4 <LCD16X2_GotoXY>
	  				LCD16X2_Puts("Player1 a ");
 8001880:	4814      	ldr	r0, [pc, #80]	@ (80018d4 <main+0x3a4>)
 8001882:	f7ff fd50 	bl	8001326 <LCD16X2_Puts>
	  				LCD16X2_GotoXY(0, 1);
 8001886:	2101      	movs	r1, #1
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fd23 	bl	80012d4 <LCD16X2_GotoXY>
	  				LCD16X2_Puts("castigat!!");
 800188e:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <main+0x3a8>)
 8001890:	f7ff fd49 	bl	8001326 <LCD16X2_Puts>
	  				HAL_Delay(5000);
 8001894:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001898:	f000 fcd2 	bl	8002240 <HAL_Delay>
	  			}

	  			LCD16X2_ClrScr();
 800189c:	f7ff fd10 	bl	80012c0 <LCD16X2_ClrScr>
	  			flag1=0;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <main+0x3ac>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	  			flag2=0;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <main+0x3b0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
	  			ButtonPressed1 = 0;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <main+0x3b4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	  			ButtonPressed2 = 0;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <main+0x3b8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
	  			timp1=0;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <main+0x3bc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	801a      	strh	r2, [r3, #0]
	  			timp2=0;
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <main+0x3c0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]
	  			count1=0;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <main+0x3c4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	801a      	strh	r2, [r3, #0]
	  			count2=0;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <main+0x3c8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	801a      	strh	r2, [r3, #0]
	  if(flag1==0 && flag2==0)
 80018d0:	e64e      	b.n	8001570 <main+0x40>
 80018d2:	bf00      	nop
 80018d4:	080081c4 	.word	0x080081c4
 80018d8:	080081b8 	.word	0x080081b8
 80018dc:	200002d0 	.word	0x200002d0
 80018e0:	200002d1 	.word	0x200002d1
 80018e4:	200002d6 	.word	0x200002d6
 80018e8:	200002d7 	.word	0x200002d7
 80018ec:	200002d8 	.word	0x200002d8
 80018f0:	200002da 	.word	0x200002da
 80018f4:	200002d2 	.word	0x200002d2
 80018f8:	200002d4 	.word	0x200002d4

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b090      	sub	sp, #64	@ 0x40
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	2228      	movs	r2, #40	@ 0x28
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f857 	bl	80049be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001922:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001930:	2302      	movs	r3, #2
 8001932:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800193a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f000 ff79 	bl	800283c <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001950:	f000 fa3c 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	2302      	movs	r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001960:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f001 f9e6 	bl	8002d40 <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800197a:	f000 fa27 	bl	8001dcc <Error_Handler>
  }
}
 800197e:	bf00      	nop
 8001980:	3740      	adds	r7, #64	@ 0x40
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a20 <MX_TIM3_Init+0x98>)
 80019a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019ac:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80019b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019cc:	4813      	ldr	r0, [pc, #76]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019ce:	f001 fb45 	bl	800305c <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019d8:	f000 f9f8 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <MX_TIM3_Init+0x94>)
 80019ea:	f001 fbd1 	bl	8003190 <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80019f4:	f000 f9ea 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_TIM3_Init+0x94>)
 8001a06:	f001 fd8f 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a10:	f000 f9dc 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200001f8 	.word	0x200001f8
 8001a20:	40000400 	.word	0x40000400

08001a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a42:	4a1e      	ldr	r2, [pc, #120]	@ (8001abc <MX_TIM4_Init+0x98>)
 8001a44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a48:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a68:	4813      	ldr	r0, [pc, #76]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a6a:	f001 faf7 	bl	800305c <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001a74:	f000 f9aa 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001a86:	f001 fb83 	bl	8003190 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001a90:	f000 f99c 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_TIM4_Init+0x94>)
 8001aa2:	f001 fd41 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001aac:	f000 f98e 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000240 	.word	0x20000240
 8001abc:	40000800 	.word	0x40000800

08001ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <MX_USART2_UART_Init+0x50>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af6:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_USART2_UART_Init+0x4c>)
 8001af8:	f001 fd74 	bl	80035e4 <HAL_UART_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b02:	f000 f963 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000288 	.word	0x20000288
 8001b10:	40004400 	.word	0x40004400

08001b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b28:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b40:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a34      	ldr	r2, [pc, #208]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b46:	f043 0320 	orr.w	r3, r3, #32
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b32      	ldr	r3, [pc, #200]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a28      	ldr	r2, [pc, #160]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <MX_GPIO_Init+0x104>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	4823      	ldr	r0, [pc, #140]	@ (8001c1c <MX_GPIO_Init+0x108>)
 8001b8e:	f000 fe24 	bl	80027da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC0 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_0;
 8001b92:	f242 0301 	movw	r3, #8193	@ 0x2001
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b98:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <MX_GPIO_Init+0x10c>)
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481f      	ldr	r0, [pc, #124]	@ (8001c24 <MX_GPIO_Init+0x110>)
 8001ba8:	f000 fc7c 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bac:	2302      	movs	r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <MX_GPIO_Init+0x10c>)
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <MX_GPIO_Init+0x108>)
 8001bc0:	f000 fc70 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4810      	ldr	r0, [pc, #64]	@ (8001c1c <MX_GPIO_Init+0x108>)
 8001bdc:	f000 fc62 	bl	80024a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2006      	movs	r0, #6
 8001be6:	f000 fc26 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bea:	2006      	movs	r0, #6
 8001bec:	f000 fc3f 	bl	800246e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2007      	movs	r0, #7
 8001bf6:	f000 fc1e 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f000 fc37 	bl	800246e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2028      	movs	r0, #40	@ 0x28
 8001c06:	f000 fc16 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c0a:	2028      	movs	r0, #40	@ 0x28
 8001c0c:	f000 fc2f 	bl	800246e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	10110000 	.word	0x10110000
 8001c24:	40011000 	.word	0x40011000

08001c28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI callback
  * @param  GPIO_Pin: Specifies the pin connected to EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	@ 0x30
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
  SendToSerial("am intrat in nvic callback!\r\n");
 8001c32:	484b      	ldr	r0, [pc, #300]	@ (8001d60 <HAL_GPIO_EXTI_Callback+0x138>)
 8001c34:	f000 f8b6 	bl	8001da4 <SendToSerial>
  char str[32];
  sprintf(str, "GPIO_Pin:%d\r\n",GPIO_Pin);
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4949      	ldr	r1, [pc, #292]	@ (8001d64 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fe57 	bl	80048f4 <siprintf>
  SendToSerial(str);
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f8aa 	bl	8001da4 <SendToSerial>
  sprintf(str, "GPIO_Pin_0:%d\r\n",GPIO_PIN_0);
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	2201      	movs	r2, #1
 8001c56:	4944      	ldr	r1, [pc, #272]	@ (8001d68 <HAL_GPIO_EXTI_Callback+0x140>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 fe4b 	bl	80048f4 <siprintf>
  SendToSerial(str);
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f89e 	bl	8001da4 <SendToSerial>
  sprintf(str, "GPIO_Pin_1:%d\r\n",GPIO_PIN_1);
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	493f      	ldr	r1, [pc, #252]	@ (8001d6c <HAL_GPIO_EXTI_Callback+0x144>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fe3f 	bl	80048f4 <siprintf>
  SendToSerial(str);
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f892 	bl	8001da4 <SendToSerial>
  if(GPIO_Pin == GPIO_PIN_0) // Player 2 button (PC0)
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d132      	bne.n	8001cec <HAL_GPIO_EXTI_Callback+0xc4>
  {
    /* Debouncing delay */
	SendToSerial("PC0 interrupt!\r\n");
 8001c86:	483a      	ldr	r0, [pc, #232]	@ (8001d70 <HAL_GPIO_EXTI_Callback+0x148>)
 8001c88:	f000 f88c 	bl	8001da4 <SendToSerial>
    //HAL_Delay(30); // ? nu trece de HAL_Delay()???
	for(int i=0;i<30000;i++)			// debouncing pt. buton
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_EXTI_Callback+0x72>
	    __NOP();
 8001c92:	bf00      	nop
	for(int i=0;i<30000;i++)			// debouncing pt. buton
 8001c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c96:	3301      	adds	r3, #1
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	ddf6      	ble.n	8001c92 <HAL_GPIO_EXTI_Callback+0x6a>
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4833      	ldr	r0, [pc, #204]	@ (8001d74 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001ca8:	f000 fd80 	bl	80027ac <HAL_GPIO_ReadPin>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d151      	bne.n	8001d56 <HAL_GPIO_EXTI_Callback+0x12e>
    {
    	SendToSerial("Pressed!\r\n");
 8001cb2:	4831      	ldr	r0, [pc, #196]	@ (8001d78 <HAL_GPIO_EXTI_Callback+0x150>)
 8001cb4:	f000 f876 	bl	8001da4 <SendToSerial>
      if(ButtonPressed2 == 0)
 8001cb8:	4b30      	ldr	r3, [pc, #192]	@ (8001d7c <HAL_GPIO_EXTI_Callback+0x154>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_GPIO_EXTI_Callback+0xaa>
      {
        ButtonPressed2 = 1;
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <HAL_GPIO_EXTI_Callback+0x154>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim4, 0); // Reset counter
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0x158>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
        flag1 = 1;
        timp1 = __HAL_TIM_GET_COUNTER(&htim3); // Get counter value
      }
    }
  }
}
 8001cd0:	e041      	b.n	8001d56 <HAL_GPIO_EXTI_Callback+0x12e>
        ButtonPressed2 = 0;
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_GPIO_EXTI_Callback+0x154>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
        flag2 = 1;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
        timp2 = __HAL_TIM_GET_COUNTER(&htim4); // Get counter value
 8001cde:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0x158>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <HAL_GPIO_EXTI_Callback+0x160>)
 8001ce8:	801a      	strh	r2, [r3, #0]
}
 8001cea:	e034      	b.n	8001d56 <HAL_GPIO_EXTI_Callback+0x12e>
  else if(GPIO_Pin == GPIO_PIN_1) // Player 1 button (PA1)
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d131      	bne.n	8001d56 <HAL_GPIO_EXTI_Callback+0x12e>
	SendToSerial("PA1 interrupt!\r\n");
 8001cf2:	4826      	ldr	r0, [pc, #152]	@ (8001d8c <HAL_GPIO_EXTI_Callback+0x164>)
 8001cf4:	f000 f856 	bl	8001da4 <SendToSerial>
	for(int i=0;i<30000;i++)			// debouncing pt. buton
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_EXTI_Callback+0xde>
	    __NOP();
 8001cfe:	bf00      	nop
	for(int i=0;i<30000;i++)			// debouncing pt. buton
 8001d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d02:	3301      	adds	r3, #1
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	ddf6      	ble.n	8001cfe <HAL_GPIO_EXTI_Callback+0xd6>
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 8001d10:	2102      	movs	r1, #2
 8001d12:	481f      	ldr	r0, [pc, #124]	@ (8001d90 <HAL_GPIO_EXTI_Callback+0x168>)
 8001d14:	f000 fd4a 	bl	80027ac <HAL_GPIO_ReadPin>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d11b      	bne.n	8001d56 <HAL_GPIO_EXTI_Callback+0x12e>
    	SendToSerial("Pressed!\r\n");
 8001d1e:	4816      	ldr	r0, [pc, #88]	@ (8001d78 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d20:	f000 f840 	bl	8001da4 <SendToSerial>
      if(ButtonPressed1 == 0)
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_GPIO_EXTI_Callback+0x116>
        ButtonPressed1 = 1;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim3, 0); // Reset counter
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0x170>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001d3c:	e00b      	b.n	8001d56 <HAL_GPIO_EXTI_Callback+0x12e>
        ButtonPressed1 = 0;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
        flag1 = 1;
 8001d44:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_GPIO_EXTI_Callback+0x174>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
        timp1 = __HAL_TIM_GET_COUNTER(&htim3); // Get counter value
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0x170>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <HAL_GPIO_EXTI_Callback+0x178>)
 8001d54:	801a      	strh	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	3730      	adds	r7, #48	@ 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	080081d0 	.word	0x080081d0
 8001d64:	080081f0 	.word	0x080081f0
 8001d68:	08008200 	.word	0x08008200
 8001d6c:	08008210 	.word	0x08008210
 8001d70:	08008220 	.word	0x08008220
 8001d74:	40011000 	.word	0x40011000
 8001d78:	08008234 	.word	0x08008234
 8001d7c:	200002d7 	.word	0x200002d7
 8001d80:	20000240 	.word	0x20000240
 8001d84:	200002d1 	.word	0x200002d1
 8001d88:	200002da 	.word	0x200002da
 8001d8c:	08008240 	.word	0x08008240
 8001d90:	40010800 	.word	0x40010800
 8001d94:	200002d6 	.word	0x200002d6
 8001d98:	200001f8 	.word	0x200001f8
 8001d9c:	200002d0 	.word	0x200002d0
 8001da0:	200002d8 	.word	0x200002d8

08001da4 <SendToSerial>:

void SendToSerial(char* message)
  {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7fe f9cf 	bl	8000150 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2364      	movs	r3, #100	@ 0x64
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4803      	ldr	r0, [pc, #12]	@ (8001dc8 <SendToSerial+0x24>)
 8001dbc:	f001 fc62 	bl	8003684 <HAL_UART_Transmit>
  }
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000288 	.word	0x20000288

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x8>

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6193      	str	r3, [r2, #24]
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <HAL_MspInit+0x5c>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_MspInit+0x60>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <HAL_MspInit+0x60>)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000

08001e3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <HAL_TIM_Base_MspInit+0x58>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10c      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4e:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_TIM_Base_MspInit+0x5c>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a11      	ldr	r2, [pc, #68]	@ (8001e98 <HAL_TIM_Base_MspInit+0x5c>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_TIM_Base_MspInit+0x5c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e66:	e010      	b.n	8001e8a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e9c <HAL_TIM_Base_MspInit+0x60>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10b      	bne.n	8001e8a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_TIM_Base_MspInit+0x5c>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <HAL_TIM_Base_MspInit+0x5c>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_TIM_Base_MspInit+0x5c>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40000800 	.word	0x40000800

08001ea0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a15      	ldr	r2, [pc, #84]	@ (8001f10 <HAL_UART_MspInit+0x70>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d123      	bne.n	8001f08 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <HAL_UART_MspInit+0x74>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <HAL_UART_MspInit+0x74>)
 8001ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eca:	61d3      	str	r3, [r2, #28]
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_UART_MspInit+0x74>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <HAL_UART_MspInit+0x74>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_UART_MspInit+0x74>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_UART_MspInit+0x74>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ef0:	230c      	movs	r3, #12
 8001ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4619      	mov	r1, r3
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <HAL_UART_MspInit+0x78>)
 8001f04:	f000 face 	bl	80024a4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40004400 	.word	0x40004400
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010800 	.word	0x40010800

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <NMI_Handler+0x4>

08001f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <MemManage_Handler+0x4>

08001f34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 f94c 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f000 fc47 	bl	800280c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f000 fc40 	bl	800280c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f98:	f000 fc38 	bl	800280c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return 1;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <_kill>:

int _kill(int pid, int sig)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fb8:	f002 fd54 	bl	8004a64 <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2216      	movs	r2, #22
 8001fc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_exit>:

void _exit (int status)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffe7 	bl	8001fae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <_exit+0x12>

08001fe4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e00a      	b.n	800200c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff6:	f3af 8000 	nop.w
 8001ffa:	4601      	mov	r1, r0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	b2ca      	uxtb	r2, r1
 8002004:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	dbf0      	blt.n	8001ff6 <_read+0x12>
  }

  return len;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e009      	b.n	8002044 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf1      	blt.n	8002030 <_write+0x12>
  }
  return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_close>:

int _close(int file)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800207c:	605a      	str	r2, [r3, #4]
  return 0;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
	...

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	@ (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	@ (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f002 fcbc 	bl	8004a64 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20005000 	.word	0x20005000
 8002118:	00000400 	.word	0x00000400
 800211c:	200002dc 	.word	0x200002dc
 8002120:	20000430 	.word	0x20000430

08002124 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002130:	f7ff fff8 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002134:	480b      	ldr	r0, [pc, #44]	@ (8002164 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002136:	490c      	ldr	r1, [pc, #48]	@ (8002168 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002138:	4a0c      	ldr	r2, [pc, #48]	@ (800216c <LoopFillZerobss+0x16>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a09      	ldr	r2, [pc, #36]	@ (8002170 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800214c:	4c09      	ldr	r4, [pc, #36]	@ (8002174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215a:	f002 fc89 	bl	8004a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800215e:	f7ff f9e7 	bl	8001530 <main>
  bx lr
 8002162:	4770      	bx	lr
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800216c:	0800870c 	.word	0x0800870c
  ldr r2, =_sbss
 8002170:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002174:	20000430 	.word	0x20000430

08002178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC1_2_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <HAL_Init+0x28>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <HAL_Init+0x28>)
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218c:	2003      	movs	r0, #3
 800218e:	f000 f947 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f808 	bl	80021a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002198:	f7ff fe1e 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40022000 	.word	0x40022000

080021a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_InitTick+0x54>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <HAL_InitTick+0x58>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f95f 	bl	800248a <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00e      	b.n	80021f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	d80a      	bhi.n	80021f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	2200      	movs	r2, #0
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f000 f927 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e8:	4a06      	ldr	r2, [pc, #24]	@ (8002204 <HAL_InitTick+0x5c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000008 	.word	0x20000008
 8002200:	20000010 	.word	0x20000010
 8002204:	2000000c 	.word	0x2000000c

08002208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_IncTick+0x1c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_IncTick+0x20>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a03      	ldr	r2, [pc, #12]	@ (8002228 <HAL_IncTick+0x20>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000010 	.word	0x20000010
 8002228:	200002e0 	.word	0x200002e0

0800222c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b02      	ldr	r3, [pc, #8]	@ (800223c <HAL_GetTick+0x10>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	200002e0 	.word	0x200002e0

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff fff0 	bl	800222c <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffe0 	bl	800222c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000010 	.word	0x20000010

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4906      	ldr	r1, [pc, #24]	@ (8002320 <__NVIC_EnableIRQ+0x34>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff90 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff2d 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff42 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff90 	bl	8002378 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5f 	bl	8002324 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff35 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b08b      	sub	sp, #44	@ 0x2c
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b6:	e169      	b.n	800278c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b8:	2201      	movs	r2, #1
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8158 	bne.w	8002786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a9a      	ldr	r2, [pc, #616]	@ (8002744 <HAL_GPIO_Init+0x2a0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d05e      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024e0:	4a98      	ldr	r2, [pc, #608]	@ (8002744 <HAL_GPIO_Init+0x2a0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d875      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024e6:	4a98      	ldr	r2, [pc, #608]	@ (8002748 <HAL_GPIO_Init+0x2a4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d058      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024ec:	4a96      	ldr	r2, [pc, #600]	@ (8002748 <HAL_GPIO_Init+0x2a4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d86f      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024f2:	4a96      	ldr	r2, [pc, #600]	@ (800274c <HAL_GPIO_Init+0x2a8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d052      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024f8:	4a94      	ldr	r2, [pc, #592]	@ (800274c <HAL_GPIO_Init+0x2a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d869      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024fe:	4a94      	ldr	r2, [pc, #592]	@ (8002750 <HAL_GPIO_Init+0x2ac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04c      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 8002504:	4a92      	ldr	r2, [pc, #584]	@ (8002750 <HAL_GPIO_Init+0x2ac>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d863      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 800250a:	4a92      	ldr	r2, [pc, #584]	@ (8002754 <HAL_GPIO_Init+0x2b0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d046      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 8002510:	4a90      	ldr	r2, [pc, #576]	@ (8002754 <HAL_GPIO_Init+0x2b0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d85d      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 8002516:	2b12      	cmp	r3, #18
 8002518:	d82a      	bhi.n	8002570 <HAL_GPIO_Init+0xcc>
 800251a:	2b12      	cmp	r3, #18
 800251c:	d859      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 800251e:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <HAL_GPIO_Init+0x80>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	0800259f 	.word	0x0800259f
 8002528:	08002579 	.word	0x08002579
 800252c:	0800258b 	.word	0x0800258b
 8002530:	080025cd 	.word	0x080025cd
 8002534:	080025d3 	.word	0x080025d3
 8002538:	080025d3 	.word	0x080025d3
 800253c:	080025d3 	.word	0x080025d3
 8002540:	080025d3 	.word	0x080025d3
 8002544:	080025d3 	.word	0x080025d3
 8002548:	080025d3 	.word	0x080025d3
 800254c:	080025d3 	.word	0x080025d3
 8002550:	080025d3 	.word	0x080025d3
 8002554:	080025d3 	.word	0x080025d3
 8002558:	080025d3 	.word	0x080025d3
 800255c:	080025d3 	.word	0x080025d3
 8002560:	080025d3 	.word	0x080025d3
 8002564:	080025d3 	.word	0x080025d3
 8002568:	08002581 	.word	0x08002581
 800256c:	08002595 	.word	0x08002595
 8002570:	4a79      	ldr	r2, [pc, #484]	@ (8002758 <HAL_GPIO_Init+0x2b4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002576:	e02c      	b.n	80025d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	623b      	str	r3, [r7, #32]
          break;
 800257e:	e029      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	3304      	adds	r3, #4
 8002586:	623b      	str	r3, [r7, #32]
          break;
 8002588:	e024      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	3308      	adds	r3, #8
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e01f      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	330c      	adds	r3, #12
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e01a      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025a6:	2304      	movs	r3, #4
 80025a8:	623b      	str	r3, [r7, #32]
          break;
 80025aa:	e013      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	611a      	str	r2, [r3, #16]
          break;
 80025be:	e009      	b.n	80025d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c0:	2308      	movs	r3, #8
 80025c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	615a      	str	r2, [r3, #20]
          break;
 80025ca:	e003      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          break;
 80025d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2bff      	cmp	r3, #255	@ 0xff
 80025d8:	d801      	bhi.n	80025de <HAL_GPIO_Init+0x13a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	e001      	b.n	80025e2 <HAL_GPIO_Init+0x13e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2bff      	cmp	r3, #255	@ 0xff
 80025e8:	d802      	bhi.n	80025f0 <HAL_GPIO_Init+0x14c>
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x152>
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	3b08      	subs	r3, #8
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	210f      	movs	r1, #15
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80b1 	beq.w	8002786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002624:	4b4d      	ldr	r3, [pc, #308]	@ (800275c <HAL_GPIO_Init+0x2b8>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a4c      	ldr	r2, [pc, #304]	@ (800275c <HAL_GPIO_Init+0x2b8>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6193      	str	r3, [r2, #24]
 8002630:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <HAL_GPIO_Init+0x2b8>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800263c:	4a48      	ldr	r2, [pc, #288]	@ (8002760 <HAL_GPIO_Init+0x2bc>)
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a40      	ldr	r2, [pc, #256]	@ (8002764 <HAL_GPIO_Init+0x2c0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_GPIO_Init+0x1ec>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3f      	ldr	r2, [pc, #252]	@ (8002768 <HAL_GPIO_Init+0x2c4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00d      	beq.n	800268c <HAL_GPIO_Init+0x1e8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3e      	ldr	r2, [pc, #248]	@ (800276c <HAL_GPIO_Init+0x2c8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <HAL_GPIO_Init+0x1e4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3d      	ldr	r2, [pc, #244]	@ (8002770 <HAL_GPIO_Init+0x2cc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_GPIO_Init+0x1e0>
 8002680:	2303      	movs	r3, #3
 8002682:	e006      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 8002684:	2304      	movs	r3, #4
 8002686:	e004      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 8002688:	2302      	movs	r3, #2
 800268a:	e002      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 8002690:	2300      	movs	r3, #0
 8002692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002694:	f002 0203 	and.w	r2, r2, #3
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	4093      	lsls	r3, r2
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026a2:	492f      	ldr	r1, [pc, #188]	@ (8002760 <HAL_GPIO_Init+0x2bc>)
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	492c      	ldr	r1, [pc, #176]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	4928      	ldr	r1, [pc, #160]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026e4:	4b23      	ldr	r3, [pc, #140]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	4922      	ldr	r1, [pc, #136]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026f2:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	491e      	ldr	r1, [pc, #120]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4918      	ldr	r1, [pc, #96]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800271a:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	43db      	mvns	r3, r3
 8002722:	4914      	ldr	r1, [pc, #80]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 8002724:	4013      	ands	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d021      	beq.n	8002778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002734:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	490e      	ldr	r1, [pc, #56]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e021      	b.n	8002786 <HAL_GPIO_Init+0x2e2>
 8002742:	bf00      	nop
 8002744:	10320000 	.word	0x10320000
 8002748:	10310000 	.word	0x10310000
 800274c:	10220000 	.word	0x10220000
 8002750:	10210000 	.word	0x10210000
 8002754:	10120000 	.word	0x10120000
 8002758:	10110000 	.word	0x10110000
 800275c:	40021000 	.word	0x40021000
 8002760:	40010000 	.word	0x40010000
 8002764:	40010800 	.word	0x40010800
 8002768:	40010c00 	.word	0x40010c00
 800276c:	40011000 	.word	0x40011000
 8002770:	40011400 	.word	0x40011400
 8002774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_GPIO_Init+0x304>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	43db      	mvns	r3, r3
 8002780:	4909      	ldr	r1, [pc, #36]	@ (80027a8 <HAL_GPIO_Init+0x304>)
 8002782:	4013      	ands	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	3301      	adds	r3, #1
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f ae8e 	bne.w	80024b8 <HAL_GPIO_Init+0x14>
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	372c      	adds	r7, #44	@ 0x2c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	807b      	strh	r3, [r7, #2]
 80027e6:	4613      	mov	r3, r2
 80027e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ea:	787b      	ldrb	r3, [r7, #1]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f0:	887a      	ldrh	r2, [r7, #2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027f6:	e003      	b.n	8002800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	041a      	lsls	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	611a      	str	r2, [r3, #16]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
	...

0800280c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002822:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f9fc 	bl	8001c28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e272      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4b92      	ldr	r3, [pc, #584]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00c      	beq.n	8002882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002868:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d112      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
 8002874:	4b8c      	ldr	r3, [pc, #560]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b89      	ldr	r3, [pc, #548]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06c      	beq.n	8002968 <HAL_RCC_OscConfig+0x12c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d168      	bne.n	8002968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e24c      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x76>
 80028a4:	4b80      	ldr	r3, [pc, #512]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7f      	ldr	r2, [pc, #508]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7a      	ldr	r2, [pc, #488]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b78      	ldr	r3, [pc, #480]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a77      	ldr	r2, [pc, #476]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xbc>
 80028de:	4b72      	ldr	r3, [pc, #456]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a71      	ldr	r2, [pc, #452]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028f8:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a67      	ldr	r2, [pc, #412]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800290e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fc88 	bl	800222c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff fc84 	bl	800222c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e200      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xe4>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff fc74 	bl	800222c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff fc70 	bl	800222c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1ec      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x10c>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002976:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002982:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
 800298e:	4b46      	ldr	r3, [pc, #280]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b43      	ldr	r3, [pc, #268]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1c0      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4939      	ldr	r1, [pc, #228]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e03a      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7ff fc29 	bl	800222c <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7ff fc25 	bl	800222c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1a1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4927      	ldr	r1, [pc, #156]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fc08 	bl	800222c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7ff fc04 	bl	800222c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e180      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03a      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b17      	ldr	r3, [pc, #92]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7ff fbe8 	bl	800222c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff fbe4 	bl	800222c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e160      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 face 	bl	8003020 <RCC_Delay>
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fbce 	bl	800222c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff fbca 	bl	800222c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e146      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	42420000 	.word	0x42420000
 8002ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b92      	ldr	r3, [pc, #584]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e9      	bne.n	8002a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a6 	beq.w	8002c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b88      	ldr	r3, [pc, #544]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a87      	ldr	r2, [pc, #540]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b85      	ldr	r3, [pc, #532]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b82      	ldr	r3, [pc, #520]	@ (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b7f      	ldr	r3, [pc, #508]	@ (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7ff fb8b 	bl	800222c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7ff fb87 	bl	800222c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	@ 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e103      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b75      	ldr	r3, [pc, #468]	@ (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x312>
 8002b40:	4b6f      	ldr	r3, [pc, #444]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a6e      	ldr	r2, [pc, #440]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e02d      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b56:	4b6a      	ldr	r3, [pc, #424]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a69      	ldr	r2, [pc, #420]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b67      	ldr	r3, [pc, #412]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a66      	ldr	r2, [pc, #408]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	e01c      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x356>
 8002b78:	4b61      	ldr	r3, [pc, #388]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a60      	ldr	r2, [pc, #384]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	4b5e      	ldr	r3, [pc, #376]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a5d      	ldr	r2, [pc, #372]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b92:	4b5b      	ldr	r3, [pc, #364]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a5a      	ldr	r2, [pc, #360]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b58      	ldr	r3, [pc, #352]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a57      	ldr	r2, [pc, #348]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff fb3b 	bl	800222c <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7ff fb37 	bl	800222c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0b1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCC_OscConfig+0x37e>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7ff fb25 	bl	800222c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7ff fb21 	bl	800222c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e09b      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	4b40      	ldr	r3, [pc, #256]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8087 	beq.w	8002d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	4b36      	ldr	r3, [pc, #216]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d061      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d146      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b33      	ldr	r3, [pc, #204]	@ (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7ff faf5 	bl	800222c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7ff faf1 	bl	800222c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e06d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	4b29      	ldr	r3, [pc, #164]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4921      	ldr	r1, [pc, #132]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c80:	4b1f      	ldr	r3, [pc, #124]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a19      	ldr	r1, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	430b      	orrs	r3, r1
 8002c92:	491b      	ldr	r1, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff fac5 	bl	800222c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7ff fac1 	bl	800222c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e03d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46a>
 8002cc4:	e035      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff faae 	bl	800222c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff faaa 	bl	800222c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e026      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x498>
 8002cf2:	e01e      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e019      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0d0      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b6a      	ldr	r3, [pc, #424]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b67      	ldr	r3, [pc, #412]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4965      	ldr	r1, [pc, #404]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b63      	ldr	r3, [pc, #396]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0b8      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d9c:	4b59      	ldr	r3, [pc, #356]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a58      	ldr	r2, [pc, #352]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db4:	4b53      	ldr	r3, [pc, #332]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a52      	ldr	r2, [pc, #328]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc0:	4b50      	ldr	r3, [pc, #320]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	494d      	ldr	r1, [pc, #308]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d040      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b47      	ldr	r3, [pc, #284]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d115      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e07f      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b41      	ldr	r3, [pc, #260]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e073      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e06b      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1e:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4936      	ldr	r1, [pc, #216]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e30:	f7ff f9fc 	bl	800222c <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7ff f9f8 	bl	800222c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e053      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 020c 	and.w	r2, r3, #12
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b27      	ldr	r3, [pc, #156]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d210      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	4922      	ldr	r1, [pc, #136]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b20      	ldr	r3, [pc, #128]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e032      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e9c:	4b19      	ldr	r3, [pc, #100]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4916      	ldr	r1, [pc, #88]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eba:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	490e      	ldr	r1, [pc, #56]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ece:	f000 f821 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	490a      	ldr	r1, [pc, #40]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	5ccb      	ldrb	r3, [r1, r3]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	4a09      	ldr	r2, [pc, #36]	@ (8002f0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <HAL_RCC_ClockConfig+0x1d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f95a 	bl	80021a8 <HAL_InitTick>

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08008254 	.word	0x08008254
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	2000000c 	.word	0x2000000c

08002f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x30>
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d003      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x36>
 8002f42:	e027      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f44:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x98>)
 8002f46:	613b      	str	r3, [r7, #16]
      break;
 8002f48:	e027      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0c9b      	lsrs	r3, r3, #18
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	4a17      	ldr	r2, [pc, #92]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f54:	5cd3      	ldrb	r3, [r2, r3]
 8002f56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	0c5b      	lsrs	r3, r3, #17
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	4a11      	ldr	r2, [pc, #68]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x98>)
 8002f76:	fb03 f202 	mul.w	r2, r3, r2
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e004      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	613b      	str	r3, [r7, #16]
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x98>)
 8002f96:	613b      	str	r3, [r7, #16]
      break;
 8002f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9a:	693b      	ldr	r3, [r7, #16]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	007a1200 	.word	0x007a1200
 8002fb0:	0800826c 	.word	0x0800826c
 8002fb4:	0800827c 	.word	0x0800827c
 8002fb8:	003d0900 	.word	0x003d0900

08002fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc0:	4b02      	ldr	r3, [pc, #8]	@ (8002fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000008 	.word	0x20000008

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd4:	f7ff fff2 	bl	8002fbc <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4903      	ldr	r1, [pc, #12]	@ (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08008264 	.word	0x08008264

08002ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ffc:	f7ff ffde 	bl	8002fbc <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	0adb      	lsrs	r3, r3, #11
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	@ (800301c <HAL_RCC_GetPCLK2Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	08008264 	.word	0x08008264

08003020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003028:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <RCC_Delay+0x34>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <RCC_Delay+0x38>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0a5b      	lsrs	r3, r3, #9
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800303c:	bf00      	nop
  }
  while (Delay --);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	60fa      	str	r2, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f9      	bne.n	800303c <RCC_Delay+0x1c>
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	20000008 	.word	0x20000008
 8003058:	10624dd3 	.word	0x10624dd3

0800305c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e041      	b.n	80030f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe feda 	bl	8001e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f000 f940 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	@ (8003184 <HAL_TIM_Base_Start+0x88>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d009      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <HAL_TIM_Base_Start+0x8c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_Base_Start+0x48>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a13      	ldr	r2, [pc, #76]	@ (800318c <HAL_TIM_Base_Start+0x90>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d010      	beq.n	8003178 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003166:	e007      	b.n	8003178 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800

08003190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x1c>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0b4      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x186>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e4:	d03e      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0xd4>
 80031e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ea:	f200 8087 	bhi.w	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f2:	f000 8086 	beq.w	8003302 <HAL_TIM_ConfigClockSource+0x172>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fa:	d87f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b70      	cmp	r3, #112	@ 0x70
 80031fe:	d01a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0xa6>
 8003200:	2b70      	cmp	r3, #112	@ 0x70
 8003202:	d87b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b60      	cmp	r3, #96	@ 0x60
 8003206:	d050      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x11a>
 8003208:	2b60      	cmp	r3, #96	@ 0x60
 800320a:	d877      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b50      	cmp	r3, #80	@ 0x50
 800320e:	d03c      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xfa>
 8003210:	2b50      	cmp	r3, #80	@ 0x50
 8003212:	d873      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b40      	cmp	r3, #64	@ 0x40
 8003216:	d058      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x13a>
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	d86f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 800321c:	2b30      	cmp	r3, #48	@ 0x30
 800321e:	d064      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003220:	2b30      	cmp	r3, #48	@ 0x30
 8003222:	d86b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 8003224:	2b20      	cmp	r3, #32
 8003226:	d060      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d867      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05c      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003230:	2b10      	cmp	r3, #16
 8003232:	d05a      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15a>
 8003234:	e062      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003246:	f000 f950 	bl	80034ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	609a      	str	r2, [r3, #8]
      break;
 8003262:	e04f      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003274:	f000 f939 	bl	80034ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003286:	609a      	str	r2, [r3, #8]
      break;
 8003288:	e03c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	461a      	mov	r2, r3
 8003298:	f000 f8b0 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2150      	movs	r1, #80	@ 0x50
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f907 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032a8:	e02c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 f8ce 	bl	8003458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2160      	movs	r1, #96	@ 0x60
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f8f7 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032c8:	e01c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 f890 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2140      	movs	r1, #64	@ 0x40
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f8e7 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032e8:	e00c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f000 f8de 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032fa:	e003      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003300:	e000      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a2f      	ldr	r2, [pc, #188]	@ (80033f0 <TIM_Base_SetConfig+0xd0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00b      	beq.n	8003350 <TIM_Base_SetConfig+0x30>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333e:	d007      	beq.n	8003350 <TIM_Base_SetConfig+0x30>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a2c      	ldr	r2, [pc, #176]	@ (80033f4 <TIM_Base_SetConfig+0xd4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0x30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2b      	ldr	r2, [pc, #172]	@ (80033f8 <TIM_Base_SetConfig+0xd8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a22      	ldr	r2, [pc, #136]	@ (80033f0 <TIM_Base_SetConfig+0xd0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <TIM_Base_SetConfig+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d007      	beq.n	8003382 <TIM_Base_SetConfig+0x62>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1f      	ldr	r2, [pc, #124]	@ (80033f4 <TIM_Base_SetConfig+0xd4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1e      	ldr	r2, [pc, #120]	@ (80033f8 <TIM_Base_SetConfig+0xd8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <TIM_Base_SetConfig+0xd0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d103      	bne.n	80033c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	611a      	str	r2, [r3, #16]
  }
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0210 	bic.w	r2, r3, #16
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800353c:	2302      	movs	r3, #2
 800353e:	e046      	b.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358c:	d009      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a12      	ldr	r2, [pc, #72]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10c      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800

080035e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e042      	b.n	800367c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe fc48 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f971 	bl	8003910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800364c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d175      	bne.n	8003790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Transmit+0x2c>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e06e      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	@ 0x21
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fe fdb3 	bl	800222c <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036f8:	e02e      	b.n	8003758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f848 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e03a      	b.n	8003792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cb      	bne.n	80036fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f814 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037aa:	e03b      	b.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d037      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe fd3a 	bl	800222c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <UART_WaitOnFlagUntilTimeout+0x30>
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e03a      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d023      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b80      	cmp	r3, #128	@ 0x80
 80037e0:	d020      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d01d      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d116      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f81d 	bl	800384c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2208      	movs	r2, #8
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e00f      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d0b4      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b095      	sub	sp, #84	@ 0x54
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800386a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003874:	643a      	str	r2, [r7, #64]	@ 0x40
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800387a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	61fb      	str	r3, [r7, #28]
   return(result);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e5      	bne.n	8003888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d119      	bne.n	80038f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f023 0310 	bic.w	r3, r3, #16
 80038da:	647b      	str	r3, [r7, #68]	@ 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038e4:	61ba      	str	r2, [r7, #24]
 80038e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6979      	ldr	r1, [r7, #20]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003906:	bf00      	nop
 8003908:	3754      	adds	r7, #84	@ 0x54
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800394a:	f023 030c 	bic.w	r3, r3, #12
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	430b      	orrs	r3, r1
 8003956:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2c      	ldr	r2, [pc, #176]	@ (8003a24 <UART_SetConfig+0x114>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d103      	bne.n	8003980 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7ff fb3e 	bl	8002ff8 <HAL_RCC_GetPCLK2Freq>
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	e002      	b.n	8003986 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7ff fb26 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8003984:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	4a22      	ldr	r2, [pc, #136]	@ (8003a28 <UART_SetConfig+0x118>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	0119      	lsls	r1, r3, #4
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009a      	lsls	r2, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a28 <UART_SetConfig+0x118>)
 80039be:	fba3 0302 	umull	r0, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2064      	movs	r0, #100	@ 0x64
 80039c6:	fb00 f303 	mul.w	r3, r0, r3
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	3332      	adds	r3, #50	@ 0x32
 80039d0:	4a15      	ldr	r2, [pc, #84]	@ (8003a28 <UART_SetConfig+0x118>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039dc:	4419      	add	r1, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009a      	lsls	r2, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <UART_SetConfig+0x118>)
 80039f6:	fba3 0302 	umull	r0, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2064      	movs	r0, #100	@ 0x64
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	3332      	adds	r3, #50	@ 0x32
 8003a08:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <UART_SetConfig+0x118>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	440a      	add	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40013800 	.word	0x40013800
 8003a28:	51eb851f 	.word	0x51eb851f

08003a2c <rand>:
 8003a2c:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <rand+0x5c>)
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	681c      	ldr	r4, [r3, #0]
 8003a32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a34:	b9b3      	cbnz	r3, 8003a64 <rand+0x38>
 8003a36:	2018      	movs	r0, #24
 8003a38:	f001 ff16 	bl	8005868 <malloc>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6320      	str	r0, [r4, #48]	@ 0x30
 8003a40:	b920      	cbnz	r0, 8003a4c <rand+0x20>
 8003a42:	2152      	movs	r1, #82	@ 0x52
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <rand+0x60>)
 8003a46:	4812      	ldr	r0, [pc, #72]	@ (8003a90 <rand+0x64>)
 8003a48:	f001 f84c 	bl	8004ae4 <__assert_func>
 8003a4c:	4911      	ldr	r1, [pc, #68]	@ (8003a94 <rand+0x68>)
 8003a4e:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <rand+0x6c>)
 8003a50:	e9c0 1300 	strd	r1, r3, [r0]
 8003a54:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <rand+0x70>)
 8003a56:	2100      	movs	r1, #0
 8003a58:	6083      	str	r3, [r0, #8]
 8003a5a:	230b      	movs	r3, #11
 8003a5c:	8183      	strh	r3, [r0, #12]
 8003a5e:	2001      	movs	r0, #1
 8003a60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003a64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003a66:	480e      	ldr	r0, [pc, #56]	@ (8003aa0 <rand+0x74>)
 8003a68:	690b      	ldr	r3, [r1, #16]
 8003a6a:	694c      	ldr	r4, [r1, #20]
 8003a6c:	4358      	muls	r0, r3
 8003a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa4 <rand+0x78>)
 8003a70:	fb02 0004 	mla	r0, r2, r4, r0
 8003a74:	fba3 3202 	umull	r3, r2, r3, r2
 8003a78:	3301      	adds	r3, #1
 8003a7a:	eb40 0002 	adc.w	r0, r0, r2
 8003a7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003a82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a86:	bd10      	pop	{r4, pc}
 8003a88:	20000020 	.word	0x20000020
 8003a8c:	0800827e 	.word	0x0800827e
 8003a90:	08008295 	.word	0x08008295
 8003a94:	abcd330e 	.word	0xabcd330e
 8003a98:	e66d1234 	.word	0xe66d1234
 8003a9c:	0005deec 	.word	0x0005deec
 8003aa0:	5851f42d 	.word	0x5851f42d
 8003aa4:	4c957f2d 	.word	0x4c957f2d

08003aa8 <__cvt>:
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aae:	461d      	mov	r5, r3
 8003ab0:	bfbb      	ittet	lt
 8003ab2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ab6:	461d      	movlt	r5, r3
 8003ab8:	2300      	movge	r3, #0
 8003aba:	232d      	movlt	r3, #45	@ 0x2d
 8003abc:	b088      	sub	sp, #32
 8003abe:	4614      	mov	r4, r2
 8003ac0:	bfb8      	it	lt
 8003ac2:	4614      	movlt	r4, r2
 8003ac4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003ac6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003ac8:	7013      	strb	r3, [r2, #0]
 8003aca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003acc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003ad0:	f023 0820 	bic.w	r8, r3, #32
 8003ad4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ad8:	d005      	beq.n	8003ae6 <__cvt+0x3e>
 8003ada:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003ade:	d100      	bne.n	8003ae2 <__cvt+0x3a>
 8003ae0:	3601      	adds	r6, #1
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e000      	b.n	8003ae8 <__cvt+0x40>
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	aa07      	add	r2, sp, #28
 8003aea:	9204      	str	r2, [sp, #16]
 8003aec:	aa06      	add	r2, sp, #24
 8003aee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003af2:	e9cd 3600 	strd	r3, r6, [sp]
 8003af6:	4622      	mov	r2, r4
 8003af8:	462b      	mov	r3, r5
 8003afa:	f001 f899 	bl	8004c30 <_dtoa_r>
 8003afe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b02:	4607      	mov	r7, r0
 8003b04:	d119      	bne.n	8003b3a <__cvt+0x92>
 8003b06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b08:	07db      	lsls	r3, r3, #31
 8003b0a:	d50e      	bpl.n	8003b2a <__cvt+0x82>
 8003b0c:	eb00 0906 	add.w	r9, r0, r6
 8003b10:	2200      	movs	r2, #0
 8003b12:	2300      	movs	r3, #0
 8003b14:	4620      	mov	r0, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	f7fc ff46 	bl	80009a8 <__aeabi_dcmpeq>
 8003b1c:	b108      	cbz	r0, 8003b22 <__cvt+0x7a>
 8003b1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b22:	2230      	movs	r2, #48	@ 0x30
 8003b24:	9b07      	ldr	r3, [sp, #28]
 8003b26:	454b      	cmp	r3, r9
 8003b28:	d31e      	bcc.n	8003b68 <__cvt+0xc0>
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	9b07      	ldr	r3, [sp, #28]
 8003b2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003b30:	1bdb      	subs	r3, r3, r7
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	b008      	add	sp, #32
 8003b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b3e:	eb00 0906 	add.w	r9, r0, r6
 8003b42:	d1e5      	bne.n	8003b10 <__cvt+0x68>
 8003b44:	7803      	ldrb	r3, [r0, #0]
 8003b46:	2b30      	cmp	r3, #48	@ 0x30
 8003b48:	d10a      	bne.n	8003b60 <__cvt+0xb8>
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4620      	mov	r0, r4
 8003b50:	4629      	mov	r1, r5
 8003b52:	f7fc ff29 	bl	80009a8 <__aeabi_dcmpeq>
 8003b56:	b918      	cbnz	r0, 8003b60 <__cvt+0xb8>
 8003b58:	f1c6 0601 	rsb	r6, r6, #1
 8003b5c:	f8ca 6000 	str.w	r6, [sl]
 8003b60:	f8da 3000 	ldr.w	r3, [sl]
 8003b64:	4499      	add	r9, r3
 8003b66:	e7d3      	b.n	8003b10 <__cvt+0x68>
 8003b68:	1c59      	adds	r1, r3, #1
 8003b6a:	9107      	str	r1, [sp, #28]
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	e7d9      	b.n	8003b24 <__cvt+0x7c>

08003b70 <__exponent>:
 8003b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b72:	2900      	cmp	r1, #0
 8003b74:	bfb6      	itet	lt
 8003b76:	232d      	movlt	r3, #45	@ 0x2d
 8003b78:	232b      	movge	r3, #43	@ 0x2b
 8003b7a:	4249      	neglt	r1, r1
 8003b7c:	2909      	cmp	r1, #9
 8003b7e:	7002      	strb	r2, [r0, #0]
 8003b80:	7043      	strb	r3, [r0, #1]
 8003b82:	dd29      	ble.n	8003bd8 <__exponent+0x68>
 8003b84:	f10d 0307 	add.w	r3, sp, #7
 8003b88:	461d      	mov	r5, r3
 8003b8a:	270a      	movs	r7, #10
 8003b8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b90:	461a      	mov	r2, r3
 8003b92:	fb07 1416 	mls	r4, r7, r6, r1
 8003b96:	3430      	adds	r4, #48	@ 0x30
 8003b98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	2c63      	cmp	r4, #99	@ 0x63
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ba6:	dcf1      	bgt.n	8003b8c <__exponent+0x1c>
 8003ba8:	3130      	adds	r1, #48	@ 0x30
 8003baa:	1e94      	subs	r4, r2, #2
 8003bac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	1c41      	adds	r1, r0, #1
 8003bb4:	42ab      	cmp	r3, r5
 8003bb6:	d30a      	bcc.n	8003bce <__exponent+0x5e>
 8003bb8:	f10d 0309 	add.w	r3, sp, #9
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	42ac      	cmp	r4, r5
 8003bc0:	bf88      	it	hi
 8003bc2:	2300      	movhi	r3, #0
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	4403      	add	r3, r0
 8003bc8:	1a18      	subs	r0, r3, r0
 8003bca:	b003      	add	sp, #12
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003bd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003bd6:	e7ed      	b.n	8003bb4 <__exponent+0x44>
 8003bd8:	2330      	movs	r3, #48	@ 0x30
 8003bda:	3130      	adds	r1, #48	@ 0x30
 8003bdc:	7083      	strb	r3, [r0, #2]
 8003bde:	70c1      	strb	r1, [r0, #3]
 8003be0:	1d03      	adds	r3, r0, #4
 8003be2:	e7f1      	b.n	8003bc8 <__exponent+0x58>

08003be4 <_printf_float>:
 8003be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be8:	b091      	sub	sp, #68	@ 0x44
 8003bea:	460c      	mov	r4, r1
 8003bec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	461f      	mov	r7, r3
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	f000 feeb 	bl	80049d0 <_localeconv_r>
 8003bfa:	6803      	ldr	r3, [r0, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	9308      	str	r3, [sp, #32]
 8003c00:	f7fc faa6 	bl	8000150 <strlen>
 8003c04:	2300      	movs	r3, #0
 8003c06:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c08:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8003c0e:	3307      	adds	r3, #7
 8003c10:	f023 0307 	bic.w	r3, r3, #7
 8003c14:	f103 0208 	add.w	r2, r3, #8
 8003c18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c1c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c20:	f8c8 2000 	str.w	r2, [r8]
 8003c24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c2e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295
 8003c36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c3e:	4b9c      	ldr	r3, [pc, #624]	@ (8003eb0 <_printf_float+0x2cc>)
 8003c40:	f7fc fee4 	bl	8000a0c <__aeabi_dcmpun>
 8003c44:	bb70      	cbnz	r0, 8003ca4 <_printf_float+0xc0>
 8003c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4e:	4b98      	ldr	r3, [pc, #608]	@ (8003eb0 <_printf_float+0x2cc>)
 8003c50:	f7fc febe 	bl	80009d0 <__aeabi_dcmple>
 8003c54:	bb30      	cbnz	r0, 8003ca4 <_printf_float+0xc0>
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	f7fc fead 	bl	80009bc <__aeabi_dcmplt>
 8003c62:	b110      	cbz	r0, 8003c6a <_printf_float+0x86>
 8003c64:	232d      	movs	r3, #45	@ 0x2d
 8003c66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c6a:	4a92      	ldr	r2, [pc, #584]	@ (8003eb4 <_printf_float+0x2d0>)
 8003c6c:	4b92      	ldr	r3, [pc, #584]	@ (8003eb8 <_printf_float+0x2d4>)
 8003c6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c72:	bf8c      	ite	hi
 8003c74:	4690      	movhi	r8, r2
 8003c76:	4698      	movls	r8, r3
 8003c78:	2303      	movs	r3, #3
 8003c7a:	f04f 0900 	mov.w	r9, #0
 8003c7e:	6123      	str	r3, [r4, #16]
 8003c80:	f02b 0304 	bic.w	r3, fp, #4
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	4633      	mov	r3, r6
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	9700      	str	r7, [sp, #0]
 8003c8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003c90:	f000 f9d4 	bl	800403c <_printf_common>
 8003c94:	3001      	adds	r0, #1
 8003c96:	f040 8090 	bne.w	8003dba <_printf_float+0x1d6>
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9e:	b011      	add	sp, #68	@ 0x44
 8003ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	4640      	mov	r0, r8
 8003caa:	4649      	mov	r1, r9
 8003cac:	f7fc feae 	bl	8000a0c <__aeabi_dcmpun>
 8003cb0:	b148      	cbz	r0, 8003cc6 <_printf_float+0xe2>
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bfb8      	it	lt
 8003cb8:	232d      	movlt	r3, #45	@ 0x2d
 8003cba:	4a80      	ldr	r2, [pc, #512]	@ (8003ebc <_printf_float+0x2d8>)
 8003cbc:	bfb8      	it	lt
 8003cbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec0 <_printf_float+0x2dc>)
 8003cc4:	e7d3      	b.n	8003c6e <_printf_float+0x8a>
 8003cc6:	6863      	ldr	r3, [r4, #4]
 8003cc8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	d13f      	bne.n	8003d50 <_printf_float+0x16c>
 8003cd0:	2306      	movs	r3, #6
 8003cd2:	6063      	str	r3, [r4, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003cda:	6023      	str	r3, [r4, #0]
 8003cdc:	9206      	str	r2, [sp, #24]
 8003cde:	aa0e      	add	r2, sp, #56	@ 0x38
 8003ce0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003ce4:	aa0d      	add	r2, sp, #52	@ 0x34
 8003ce6:	9203      	str	r2, [sp, #12]
 8003ce8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003cec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	464b      	mov	r3, r9
 8003cfa:	910a      	str	r1, [sp, #40]	@ 0x28
 8003cfc:	f7ff fed4 	bl	8003aa8 <__cvt>
 8003d00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d02:	4680      	mov	r8, r0
 8003d04:	2947      	cmp	r1, #71	@ 0x47
 8003d06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d08:	d128      	bne.n	8003d5c <_printf_float+0x178>
 8003d0a:	1cc8      	adds	r0, r1, #3
 8003d0c:	db02      	blt.n	8003d14 <_printf_float+0x130>
 8003d0e:	6863      	ldr	r3, [r4, #4]
 8003d10:	4299      	cmp	r1, r3
 8003d12:	dd40      	ble.n	8003d96 <_printf_float+0x1b2>
 8003d14:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d18:	fa5f fa8a 	uxtb.w	sl, sl
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	3901      	subs	r1, #1
 8003d20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003d24:	910d      	str	r1, [sp, #52]	@ 0x34
 8003d26:	f7ff ff23 	bl	8003b70 <__exponent>
 8003d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d2c:	4681      	mov	r9, r0
 8003d2e:	1813      	adds	r3, r2, r0
 8003d30:	2a01      	cmp	r2, #1
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	dc02      	bgt.n	8003d3c <_printf_float+0x158>
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	07d2      	lsls	r2, r2, #31
 8003d3a:	d501      	bpl.n	8003d40 <_printf_float+0x15c>
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d09e      	beq.n	8003c86 <_printf_float+0xa2>
 8003d48:	232d      	movs	r3, #45	@ 0x2d
 8003d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d4e:	e79a      	b.n	8003c86 <_printf_float+0xa2>
 8003d50:	2947      	cmp	r1, #71	@ 0x47
 8003d52:	d1bf      	bne.n	8003cd4 <_printf_float+0xf0>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1bd      	bne.n	8003cd4 <_printf_float+0xf0>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e7ba      	b.n	8003cd2 <_printf_float+0xee>
 8003d5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d60:	d9dc      	bls.n	8003d1c <_printf_float+0x138>
 8003d62:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d66:	d118      	bne.n	8003d9a <_printf_float+0x1b6>
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	dd0b      	ble.n	8003d86 <_printf_float+0x1a2>
 8003d6e:	6121      	str	r1, [r4, #16]
 8003d70:	b913      	cbnz	r3, 8003d78 <_printf_float+0x194>
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	07d0      	lsls	r0, r2, #31
 8003d76:	d502      	bpl.n	8003d7e <_printf_float+0x19a>
 8003d78:	3301      	adds	r3, #1
 8003d7a:	440b      	add	r3, r1
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	f04f 0900 	mov.w	r9, #0
 8003d82:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d84:	e7dc      	b.n	8003d40 <_printf_float+0x15c>
 8003d86:	b913      	cbnz	r3, 8003d8e <_printf_float+0x1aa>
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	07d2      	lsls	r2, r2, #31
 8003d8c:	d501      	bpl.n	8003d92 <_printf_float+0x1ae>
 8003d8e:	3302      	adds	r3, #2
 8003d90:	e7f4      	b.n	8003d7c <_printf_float+0x198>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e7f2      	b.n	8003d7c <_printf_float+0x198>
 8003d96:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	db05      	blt.n	8003dac <_printf_float+0x1c8>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	6121      	str	r1, [r4, #16]
 8003da4:	07d8      	lsls	r0, r3, #31
 8003da6:	d5ea      	bpl.n	8003d7e <_printf_float+0x19a>
 8003da8:	1c4b      	adds	r3, r1, #1
 8003daa:	e7e7      	b.n	8003d7c <_printf_float+0x198>
 8003dac:	2900      	cmp	r1, #0
 8003dae:	bfcc      	ite	gt
 8003db0:	2201      	movgt	r2, #1
 8003db2:	f1c1 0202 	rsble	r2, r1, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	e7e0      	b.n	8003d7c <_printf_float+0x198>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	055a      	lsls	r2, r3, #21
 8003dbe:	d407      	bmi.n	8003dd0 <_printf_float+0x1ec>
 8003dc0:	6923      	ldr	r3, [r4, #16]
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	47b8      	blx	r7
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d12b      	bne.n	8003e26 <_printf_float+0x242>
 8003dce:	e764      	b.n	8003c9a <_printf_float+0xb6>
 8003dd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003dd4:	f240 80dc 	bls.w	8003f90 <_printf_float+0x3ac>
 8003dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2300      	movs	r3, #0
 8003de0:	f7fc fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d033      	beq.n	8003e50 <_printf_float+0x26c>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	4a35      	ldr	r2, [pc, #212]	@ (8003ec4 <_printf_float+0x2e0>)
 8003df0:	47b8      	blx	r7
 8003df2:	3001      	adds	r0, #1
 8003df4:	f43f af51 	beq.w	8003c9a <_printf_float+0xb6>
 8003df8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003dfc:	4543      	cmp	r3, r8
 8003dfe:	db02      	blt.n	8003e06 <_printf_float+0x222>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	07d8      	lsls	r0, r3, #31
 8003e04:	d50f      	bpl.n	8003e26 <_printf_float+0x242>
 8003e06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	f43f af42 	beq.w	8003c9a <_printf_float+0xb6>
 8003e16:	f04f 0900 	mov.w	r9, #0
 8003e1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e1e:	f104 0a1a 	add.w	sl, r4, #26
 8003e22:	45c8      	cmp	r8, r9
 8003e24:	dc09      	bgt.n	8003e3a <_printf_float+0x256>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	079b      	lsls	r3, r3, #30
 8003e2a:	f100 8102 	bmi.w	8004032 <_printf_float+0x44e>
 8003e2e:	68e0      	ldr	r0, [r4, #12]
 8003e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e32:	4298      	cmp	r0, r3
 8003e34:	bfb8      	it	lt
 8003e36:	4618      	movlt	r0, r3
 8003e38:	e731      	b.n	8003c9e <_printf_float+0xba>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	4652      	mov	r2, sl
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4628      	mov	r0, r5
 8003e42:	47b8      	blx	r7
 8003e44:	3001      	adds	r0, #1
 8003e46:	f43f af28 	beq.w	8003c9a <_printf_float+0xb6>
 8003e4a:	f109 0901 	add.w	r9, r9, #1
 8003e4e:	e7e8      	b.n	8003e22 <_printf_float+0x23e>
 8003e50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	dc38      	bgt.n	8003ec8 <_printf_float+0x2e4>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	4a19      	ldr	r2, [pc, #100]	@ (8003ec4 <_printf_float+0x2e0>)
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f af1a 	beq.w	8003c9a <_printf_float+0xb6>
 8003e66:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003e6a:	ea59 0303 	orrs.w	r3, r9, r3
 8003e6e:	d102      	bne.n	8003e76 <_printf_float+0x292>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	07d9      	lsls	r1, r3, #31
 8003e74:	d5d7      	bpl.n	8003e26 <_printf_float+0x242>
 8003e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	f43f af0a 	beq.w	8003c9a <_printf_float+0xb6>
 8003e86:	f04f 0a00 	mov.w	sl, #0
 8003e8a:	f104 0b1a 	add.w	fp, r4, #26
 8003e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e90:	425b      	negs	r3, r3
 8003e92:	4553      	cmp	r3, sl
 8003e94:	dc01      	bgt.n	8003e9a <_printf_float+0x2b6>
 8003e96:	464b      	mov	r3, r9
 8003e98:	e793      	b.n	8003dc2 <_printf_float+0x1de>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	465a      	mov	r2, fp
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	47b8      	blx	r7
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	f43f aef8 	beq.w	8003c9a <_printf_float+0xb6>
 8003eaa:	f10a 0a01 	add.w	sl, sl, #1
 8003eae:	e7ee      	b.n	8003e8e <_printf_float+0x2aa>
 8003eb0:	7fefffff 	.word	0x7fefffff
 8003eb4:	080082f1 	.word	0x080082f1
 8003eb8:	080082ed 	.word	0x080082ed
 8003ebc:	080082f9 	.word	0x080082f9
 8003ec0:	080082f5 	.word	0x080082f5
 8003ec4:	080082fd 	.word	0x080082fd
 8003ec8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003eca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003ece:	4553      	cmp	r3, sl
 8003ed0:	bfa8      	it	ge
 8003ed2:	4653      	movge	r3, sl
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	4699      	mov	r9, r3
 8003ed8:	dc36      	bgt.n	8003f48 <_printf_float+0x364>
 8003eda:	f04f 0b00 	mov.w	fp, #0
 8003ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ee2:	f104 021a 	add.w	r2, r4, #26
 8003ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eea:	eba3 0309 	sub.w	r3, r3, r9
 8003eee:	455b      	cmp	r3, fp
 8003ef0:	dc31      	bgt.n	8003f56 <_printf_float+0x372>
 8003ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ef4:	459a      	cmp	sl, r3
 8003ef6:	dc3a      	bgt.n	8003f6e <_printf_float+0x38a>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	07da      	lsls	r2, r3, #31
 8003efc:	d437      	bmi.n	8003f6e <_printf_float+0x38a>
 8003efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f00:	ebaa 0903 	sub.w	r9, sl, r3
 8003f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f06:	ebaa 0303 	sub.w	r3, sl, r3
 8003f0a:	4599      	cmp	r9, r3
 8003f0c:	bfa8      	it	ge
 8003f0e:	4699      	movge	r9, r3
 8003f10:	f1b9 0f00 	cmp.w	r9, #0
 8003f14:	dc33      	bgt.n	8003f7e <_printf_float+0x39a>
 8003f16:	f04f 0800 	mov.w	r8, #0
 8003f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f1e:	f104 0b1a 	add.w	fp, r4, #26
 8003f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f24:	ebaa 0303 	sub.w	r3, sl, r3
 8003f28:	eba3 0309 	sub.w	r3, r3, r9
 8003f2c:	4543      	cmp	r3, r8
 8003f2e:	f77f af7a 	ble.w	8003e26 <_printf_float+0x242>
 8003f32:	2301      	movs	r3, #1
 8003f34:	465a      	mov	r2, fp
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f aeac 	beq.w	8003c9a <_printf_float+0xb6>
 8003f42:	f108 0801 	add.w	r8, r8, #1
 8003f46:	e7ec      	b.n	8003f22 <_printf_float+0x33e>
 8003f48:	4642      	mov	r2, r8
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	47b8      	blx	r7
 8003f50:	3001      	adds	r0, #1
 8003f52:	d1c2      	bne.n	8003eda <_printf_float+0x2f6>
 8003f54:	e6a1      	b.n	8003c9a <_printf_float+0xb6>
 8003f56:	2301      	movs	r3, #1
 8003f58:	4631      	mov	r1, r6
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	f43f ae9a 	beq.w	8003c9a <_printf_float+0xb6>
 8003f66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f68:	f10b 0b01 	add.w	fp, fp, #1
 8003f6c:	e7bb      	b.n	8003ee6 <_printf_float+0x302>
 8003f6e:	4631      	mov	r1, r6
 8003f70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b8      	blx	r7
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d1c0      	bne.n	8003efe <_printf_float+0x31a>
 8003f7c:	e68d      	b.n	8003c9a <_printf_float+0xb6>
 8003f7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f80:	464b      	mov	r3, r9
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	4442      	add	r2, r8
 8003f88:	47b8      	blx	r7
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d1c3      	bne.n	8003f16 <_printf_float+0x332>
 8003f8e:	e684      	b.n	8003c9a <_printf_float+0xb6>
 8003f90:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f94:	f1ba 0f01 	cmp.w	sl, #1
 8003f98:	dc01      	bgt.n	8003f9e <_printf_float+0x3ba>
 8003f9a:	07db      	lsls	r3, r3, #31
 8003f9c:	d536      	bpl.n	800400c <_printf_float+0x428>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b8      	blx	r7
 8003fa8:	3001      	adds	r0, #1
 8003faa:	f43f ae76 	beq.w	8003c9a <_printf_float+0xb6>
 8003fae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b8      	blx	r7
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f43f ae6e 	beq.w	8003c9a <_printf_float+0xb6>
 8003fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003fca:	f7fc fced 	bl	80009a8 <__aeabi_dcmpeq>
 8003fce:	b9c0      	cbnz	r0, 8004002 <_printf_float+0x41e>
 8003fd0:	4653      	mov	r3, sl
 8003fd2:	f108 0201 	add.w	r2, r8, #1
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d10c      	bne.n	8003ffa <_printf_float+0x416>
 8003fe0:	e65b      	b.n	8003c9a <_printf_float+0xb6>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	465a      	mov	r2, fp
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b8      	blx	r7
 8003fec:	3001      	adds	r0, #1
 8003fee:	f43f ae54 	beq.w	8003c9a <_printf_float+0xb6>
 8003ff2:	f108 0801 	add.w	r8, r8, #1
 8003ff6:	45d0      	cmp	r8, sl
 8003ff8:	dbf3      	blt.n	8003fe2 <_printf_float+0x3fe>
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004000:	e6e0      	b.n	8003dc4 <_printf_float+0x1e0>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	f104 0b1a 	add.w	fp, r4, #26
 800400a:	e7f4      	b.n	8003ff6 <_printf_float+0x412>
 800400c:	2301      	movs	r3, #1
 800400e:	4642      	mov	r2, r8
 8004010:	e7e1      	b.n	8003fd6 <_printf_float+0x3f2>
 8004012:	2301      	movs	r3, #1
 8004014:	464a      	mov	r2, r9
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f ae3c 	beq.w	8003c9a <_printf_float+0xb6>
 8004022:	f108 0801 	add.w	r8, r8, #1
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800402a:	1a5b      	subs	r3, r3, r1
 800402c:	4543      	cmp	r3, r8
 800402e:	dcf0      	bgt.n	8004012 <_printf_float+0x42e>
 8004030:	e6fd      	b.n	8003e2e <_printf_float+0x24a>
 8004032:	f04f 0800 	mov.w	r8, #0
 8004036:	f104 0919 	add.w	r9, r4, #25
 800403a:	e7f4      	b.n	8004026 <_printf_float+0x442>

0800403c <_printf_common>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	4616      	mov	r6, r2
 8004042:	4698      	mov	r8, r3
 8004044:	688a      	ldr	r2, [r1, #8]
 8004046:	690b      	ldr	r3, [r1, #16]
 8004048:	4607      	mov	r7, r0
 800404a:	4293      	cmp	r3, r2
 800404c:	bfb8      	it	lt
 800404e:	4613      	movlt	r3, r2
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004056:	460c      	mov	r4, r1
 8004058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800405c:	b10a      	cbz	r2, 8004062 <_printf_common+0x26>
 800405e:	3301      	adds	r3, #1
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	0699      	lsls	r1, r3, #26
 8004066:	bf42      	ittt	mi
 8004068:	6833      	ldrmi	r3, [r6, #0]
 800406a:	3302      	addmi	r3, #2
 800406c:	6033      	strmi	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	f015 0506 	ands.w	r5, r5, #6
 8004074:	d106      	bne.n	8004084 <_printf_common+0x48>
 8004076:	f104 0a19 	add.w	sl, r4, #25
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	6832      	ldr	r2, [r6, #0]
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	42ab      	cmp	r3, r5
 8004082:	dc2b      	bgt.n	80040dc <_printf_common+0xa0>
 8004084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	3b00      	subs	r3, #0
 800408c:	bf18      	it	ne
 800408e:	2301      	movne	r3, #1
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d430      	bmi.n	80040f6 <_printf_common+0xba>
 8004094:	4641      	mov	r1, r8
 8004096:	4638      	mov	r0, r7
 8004098:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800409c:	47c8      	blx	r9
 800409e:	3001      	adds	r0, #1
 80040a0:	d023      	beq.n	80040ea <_printf_common+0xae>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	6922      	ldr	r2, [r4, #16]
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf14      	ite	ne
 80040ae:	2500      	movne	r5, #0
 80040b0:	6833      	ldreq	r3, [r6, #0]
 80040b2:	f04f 0600 	mov.w	r6, #0
 80040b6:	bf08      	it	eq
 80040b8:	68e5      	ldreq	r5, [r4, #12]
 80040ba:	f104 041a 	add.w	r4, r4, #26
 80040be:	bf08      	it	eq
 80040c0:	1aed      	subeq	r5, r5, r3
 80040c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040c6:	bf08      	it	eq
 80040c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bfc4      	itt	gt
 80040d0:	1a9b      	subgt	r3, r3, r2
 80040d2:	18ed      	addgt	r5, r5, r3
 80040d4:	42b5      	cmp	r5, r6
 80040d6:	d11a      	bne.n	800410e <_printf_common+0xd2>
 80040d8:	2000      	movs	r0, #0
 80040da:	e008      	b.n	80040ee <_printf_common+0xb2>
 80040dc:	2301      	movs	r3, #1
 80040de:	4652      	mov	r2, sl
 80040e0:	4641      	mov	r1, r8
 80040e2:	4638      	mov	r0, r7
 80040e4:	47c8      	blx	r9
 80040e6:	3001      	adds	r0, #1
 80040e8:	d103      	bne.n	80040f2 <_printf_common+0xb6>
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295
 80040ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f2:	3501      	adds	r5, #1
 80040f4:	e7c1      	b.n	800407a <_printf_common+0x3e>
 80040f6:	2030      	movs	r0, #48	@ 0x30
 80040f8:	18e1      	adds	r1, r4, r3
 80040fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004104:	4422      	add	r2, r4
 8004106:	3302      	adds	r3, #2
 8004108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800410c:	e7c2      	b.n	8004094 <_printf_common+0x58>
 800410e:	2301      	movs	r3, #1
 8004110:	4622      	mov	r2, r4
 8004112:	4641      	mov	r1, r8
 8004114:	4638      	mov	r0, r7
 8004116:	47c8      	blx	r9
 8004118:	3001      	adds	r0, #1
 800411a:	d0e6      	beq.n	80040ea <_printf_common+0xae>
 800411c:	3601      	adds	r6, #1
 800411e:	e7d9      	b.n	80040d4 <_printf_common+0x98>

08004120 <_printf_i>:
 8004120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	7e0f      	ldrb	r7, [r1, #24]
 8004126:	4691      	mov	r9, r2
 8004128:	2f78      	cmp	r7, #120	@ 0x78
 800412a:	4680      	mov	r8, r0
 800412c:	460c      	mov	r4, r1
 800412e:	469a      	mov	sl, r3
 8004130:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004136:	d807      	bhi.n	8004148 <_printf_i+0x28>
 8004138:	2f62      	cmp	r7, #98	@ 0x62
 800413a:	d80a      	bhi.n	8004152 <_printf_i+0x32>
 800413c:	2f00      	cmp	r7, #0
 800413e:	f000 80d1 	beq.w	80042e4 <_printf_i+0x1c4>
 8004142:	2f58      	cmp	r7, #88	@ 0x58
 8004144:	f000 80b8 	beq.w	80042b8 <_printf_i+0x198>
 8004148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800414c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004150:	e03a      	b.n	80041c8 <_printf_i+0xa8>
 8004152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004156:	2b15      	cmp	r3, #21
 8004158:	d8f6      	bhi.n	8004148 <_printf_i+0x28>
 800415a:	a101      	add	r1, pc, #4	@ (adr r1, 8004160 <_printf_i+0x40>)
 800415c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004160:	080041b9 	.word	0x080041b9
 8004164:	080041cd 	.word	0x080041cd
 8004168:	08004149 	.word	0x08004149
 800416c:	08004149 	.word	0x08004149
 8004170:	08004149 	.word	0x08004149
 8004174:	08004149 	.word	0x08004149
 8004178:	080041cd 	.word	0x080041cd
 800417c:	08004149 	.word	0x08004149
 8004180:	08004149 	.word	0x08004149
 8004184:	08004149 	.word	0x08004149
 8004188:	08004149 	.word	0x08004149
 800418c:	080042cb 	.word	0x080042cb
 8004190:	080041f7 	.word	0x080041f7
 8004194:	08004285 	.word	0x08004285
 8004198:	08004149 	.word	0x08004149
 800419c:	08004149 	.word	0x08004149
 80041a0:	080042ed 	.word	0x080042ed
 80041a4:	08004149 	.word	0x08004149
 80041a8:	080041f7 	.word	0x080041f7
 80041ac:	08004149 	.word	0x08004149
 80041b0:	08004149 	.word	0x08004149
 80041b4:	0800428d 	.word	0x0800428d
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	1d1a      	adds	r2, r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6032      	str	r2, [r6, #0]
 80041c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041c8:	2301      	movs	r3, #1
 80041ca:	e09c      	b.n	8004306 <_printf_i+0x1e6>
 80041cc:	6833      	ldr	r3, [r6, #0]
 80041ce:	6820      	ldr	r0, [r4, #0]
 80041d0:	1d19      	adds	r1, r3, #4
 80041d2:	6031      	str	r1, [r6, #0]
 80041d4:	0606      	lsls	r6, r0, #24
 80041d6:	d501      	bpl.n	80041dc <_printf_i+0xbc>
 80041d8:	681d      	ldr	r5, [r3, #0]
 80041da:	e003      	b.n	80041e4 <_printf_i+0xc4>
 80041dc:	0645      	lsls	r5, r0, #25
 80041de:	d5fb      	bpl.n	80041d8 <_printf_i+0xb8>
 80041e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041e4:	2d00      	cmp	r5, #0
 80041e6:	da03      	bge.n	80041f0 <_printf_i+0xd0>
 80041e8:	232d      	movs	r3, #45	@ 0x2d
 80041ea:	426d      	negs	r5, r5
 80041ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041f0:	230a      	movs	r3, #10
 80041f2:	4858      	ldr	r0, [pc, #352]	@ (8004354 <_printf_i+0x234>)
 80041f4:	e011      	b.n	800421a <_printf_i+0xfa>
 80041f6:	6821      	ldr	r1, [r4, #0]
 80041f8:	6833      	ldr	r3, [r6, #0]
 80041fa:	0608      	lsls	r0, r1, #24
 80041fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004200:	d402      	bmi.n	8004208 <_printf_i+0xe8>
 8004202:	0649      	lsls	r1, r1, #25
 8004204:	bf48      	it	mi
 8004206:	b2ad      	uxthmi	r5, r5
 8004208:	2f6f      	cmp	r7, #111	@ 0x6f
 800420a:	6033      	str	r3, [r6, #0]
 800420c:	bf14      	ite	ne
 800420e:	230a      	movne	r3, #10
 8004210:	2308      	moveq	r3, #8
 8004212:	4850      	ldr	r0, [pc, #320]	@ (8004354 <_printf_i+0x234>)
 8004214:	2100      	movs	r1, #0
 8004216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800421a:	6866      	ldr	r6, [r4, #4]
 800421c:	2e00      	cmp	r6, #0
 800421e:	60a6      	str	r6, [r4, #8]
 8004220:	db05      	blt.n	800422e <_printf_i+0x10e>
 8004222:	6821      	ldr	r1, [r4, #0]
 8004224:	432e      	orrs	r6, r5
 8004226:	f021 0104 	bic.w	r1, r1, #4
 800422a:	6021      	str	r1, [r4, #0]
 800422c:	d04b      	beq.n	80042c6 <_printf_i+0x1a6>
 800422e:	4616      	mov	r6, r2
 8004230:	fbb5 f1f3 	udiv	r1, r5, r3
 8004234:	fb03 5711 	mls	r7, r3, r1, r5
 8004238:	5dc7      	ldrb	r7, [r0, r7]
 800423a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800423e:	462f      	mov	r7, r5
 8004240:	42bb      	cmp	r3, r7
 8004242:	460d      	mov	r5, r1
 8004244:	d9f4      	bls.n	8004230 <_printf_i+0x110>
 8004246:	2b08      	cmp	r3, #8
 8004248:	d10b      	bne.n	8004262 <_printf_i+0x142>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	07df      	lsls	r7, r3, #31
 800424e:	d508      	bpl.n	8004262 <_printf_i+0x142>
 8004250:	6923      	ldr	r3, [r4, #16]
 8004252:	6861      	ldr	r1, [r4, #4]
 8004254:	4299      	cmp	r1, r3
 8004256:	bfde      	ittt	le
 8004258:	2330      	movle	r3, #48	@ 0x30
 800425a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800425e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004262:	1b92      	subs	r2, r2, r6
 8004264:	6122      	str	r2, [r4, #16]
 8004266:	464b      	mov	r3, r9
 8004268:	4621      	mov	r1, r4
 800426a:	4640      	mov	r0, r8
 800426c:	f8cd a000 	str.w	sl, [sp]
 8004270:	aa03      	add	r2, sp, #12
 8004272:	f7ff fee3 	bl	800403c <_printf_common>
 8004276:	3001      	adds	r0, #1
 8004278:	d14a      	bne.n	8004310 <_printf_i+0x1f0>
 800427a:	f04f 30ff 	mov.w	r0, #4294967295
 800427e:	b004      	add	sp, #16
 8004280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	f043 0320 	orr.w	r3, r3, #32
 800428a:	6023      	str	r3, [r4, #0]
 800428c:	2778      	movs	r7, #120	@ 0x78
 800428e:	4832      	ldr	r0, [pc, #200]	@ (8004358 <_printf_i+0x238>)
 8004290:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	6831      	ldr	r1, [r6, #0]
 8004298:	061f      	lsls	r7, r3, #24
 800429a:	f851 5b04 	ldr.w	r5, [r1], #4
 800429e:	d402      	bmi.n	80042a6 <_printf_i+0x186>
 80042a0:	065f      	lsls	r7, r3, #25
 80042a2:	bf48      	it	mi
 80042a4:	b2ad      	uxthmi	r5, r5
 80042a6:	6031      	str	r1, [r6, #0]
 80042a8:	07d9      	lsls	r1, r3, #31
 80042aa:	bf44      	itt	mi
 80042ac:	f043 0320 	orrmi.w	r3, r3, #32
 80042b0:	6023      	strmi	r3, [r4, #0]
 80042b2:	b11d      	cbz	r5, 80042bc <_printf_i+0x19c>
 80042b4:	2310      	movs	r3, #16
 80042b6:	e7ad      	b.n	8004214 <_printf_i+0xf4>
 80042b8:	4826      	ldr	r0, [pc, #152]	@ (8004354 <_printf_i+0x234>)
 80042ba:	e7e9      	b.n	8004290 <_printf_i+0x170>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	f023 0320 	bic.w	r3, r3, #32
 80042c2:	6023      	str	r3, [r4, #0]
 80042c4:	e7f6      	b.n	80042b4 <_printf_i+0x194>
 80042c6:	4616      	mov	r6, r2
 80042c8:	e7bd      	b.n	8004246 <_printf_i+0x126>
 80042ca:	6833      	ldr	r3, [r6, #0]
 80042cc:	6825      	ldr	r5, [r4, #0]
 80042ce:	1d18      	adds	r0, r3, #4
 80042d0:	6961      	ldr	r1, [r4, #20]
 80042d2:	6030      	str	r0, [r6, #0]
 80042d4:	062e      	lsls	r6, r5, #24
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	d501      	bpl.n	80042de <_printf_i+0x1be>
 80042da:	6019      	str	r1, [r3, #0]
 80042dc:	e002      	b.n	80042e4 <_printf_i+0x1c4>
 80042de:	0668      	lsls	r0, r5, #25
 80042e0:	d5fb      	bpl.n	80042da <_printf_i+0x1ba>
 80042e2:	8019      	strh	r1, [r3, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	4616      	mov	r6, r2
 80042e8:	6123      	str	r3, [r4, #16]
 80042ea:	e7bc      	b.n	8004266 <_printf_i+0x146>
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	2100      	movs	r1, #0
 80042f0:	1d1a      	adds	r2, r3, #4
 80042f2:	6032      	str	r2, [r6, #0]
 80042f4:	681e      	ldr	r6, [r3, #0]
 80042f6:	6862      	ldr	r2, [r4, #4]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 fbe0 	bl	8004abe <memchr>
 80042fe:	b108      	cbz	r0, 8004304 <_printf_i+0x1e4>
 8004300:	1b80      	subs	r0, r0, r6
 8004302:	6060      	str	r0, [r4, #4]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	2300      	movs	r3, #0
 800430a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800430e:	e7aa      	b.n	8004266 <_printf_i+0x146>
 8004310:	4632      	mov	r2, r6
 8004312:	4649      	mov	r1, r9
 8004314:	4640      	mov	r0, r8
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	47d0      	blx	sl
 800431a:	3001      	adds	r0, #1
 800431c:	d0ad      	beq.n	800427a <_printf_i+0x15a>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	079b      	lsls	r3, r3, #30
 8004322:	d413      	bmi.n	800434c <_printf_i+0x22c>
 8004324:	68e0      	ldr	r0, [r4, #12]
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	4298      	cmp	r0, r3
 800432a:	bfb8      	it	lt
 800432c:	4618      	movlt	r0, r3
 800432e:	e7a6      	b.n	800427e <_printf_i+0x15e>
 8004330:	2301      	movs	r3, #1
 8004332:	4632      	mov	r2, r6
 8004334:	4649      	mov	r1, r9
 8004336:	4640      	mov	r0, r8
 8004338:	47d0      	blx	sl
 800433a:	3001      	adds	r0, #1
 800433c:	d09d      	beq.n	800427a <_printf_i+0x15a>
 800433e:	3501      	adds	r5, #1
 8004340:	68e3      	ldr	r3, [r4, #12]
 8004342:	9903      	ldr	r1, [sp, #12]
 8004344:	1a5b      	subs	r3, r3, r1
 8004346:	42ab      	cmp	r3, r5
 8004348:	dcf2      	bgt.n	8004330 <_printf_i+0x210>
 800434a:	e7eb      	b.n	8004324 <_printf_i+0x204>
 800434c:	2500      	movs	r5, #0
 800434e:	f104 0619 	add.w	r6, r4, #25
 8004352:	e7f5      	b.n	8004340 <_printf_i+0x220>
 8004354:	080082ff 	.word	0x080082ff
 8004358:	08008310 	.word	0x08008310

0800435c <_scanf_float>:
 800435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004360:	b087      	sub	sp, #28
 8004362:	9303      	str	r3, [sp, #12]
 8004364:	688b      	ldr	r3, [r1, #8]
 8004366:	4691      	mov	r9, r2
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800436e:	bf82      	ittt	hi
 8004370:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004374:	eb03 0b05 	addhi.w	fp, r3, r5
 8004378:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800437c:	460a      	mov	r2, r1
 800437e:	f04f 0500 	mov.w	r5, #0
 8004382:	bf88      	it	hi
 8004384:	608b      	strhi	r3, [r1, #8]
 8004386:	680b      	ldr	r3, [r1, #0]
 8004388:	4680      	mov	r8, r0
 800438a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800438e:	f842 3b1c 	str.w	r3, [r2], #28
 8004392:	460c      	mov	r4, r1
 8004394:	bf98      	it	ls
 8004396:	f04f 0b00 	movls.w	fp, #0
 800439a:	4616      	mov	r6, r2
 800439c:	46aa      	mov	sl, r5
 800439e:	462f      	mov	r7, r5
 80043a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043a4:	9201      	str	r2, [sp, #4]
 80043a6:	9502      	str	r5, [sp, #8]
 80043a8:	68a2      	ldr	r2, [r4, #8]
 80043aa:	b15a      	cbz	r2, 80043c4 <_scanf_float+0x68>
 80043ac:	f8d9 3000 	ldr.w	r3, [r9]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80043b4:	d862      	bhi.n	800447c <_scanf_float+0x120>
 80043b6:	2b40      	cmp	r3, #64	@ 0x40
 80043b8:	d83a      	bhi.n	8004430 <_scanf_float+0xd4>
 80043ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80043be:	b2c8      	uxtb	r0, r1
 80043c0:	280e      	cmp	r0, #14
 80043c2:	d938      	bls.n	8004436 <_scanf_float+0xda>
 80043c4:	b11f      	cbz	r7, 80043ce <_scanf_float+0x72>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043d2:	f1ba 0f01 	cmp.w	sl, #1
 80043d6:	f200 8114 	bhi.w	8004602 <_scanf_float+0x2a6>
 80043da:	9b01      	ldr	r3, [sp, #4]
 80043dc:	429e      	cmp	r6, r3
 80043de:	f200 8105 	bhi.w	80045ec <_scanf_float+0x290>
 80043e2:	2001      	movs	r0, #1
 80043e4:	b007      	add	sp, #28
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80043ee:	2a0d      	cmp	r2, #13
 80043f0:	d8e8      	bhi.n	80043c4 <_scanf_float+0x68>
 80043f2:	a101      	add	r1, pc, #4	@ (adr r1, 80043f8 <_scanf_float+0x9c>)
 80043f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80043f8:	08004541 	.word	0x08004541
 80043fc:	080043c5 	.word	0x080043c5
 8004400:	080043c5 	.word	0x080043c5
 8004404:	080043c5 	.word	0x080043c5
 8004408:	0800459d 	.word	0x0800459d
 800440c:	08004577 	.word	0x08004577
 8004410:	080043c5 	.word	0x080043c5
 8004414:	080043c5 	.word	0x080043c5
 8004418:	0800454f 	.word	0x0800454f
 800441c:	080043c5 	.word	0x080043c5
 8004420:	080043c5 	.word	0x080043c5
 8004424:	080043c5 	.word	0x080043c5
 8004428:	080043c5 	.word	0x080043c5
 800442c:	0800450b 	.word	0x0800450b
 8004430:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004434:	e7db      	b.n	80043ee <_scanf_float+0x92>
 8004436:	290e      	cmp	r1, #14
 8004438:	d8c4      	bhi.n	80043c4 <_scanf_float+0x68>
 800443a:	a001      	add	r0, pc, #4	@ (adr r0, 8004440 <_scanf_float+0xe4>)
 800443c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004440:	080044fb 	.word	0x080044fb
 8004444:	080043c5 	.word	0x080043c5
 8004448:	080044fb 	.word	0x080044fb
 800444c:	0800458b 	.word	0x0800458b
 8004450:	080043c5 	.word	0x080043c5
 8004454:	0800449d 	.word	0x0800449d
 8004458:	080044e1 	.word	0x080044e1
 800445c:	080044e1 	.word	0x080044e1
 8004460:	080044e1 	.word	0x080044e1
 8004464:	080044e1 	.word	0x080044e1
 8004468:	080044e1 	.word	0x080044e1
 800446c:	080044e1 	.word	0x080044e1
 8004470:	080044e1 	.word	0x080044e1
 8004474:	080044e1 	.word	0x080044e1
 8004478:	080044e1 	.word	0x080044e1
 800447c:	2b6e      	cmp	r3, #110	@ 0x6e
 800447e:	d809      	bhi.n	8004494 <_scanf_float+0x138>
 8004480:	2b60      	cmp	r3, #96	@ 0x60
 8004482:	d8b2      	bhi.n	80043ea <_scanf_float+0x8e>
 8004484:	2b54      	cmp	r3, #84	@ 0x54
 8004486:	d07b      	beq.n	8004580 <_scanf_float+0x224>
 8004488:	2b59      	cmp	r3, #89	@ 0x59
 800448a:	d19b      	bne.n	80043c4 <_scanf_float+0x68>
 800448c:	2d07      	cmp	r5, #7
 800448e:	d199      	bne.n	80043c4 <_scanf_float+0x68>
 8004490:	2508      	movs	r5, #8
 8004492:	e02f      	b.n	80044f4 <_scanf_float+0x198>
 8004494:	2b74      	cmp	r3, #116	@ 0x74
 8004496:	d073      	beq.n	8004580 <_scanf_float+0x224>
 8004498:	2b79      	cmp	r3, #121	@ 0x79
 800449a:	e7f6      	b.n	800448a <_scanf_float+0x12e>
 800449c:	6821      	ldr	r1, [r4, #0]
 800449e:	05c8      	lsls	r0, r1, #23
 80044a0:	d51e      	bpl.n	80044e0 <_scanf_float+0x184>
 80044a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80044a6:	6021      	str	r1, [r4, #0]
 80044a8:	3701      	adds	r7, #1
 80044aa:	f1bb 0f00 	cmp.w	fp, #0
 80044ae:	d003      	beq.n	80044b8 <_scanf_float+0x15c>
 80044b0:	3201      	adds	r2, #1
 80044b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044b6:	60a2      	str	r2, [r4, #8]
 80044b8:	68a3      	ldr	r3, [r4, #8]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	60a3      	str	r3, [r4, #8]
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	3301      	adds	r3, #1
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f8c9 3004 	str.w	r3, [r9, #4]
 80044d0:	f340 8083 	ble.w	80045da <_scanf_float+0x27e>
 80044d4:	f8d9 3000 	ldr.w	r3, [r9]
 80044d8:	3301      	adds	r3, #1
 80044da:	f8c9 3000 	str.w	r3, [r9]
 80044de:	e763      	b.n	80043a8 <_scanf_float+0x4c>
 80044e0:	eb1a 0105 	adds.w	r1, sl, r5
 80044e4:	f47f af6e 	bne.w	80043c4 <_scanf_float+0x68>
 80044e8:	460d      	mov	r5, r1
 80044ea:	468a      	mov	sl, r1
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80044f2:	6022      	str	r2, [r4, #0]
 80044f4:	f806 3b01 	strb.w	r3, [r6], #1
 80044f8:	e7de      	b.n	80044b8 <_scanf_float+0x15c>
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	0610      	lsls	r0, r2, #24
 80044fe:	f57f af61 	bpl.w	80043c4 <_scanf_float+0x68>
 8004502:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004506:	6022      	str	r2, [r4, #0]
 8004508:	e7f4      	b.n	80044f4 <_scanf_float+0x198>
 800450a:	f1ba 0f00 	cmp.w	sl, #0
 800450e:	d10c      	bne.n	800452a <_scanf_float+0x1ce>
 8004510:	b977      	cbnz	r7, 8004530 <_scanf_float+0x1d4>
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004518:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800451c:	d108      	bne.n	8004530 <_scanf_float+0x1d4>
 800451e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004522:	f04f 0a01 	mov.w	sl, #1
 8004526:	6022      	str	r2, [r4, #0]
 8004528:	e7e4      	b.n	80044f4 <_scanf_float+0x198>
 800452a:	f1ba 0f02 	cmp.w	sl, #2
 800452e:	d051      	beq.n	80045d4 <_scanf_float+0x278>
 8004530:	2d01      	cmp	r5, #1
 8004532:	d002      	beq.n	800453a <_scanf_float+0x1de>
 8004534:	2d04      	cmp	r5, #4
 8004536:	f47f af45 	bne.w	80043c4 <_scanf_float+0x68>
 800453a:	3501      	adds	r5, #1
 800453c:	b2ed      	uxtb	r5, r5
 800453e:	e7d9      	b.n	80044f4 <_scanf_float+0x198>
 8004540:	f1ba 0f01 	cmp.w	sl, #1
 8004544:	f47f af3e 	bne.w	80043c4 <_scanf_float+0x68>
 8004548:	f04f 0a02 	mov.w	sl, #2
 800454c:	e7d2      	b.n	80044f4 <_scanf_float+0x198>
 800454e:	b975      	cbnz	r5, 800456e <_scanf_float+0x212>
 8004550:	2f00      	cmp	r7, #0
 8004552:	f47f af38 	bne.w	80043c6 <_scanf_float+0x6a>
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800455c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004560:	f040 80ff 	bne.w	8004762 <_scanf_float+0x406>
 8004564:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004568:	2501      	movs	r5, #1
 800456a:	6022      	str	r2, [r4, #0]
 800456c:	e7c2      	b.n	80044f4 <_scanf_float+0x198>
 800456e:	2d03      	cmp	r5, #3
 8004570:	d0e3      	beq.n	800453a <_scanf_float+0x1de>
 8004572:	2d05      	cmp	r5, #5
 8004574:	e7df      	b.n	8004536 <_scanf_float+0x1da>
 8004576:	2d02      	cmp	r5, #2
 8004578:	f47f af24 	bne.w	80043c4 <_scanf_float+0x68>
 800457c:	2503      	movs	r5, #3
 800457e:	e7b9      	b.n	80044f4 <_scanf_float+0x198>
 8004580:	2d06      	cmp	r5, #6
 8004582:	f47f af1f 	bne.w	80043c4 <_scanf_float+0x68>
 8004586:	2507      	movs	r5, #7
 8004588:	e7b4      	b.n	80044f4 <_scanf_float+0x198>
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	0591      	lsls	r1, r2, #22
 800458e:	f57f af19 	bpl.w	80043c4 <_scanf_float+0x68>
 8004592:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004596:	6022      	str	r2, [r4, #0]
 8004598:	9702      	str	r7, [sp, #8]
 800459a:	e7ab      	b.n	80044f4 <_scanf_float+0x198>
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80045a2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80045a6:	d005      	beq.n	80045b4 <_scanf_float+0x258>
 80045a8:	0550      	lsls	r0, r2, #21
 80045aa:	f57f af0b 	bpl.w	80043c4 <_scanf_float+0x68>
 80045ae:	2f00      	cmp	r7, #0
 80045b0:	f000 80d7 	beq.w	8004762 <_scanf_float+0x406>
 80045b4:	0591      	lsls	r1, r2, #22
 80045b6:	bf58      	it	pl
 80045b8:	9902      	ldrpl	r1, [sp, #8]
 80045ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80045be:	bf58      	it	pl
 80045c0:	1a79      	subpl	r1, r7, r1
 80045c2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80045c6:	f04f 0700 	mov.w	r7, #0
 80045ca:	bf58      	it	pl
 80045cc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80045d0:	6022      	str	r2, [r4, #0]
 80045d2:	e78f      	b.n	80044f4 <_scanf_float+0x198>
 80045d4:	f04f 0a03 	mov.w	sl, #3
 80045d8:	e78c      	b.n	80044f4 <_scanf_float+0x198>
 80045da:	4649      	mov	r1, r9
 80045dc:	4640      	mov	r0, r8
 80045de:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80045e2:	4798      	blx	r3
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f43f aedf 	beq.w	80043a8 <_scanf_float+0x4c>
 80045ea:	e6eb      	b.n	80043c4 <_scanf_float+0x68>
 80045ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80045f0:	464a      	mov	r2, r9
 80045f2:	4640      	mov	r0, r8
 80045f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045f8:	4798      	blx	r3
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	6123      	str	r3, [r4, #16]
 8004600:	e6eb      	b.n	80043da <_scanf_float+0x7e>
 8004602:	1e6b      	subs	r3, r5, #1
 8004604:	2b06      	cmp	r3, #6
 8004606:	d824      	bhi.n	8004652 <_scanf_float+0x2f6>
 8004608:	2d02      	cmp	r5, #2
 800460a:	d836      	bhi.n	800467a <_scanf_float+0x31e>
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	429e      	cmp	r6, r3
 8004610:	f67f aee7 	bls.w	80043e2 <_scanf_float+0x86>
 8004614:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004618:	464a      	mov	r2, r9
 800461a:	4640      	mov	r0, r8
 800461c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004620:	4798      	blx	r3
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	3b01      	subs	r3, #1
 8004626:	6123      	str	r3, [r4, #16]
 8004628:	e7f0      	b.n	800460c <_scanf_float+0x2b0>
 800462a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800462e:	464a      	mov	r2, r9
 8004630:	4640      	mov	r0, r8
 8004632:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004636:	4798      	blx	r3
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	3b01      	subs	r3, #1
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004642:	fa5f fa8a 	uxtb.w	sl, sl
 8004646:	f1ba 0f02 	cmp.w	sl, #2
 800464a:	d1ee      	bne.n	800462a <_scanf_float+0x2ce>
 800464c:	3d03      	subs	r5, #3
 800464e:	b2ed      	uxtb	r5, r5
 8004650:	1b76      	subs	r6, r6, r5
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	05da      	lsls	r2, r3, #23
 8004656:	d530      	bpl.n	80046ba <_scanf_float+0x35e>
 8004658:	055b      	lsls	r3, r3, #21
 800465a:	d511      	bpl.n	8004680 <_scanf_float+0x324>
 800465c:	9b01      	ldr	r3, [sp, #4]
 800465e:	429e      	cmp	r6, r3
 8004660:	f67f aebf 	bls.w	80043e2 <_scanf_float+0x86>
 8004664:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004668:	464a      	mov	r2, r9
 800466a:	4640      	mov	r0, r8
 800466c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004670:	4798      	blx	r3
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	3b01      	subs	r3, #1
 8004676:	6123      	str	r3, [r4, #16]
 8004678:	e7f0      	b.n	800465c <_scanf_float+0x300>
 800467a:	46aa      	mov	sl, r5
 800467c:	46b3      	mov	fp, r6
 800467e:	e7de      	b.n	800463e <_scanf_float+0x2e2>
 8004680:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004684:	6923      	ldr	r3, [r4, #16]
 8004686:	2965      	cmp	r1, #101	@ 0x65
 8004688:	f103 33ff 	add.w	r3, r3, #4294967295
 800468c:	f106 35ff 	add.w	r5, r6, #4294967295
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	d00c      	beq.n	80046ae <_scanf_float+0x352>
 8004694:	2945      	cmp	r1, #69	@ 0x45
 8004696:	d00a      	beq.n	80046ae <_scanf_float+0x352>
 8004698:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800469c:	464a      	mov	r2, r9
 800469e:	4640      	mov	r0, r8
 80046a0:	4798      	blx	r3
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	1eb5      	subs	r5, r6, #2
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	464a      	mov	r2, r9
 80046b0:	4640      	mov	r0, r8
 80046b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046b6:	4798      	blx	r3
 80046b8:	462e      	mov	r6, r5
 80046ba:	6822      	ldr	r2, [r4, #0]
 80046bc:	f012 0210 	ands.w	r2, r2, #16
 80046c0:	d001      	beq.n	80046c6 <_scanf_float+0x36a>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e68e      	b.n	80043e4 <_scanf_float+0x88>
 80046c6:	7032      	strb	r2, [r6, #0]
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d2:	d125      	bne.n	8004720 <_scanf_float+0x3c4>
 80046d4:	9b02      	ldr	r3, [sp, #8]
 80046d6:	429f      	cmp	r7, r3
 80046d8:	d00a      	beq.n	80046f0 <_scanf_float+0x394>
 80046da:	1bda      	subs	r2, r3, r7
 80046dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80046e0:	429e      	cmp	r6, r3
 80046e2:	bf28      	it	cs
 80046e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80046e8:	4630      	mov	r0, r6
 80046ea:	491f      	ldr	r1, [pc, #124]	@ (8004768 <_scanf_float+0x40c>)
 80046ec:	f000 f902 	bl	80048f4 <siprintf>
 80046f0:	2200      	movs	r2, #0
 80046f2:	4640      	mov	r0, r8
 80046f4:	9901      	ldr	r1, [sp, #4]
 80046f6:	f002 fc07 	bl	8006f08 <_strtod_r>
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f015 0f02 	tst.w	r5, #2
 8004704:	4606      	mov	r6, r0
 8004706:	460f      	mov	r7, r1
 8004708:	f103 0204 	add.w	r2, r3, #4
 800470c:	d015      	beq.n	800473a <_scanf_float+0x3de>
 800470e:	9903      	ldr	r1, [sp, #12]
 8004710:	600a      	str	r2, [r1, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	e9c3 6700 	strd	r6, r7, [r3]
 8004718:	68e3      	ldr	r3, [r4, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60e3      	str	r3, [r4, #12]
 800471e:	e7d0      	b.n	80046c2 <_scanf_float+0x366>
 8004720:	9b04      	ldr	r3, [sp, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0e4      	beq.n	80046f0 <_scanf_float+0x394>
 8004726:	9905      	ldr	r1, [sp, #20]
 8004728:	230a      	movs	r3, #10
 800472a:	4640      	mov	r0, r8
 800472c:	3101      	adds	r1, #1
 800472e:	f002 fc6b 	bl	8007008 <_strtol_r>
 8004732:	9b04      	ldr	r3, [sp, #16]
 8004734:	9e05      	ldr	r6, [sp, #20]
 8004736:	1ac2      	subs	r2, r0, r3
 8004738:	e7d0      	b.n	80046dc <_scanf_float+0x380>
 800473a:	076d      	lsls	r5, r5, #29
 800473c:	d4e7      	bmi.n	800470e <_scanf_float+0x3b2>
 800473e:	9d03      	ldr	r5, [sp, #12]
 8004740:	602a      	str	r2, [r5, #0]
 8004742:	681d      	ldr	r5, [r3, #0]
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	f7fc f960 	bl	8000a0c <__aeabi_dcmpun>
 800474c:	b120      	cbz	r0, 8004758 <_scanf_float+0x3fc>
 800474e:	4807      	ldr	r0, [pc, #28]	@ (800476c <_scanf_float+0x410>)
 8004750:	f000 f9c4 	bl	8004adc <nanf>
 8004754:	6028      	str	r0, [r5, #0]
 8004756:	e7df      	b.n	8004718 <_scanf_float+0x3bc>
 8004758:	4630      	mov	r0, r6
 800475a:	4639      	mov	r1, r7
 800475c:	f7fc f9b4 	bl	8000ac8 <__aeabi_d2f>
 8004760:	e7f8      	b.n	8004754 <_scanf_float+0x3f8>
 8004762:	2700      	movs	r7, #0
 8004764:	e633      	b.n	80043ce <_scanf_float+0x72>
 8004766:	bf00      	nop
 8004768:	08008321 	.word	0x08008321
 800476c:	08008361 	.word	0x08008361

08004770 <std>:
 8004770:	2300      	movs	r3, #0
 8004772:	b510      	push	{r4, lr}
 8004774:	4604      	mov	r4, r0
 8004776:	e9c0 3300 	strd	r3, r3, [r0]
 800477a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800477e:	6083      	str	r3, [r0, #8]
 8004780:	8181      	strh	r1, [r0, #12]
 8004782:	6643      	str	r3, [r0, #100]	@ 0x64
 8004784:	81c2      	strh	r2, [r0, #14]
 8004786:	6183      	str	r3, [r0, #24]
 8004788:	4619      	mov	r1, r3
 800478a:	2208      	movs	r2, #8
 800478c:	305c      	adds	r0, #92	@ 0x5c
 800478e:	f000 f916 	bl	80049be <memset>
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <std+0x58>)
 8004794:	6224      	str	r4, [r4, #32]
 8004796:	6263      	str	r3, [r4, #36]	@ 0x24
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <std+0x5c>)
 800479a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <std+0x60>)
 800479e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047a0:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <std+0x64>)
 80047a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80047a4:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <std+0x68>)
 80047a6:	429c      	cmp	r4, r3
 80047a8:	d006      	beq.n	80047b8 <std+0x48>
 80047aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047ae:	4294      	cmp	r4, r2
 80047b0:	d002      	beq.n	80047b8 <std+0x48>
 80047b2:	33d0      	adds	r3, #208	@ 0xd0
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d105      	bne.n	80047c4 <std+0x54>
 80047b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c0:	f000 b97a 	b.w	8004ab8 <__retarget_lock_init_recursive>
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	bf00      	nop
 80047c8:	08004939 	.word	0x08004939
 80047cc:	0800495b 	.word	0x0800495b
 80047d0:	08004993 	.word	0x08004993
 80047d4:	080049b7 	.word	0x080049b7
 80047d8:	200002e4 	.word	0x200002e4

080047dc <stdio_exit_handler>:
 80047dc:	4a02      	ldr	r2, [pc, #8]	@ (80047e8 <stdio_exit_handler+0xc>)
 80047de:	4903      	ldr	r1, [pc, #12]	@ (80047ec <stdio_exit_handler+0x10>)
 80047e0:	4803      	ldr	r0, [pc, #12]	@ (80047f0 <stdio_exit_handler+0x14>)
 80047e2:	f000 b869 	b.w	80048b8 <_fwalk_sglue>
 80047e6:	bf00      	nop
 80047e8:	20000014 	.word	0x20000014
 80047ec:	080073bd 	.word	0x080073bd
 80047f0:	20000024 	.word	0x20000024

080047f4 <cleanup_stdio>:
 80047f4:	6841      	ldr	r1, [r0, #4]
 80047f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <cleanup_stdio+0x34>)
 80047f8:	b510      	push	{r4, lr}
 80047fa:	4299      	cmp	r1, r3
 80047fc:	4604      	mov	r4, r0
 80047fe:	d001      	beq.n	8004804 <cleanup_stdio+0x10>
 8004800:	f002 fddc 	bl	80073bc <_fflush_r>
 8004804:	68a1      	ldr	r1, [r4, #8]
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <cleanup_stdio+0x38>)
 8004808:	4299      	cmp	r1, r3
 800480a:	d002      	beq.n	8004812 <cleanup_stdio+0x1e>
 800480c:	4620      	mov	r0, r4
 800480e:	f002 fdd5 	bl	80073bc <_fflush_r>
 8004812:	68e1      	ldr	r1, [r4, #12]
 8004814:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <cleanup_stdio+0x3c>)
 8004816:	4299      	cmp	r1, r3
 8004818:	d004      	beq.n	8004824 <cleanup_stdio+0x30>
 800481a:	4620      	mov	r0, r4
 800481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004820:	f002 bdcc 	b.w	80073bc <_fflush_r>
 8004824:	bd10      	pop	{r4, pc}
 8004826:	bf00      	nop
 8004828:	200002e4 	.word	0x200002e4
 800482c:	2000034c 	.word	0x2000034c
 8004830:	200003b4 	.word	0x200003b4

08004834 <global_stdio_init.part.0>:
 8004834:	b510      	push	{r4, lr}
 8004836:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <global_stdio_init.part.0+0x30>)
 8004838:	4c0b      	ldr	r4, [pc, #44]	@ (8004868 <global_stdio_init.part.0+0x34>)
 800483a:	4a0c      	ldr	r2, [pc, #48]	@ (800486c <global_stdio_init.part.0+0x38>)
 800483c:	4620      	mov	r0, r4
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	2104      	movs	r1, #4
 8004842:	2200      	movs	r2, #0
 8004844:	f7ff ff94 	bl	8004770 <std>
 8004848:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800484c:	2201      	movs	r2, #1
 800484e:	2109      	movs	r1, #9
 8004850:	f7ff ff8e 	bl	8004770 <std>
 8004854:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004858:	2202      	movs	r2, #2
 800485a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800485e:	2112      	movs	r1, #18
 8004860:	f7ff bf86 	b.w	8004770 <std>
 8004864:	2000041c 	.word	0x2000041c
 8004868:	200002e4 	.word	0x200002e4
 800486c:	080047dd 	.word	0x080047dd

08004870 <__sfp_lock_acquire>:
 8004870:	4801      	ldr	r0, [pc, #4]	@ (8004878 <__sfp_lock_acquire+0x8>)
 8004872:	f000 b922 	b.w	8004aba <__retarget_lock_acquire_recursive>
 8004876:	bf00      	nop
 8004878:	20000425 	.word	0x20000425

0800487c <__sfp_lock_release>:
 800487c:	4801      	ldr	r0, [pc, #4]	@ (8004884 <__sfp_lock_release+0x8>)
 800487e:	f000 b91d 	b.w	8004abc <__retarget_lock_release_recursive>
 8004882:	bf00      	nop
 8004884:	20000425 	.word	0x20000425

08004888 <__sinit>:
 8004888:	b510      	push	{r4, lr}
 800488a:	4604      	mov	r4, r0
 800488c:	f7ff fff0 	bl	8004870 <__sfp_lock_acquire>
 8004890:	6a23      	ldr	r3, [r4, #32]
 8004892:	b11b      	cbz	r3, 800489c <__sinit+0x14>
 8004894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004898:	f7ff bff0 	b.w	800487c <__sfp_lock_release>
 800489c:	4b04      	ldr	r3, [pc, #16]	@ (80048b0 <__sinit+0x28>)
 800489e:	6223      	str	r3, [r4, #32]
 80048a0:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <__sinit+0x2c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f5      	bne.n	8004894 <__sinit+0xc>
 80048a8:	f7ff ffc4 	bl	8004834 <global_stdio_init.part.0>
 80048ac:	e7f2      	b.n	8004894 <__sinit+0xc>
 80048ae:	bf00      	nop
 80048b0:	080047f5 	.word	0x080047f5
 80048b4:	2000041c 	.word	0x2000041c

080048b8 <_fwalk_sglue>:
 80048b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048bc:	4607      	mov	r7, r0
 80048be:	4688      	mov	r8, r1
 80048c0:	4614      	mov	r4, r2
 80048c2:	2600      	movs	r6, #0
 80048c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048c8:	f1b9 0901 	subs.w	r9, r9, #1
 80048cc:	d505      	bpl.n	80048da <_fwalk_sglue+0x22>
 80048ce:	6824      	ldr	r4, [r4, #0]
 80048d0:	2c00      	cmp	r4, #0
 80048d2:	d1f7      	bne.n	80048c4 <_fwalk_sglue+0xc>
 80048d4:	4630      	mov	r0, r6
 80048d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d907      	bls.n	80048f0 <_fwalk_sglue+0x38>
 80048e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048e4:	3301      	adds	r3, #1
 80048e6:	d003      	beq.n	80048f0 <_fwalk_sglue+0x38>
 80048e8:	4629      	mov	r1, r5
 80048ea:	4638      	mov	r0, r7
 80048ec:	47c0      	blx	r8
 80048ee:	4306      	orrs	r6, r0
 80048f0:	3568      	adds	r5, #104	@ 0x68
 80048f2:	e7e9      	b.n	80048c8 <_fwalk_sglue+0x10>

080048f4 <siprintf>:
 80048f4:	b40e      	push	{r1, r2, r3}
 80048f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048fa:	b510      	push	{r4, lr}
 80048fc:	2400      	movs	r4, #0
 80048fe:	b09d      	sub	sp, #116	@ 0x74
 8004900:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004902:	9002      	str	r0, [sp, #8]
 8004904:	9006      	str	r0, [sp, #24]
 8004906:	9107      	str	r1, [sp, #28]
 8004908:	9104      	str	r1, [sp, #16]
 800490a:	4809      	ldr	r0, [pc, #36]	@ (8004930 <siprintf+0x3c>)
 800490c:	4909      	ldr	r1, [pc, #36]	@ (8004934 <siprintf+0x40>)
 800490e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004912:	9105      	str	r1, [sp, #20]
 8004914:	6800      	ldr	r0, [r0, #0]
 8004916:	a902      	add	r1, sp, #8
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800491c:	f002 fbd2 	bl	80070c4 <_svfiprintf_r>
 8004920:	9b02      	ldr	r3, [sp, #8]
 8004922:	701c      	strb	r4, [r3, #0]
 8004924:	b01d      	add	sp, #116	@ 0x74
 8004926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492a:	b003      	add	sp, #12
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000020 	.word	0x20000020
 8004934:	ffff0208 	.word	0xffff0208

08004938 <__sread>:
 8004938:	b510      	push	{r4, lr}
 800493a:	460c      	mov	r4, r1
 800493c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004940:	f000 f86c 	bl	8004a1c <_read_r>
 8004944:	2800      	cmp	r0, #0
 8004946:	bfab      	itete	ge
 8004948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800494a:	89a3      	ldrhlt	r3, [r4, #12]
 800494c:	181b      	addge	r3, r3, r0
 800494e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004952:	bfac      	ite	ge
 8004954:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004956:	81a3      	strhlt	r3, [r4, #12]
 8004958:	bd10      	pop	{r4, pc}

0800495a <__swrite>:
 800495a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495e:	461f      	mov	r7, r3
 8004960:	898b      	ldrh	r3, [r1, #12]
 8004962:	4605      	mov	r5, r0
 8004964:	05db      	lsls	r3, r3, #23
 8004966:	460c      	mov	r4, r1
 8004968:	4616      	mov	r6, r2
 800496a:	d505      	bpl.n	8004978 <__swrite+0x1e>
 800496c:	2302      	movs	r3, #2
 800496e:	2200      	movs	r2, #0
 8004970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004974:	f000 f840 	bl	80049f8 <_lseek_r>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	4632      	mov	r2, r6
 800497c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	4628      	mov	r0, r5
 8004984:	463b      	mov	r3, r7
 8004986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800498a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800498e:	f000 b857 	b.w	8004a40 <_write_r>

08004992 <__sseek>:
 8004992:	b510      	push	{r4, lr}
 8004994:	460c      	mov	r4, r1
 8004996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499a:	f000 f82d 	bl	80049f8 <_lseek_r>
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	bf15      	itete	ne
 80049a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049ae:	81a3      	strheq	r3, [r4, #12]
 80049b0:	bf18      	it	ne
 80049b2:	81a3      	strhne	r3, [r4, #12]
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <__sclose>:
 80049b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ba:	f000 b80d 	b.w	80049d8 <_close_r>

080049be <memset>:
 80049be:	4603      	mov	r3, r0
 80049c0:	4402      	add	r2, r0
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d100      	bne.n	80049c8 <memset+0xa>
 80049c6:	4770      	bx	lr
 80049c8:	f803 1b01 	strb.w	r1, [r3], #1
 80049cc:	e7f9      	b.n	80049c2 <memset+0x4>
	...

080049d0 <_localeconv_r>:
 80049d0:	4800      	ldr	r0, [pc, #0]	@ (80049d4 <_localeconv_r+0x4>)
 80049d2:	4770      	bx	lr
 80049d4:	20000160 	.word	0x20000160

080049d8 <_close_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	2300      	movs	r3, #0
 80049dc:	4d05      	ldr	r5, [pc, #20]	@ (80049f4 <_close_r+0x1c>)
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fd fb37 	bl	8002056 <_close>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_close_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_close_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000420 	.word	0x20000420

080049f8 <_lseek_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	2200      	movs	r2, #0
 8004a02:	4d05      	ldr	r5, [pc, #20]	@ (8004a18 <_lseek_r+0x20>)
 8004a04:	602a      	str	r2, [r5, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7fd fb49 	bl	800209e <_lseek>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_lseek_r+0x1e>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_lseek_r+0x1e>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	20000420 	.word	0x20000420

08004a1c <_read_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	2200      	movs	r2, #0
 8004a26:	4d05      	ldr	r5, [pc, #20]	@ (8004a3c <_read_r+0x20>)
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7fd fada 	bl	8001fe4 <_read>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_read_r+0x1e>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_read_r+0x1e>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	20000420 	.word	0x20000420

08004a40 <_write_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4d05      	ldr	r5, [pc, #20]	@ (8004a60 <_write_r+0x20>)
 8004a4c:	602a      	str	r2, [r5, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f7fd fae5 	bl	800201e <_write>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_write_r+0x1e>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_write_r+0x1e>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000420 	.word	0x20000420

08004a64 <__errno>:
 8004a64:	4b01      	ldr	r3, [pc, #4]	@ (8004a6c <__errno+0x8>)
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20000020 	.word	0x20000020

08004a70 <__libc_init_array>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	2600      	movs	r6, #0
 8004a74:	4d0c      	ldr	r5, [pc, #48]	@ (8004aa8 <__libc_init_array+0x38>)
 8004a76:	4c0d      	ldr	r4, [pc, #52]	@ (8004aac <__libc_init_array+0x3c>)
 8004a78:	1b64      	subs	r4, r4, r5
 8004a7a:	10a4      	asrs	r4, r4, #2
 8004a7c:	42a6      	cmp	r6, r4
 8004a7e:	d109      	bne.n	8004a94 <__libc_init_array+0x24>
 8004a80:	f003 fb6c 	bl	800815c <_init>
 8004a84:	2600      	movs	r6, #0
 8004a86:	4d0a      	ldr	r5, [pc, #40]	@ (8004ab0 <__libc_init_array+0x40>)
 8004a88:	4c0a      	ldr	r4, [pc, #40]	@ (8004ab4 <__libc_init_array+0x44>)
 8004a8a:	1b64      	subs	r4, r4, r5
 8004a8c:	10a4      	asrs	r4, r4, #2
 8004a8e:	42a6      	cmp	r6, r4
 8004a90:	d105      	bne.n	8004a9e <__libc_init_array+0x2e>
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
 8004a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a98:	4798      	blx	r3
 8004a9a:	3601      	adds	r6, #1
 8004a9c:	e7ee      	b.n	8004a7c <__libc_init_array+0xc>
 8004a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa2:	4798      	blx	r3
 8004aa4:	3601      	adds	r6, #1
 8004aa6:	e7f2      	b.n	8004a8e <__libc_init_array+0x1e>
 8004aa8:	08008704 	.word	0x08008704
 8004aac:	08008704 	.word	0x08008704
 8004ab0:	08008704 	.word	0x08008704
 8004ab4:	08008708 	.word	0x08008708

08004ab8 <__retarget_lock_init_recursive>:
 8004ab8:	4770      	bx	lr

08004aba <__retarget_lock_acquire_recursive>:
 8004aba:	4770      	bx	lr

08004abc <__retarget_lock_release_recursive>:
 8004abc:	4770      	bx	lr

08004abe <memchr>:
 8004abe:	4603      	mov	r3, r0
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	b2c9      	uxtb	r1, r1
 8004ac4:	4402      	add	r2, r0
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	d101      	bne.n	8004ad0 <memchr+0x12>
 8004acc:	2000      	movs	r0, #0
 8004ace:	e003      	b.n	8004ad8 <memchr+0x1a>
 8004ad0:	7804      	ldrb	r4, [r0, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	428c      	cmp	r4, r1
 8004ad6:	d1f6      	bne.n	8004ac6 <memchr+0x8>
 8004ad8:	bd10      	pop	{r4, pc}
	...

08004adc <nanf>:
 8004adc:	4800      	ldr	r0, [pc, #0]	@ (8004ae0 <nanf+0x4>)
 8004ade:	4770      	bx	lr
 8004ae0:	7fc00000 	.word	0x7fc00000

08004ae4 <__assert_func>:
 8004ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ae6:	4614      	mov	r4, r2
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b09      	ldr	r3, [pc, #36]	@ (8004b10 <__assert_func+0x2c>)
 8004aec:	4605      	mov	r5, r0
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68d8      	ldr	r0, [r3, #12]
 8004af2:	b14c      	cbz	r4, 8004b08 <__assert_func+0x24>
 8004af4:	4b07      	ldr	r3, [pc, #28]	@ (8004b14 <__assert_func+0x30>)
 8004af6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004afa:	9100      	str	r1, [sp, #0]
 8004afc:	462b      	mov	r3, r5
 8004afe:	4906      	ldr	r1, [pc, #24]	@ (8004b18 <__assert_func+0x34>)
 8004b00:	f002 fc84 	bl	800740c <fiprintf>
 8004b04:	f002 fce4 	bl	80074d0 <abort>
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <__assert_func+0x38>)
 8004b0a:	461c      	mov	r4, r3
 8004b0c:	e7f3      	b.n	8004af6 <__assert_func+0x12>
 8004b0e:	bf00      	nop
 8004b10:	20000020 	.word	0x20000020
 8004b14:	08008326 	.word	0x08008326
 8004b18:	08008333 	.word	0x08008333
 8004b1c:	08008361 	.word	0x08008361

08004b20 <quorem>:
 8004b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	6903      	ldr	r3, [r0, #16]
 8004b26:	690c      	ldr	r4, [r1, #16]
 8004b28:	4607      	mov	r7, r0
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	db7e      	blt.n	8004c2c <quorem+0x10c>
 8004b2e:	3c01      	subs	r4, #1
 8004b30:	00a3      	lsls	r3, r4, #2
 8004b32:	f100 0514 	add.w	r5, r0, #20
 8004b36:	f101 0814 	add.w	r8, r1, #20
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b56:	d32e      	bcc.n	8004bb6 <quorem+0x96>
 8004b58:	f04f 0a00 	mov.w	sl, #0
 8004b5c:	46c4      	mov	ip, r8
 8004b5e:	46ae      	mov	lr, r5
 8004b60:	46d3      	mov	fp, sl
 8004b62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b66:	b298      	uxth	r0, r3
 8004b68:	fb06 a000 	mla	r0, r6, r0, sl
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	0c02      	lsrs	r2, r0, #16
 8004b70:	fb06 2303 	mla	r3, r6, r3, r2
 8004b74:	f8de 2000 	ldr.w	r2, [lr]
 8004b78:	b280      	uxth	r0, r0
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	1a12      	subs	r2, r2, r0
 8004b7e:	445a      	add	r2, fp
 8004b80:	f8de 0000 	ldr.w	r0, [lr]
 8004b84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004b8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004b92:	b292      	uxth	r2, r2
 8004b94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b98:	45e1      	cmp	r9, ip
 8004b9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004b9e:	f84e 2b04 	str.w	r2, [lr], #4
 8004ba2:	d2de      	bcs.n	8004b62 <quorem+0x42>
 8004ba4:	9b00      	ldr	r3, [sp, #0]
 8004ba6:	58eb      	ldr	r3, [r5, r3]
 8004ba8:	b92b      	cbnz	r3, 8004bb6 <quorem+0x96>
 8004baa:	9b01      	ldr	r3, [sp, #4]
 8004bac:	3b04      	subs	r3, #4
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	d32f      	bcc.n	8004c14 <quorem+0xf4>
 8004bb4:	613c      	str	r4, [r7, #16]
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f001 f9c8 	bl	8005f4c <__mcmp>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	db25      	blt.n	8004c0c <quorem+0xec>
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bc8:	f8d1 c000 	ldr.w	ip, [r1]
 8004bcc:	fa1f fe82 	uxth.w	lr, r2
 8004bd0:	fa1f f38c 	uxth.w	r3, ip
 8004bd4:	eba3 030e 	sub.w	r3, r3, lr
 8004bd8:	4403      	add	r3, r0
 8004bda:	0c12      	lsrs	r2, r2, #16
 8004bdc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004be0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bea:	45c1      	cmp	r9, r8
 8004bec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004bf0:	f841 3b04 	str.w	r3, [r1], #4
 8004bf4:	d2e6      	bcs.n	8004bc4 <quorem+0xa4>
 8004bf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bfe:	b922      	cbnz	r2, 8004c0a <quorem+0xea>
 8004c00:	3b04      	subs	r3, #4
 8004c02:	429d      	cmp	r5, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	d30b      	bcc.n	8004c20 <quorem+0x100>
 8004c08:	613c      	str	r4, [r7, #16]
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	b003      	add	sp, #12
 8004c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	3b04      	subs	r3, #4
 8004c18:	2a00      	cmp	r2, #0
 8004c1a:	d1cb      	bne.n	8004bb4 <quorem+0x94>
 8004c1c:	3c01      	subs	r4, #1
 8004c1e:	e7c6      	b.n	8004bae <quorem+0x8e>
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	3b04      	subs	r3, #4
 8004c24:	2a00      	cmp	r2, #0
 8004c26:	d1ef      	bne.n	8004c08 <quorem+0xe8>
 8004c28:	3c01      	subs	r4, #1
 8004c2a:	e7ea      	b.n	8004c02 <quorem+0xe2>
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e7ee      	b.n	8004c0e <quorem+0xee>

08004c30 <_dtoa_r>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	69c7      	ldr	r7, [r0, #28]
 8004c3a:	b097      	sub	sp, #92	@ 0x5c
 8004c3c:	4681      	mov	r9, r0
 8004c3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004c44:	b97f      	cbnz	r7, 8004c66 <_dtoa_r+0x36>
 8004c46:	2010      	movs	r0, #16
 8004c48:	f000 fe0e 	bl	8005868 <malloc>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004c52:	b920      	cbnz	r0, 8004c5e <_dtoa_r+0x2e>
 8004c54:	21ef      	movs	r1, #239	@ 0xef
 8004c56:	4bac      	ldr	r3, [pc, #688]	@ (8004f08 <_dtoa_r+0x2d8>)
 8004c58:	48ac      	ldr	r0, [pc, #688]	@ (8004f0c <_dtoa_r+0x2dc>)
 8004c5a:	f7ff ff43 	bl	8004ae4 <__assert_func>
 8004c5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c62:	6007      	str	r7, [r0, #0]
 8004c64:	60c7      	str	r7, [r0, #12]
 8004c66:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	b159      	cbz	r1, 8004c86 <_dtoa_r+0x56>
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2301      	movs	r3, #1
 8004c72:	4093      	lsls	r3, r2
 8004c74:	604a      	str	r2, [r1, #4]
 8004c76:	608b      	str	r3, [r1, #8]
 8004c78:	4648      	mov	r0, r9
 8004c7a:	f000 feeb 	bl	8005a54 <_Bfree>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	1e2b      	subs	r3, r5, #0
 8004c88:	bfaf      	iteee	ge
 8004c8a:	2300      	movge	r3, #0
 8004c8c:	2201      	movlt	r2, #1
 8004c8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004c92:	9307      	strlt	r3, [sp, #28]
 8004c94:	bfa8      	it	ge
 8004c96:	6033      	strge	r3, [r6, #0]
 8004c98:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004c9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004f10 <_dtoa_r+0x2e0>)
 8004c9e:	bfb8      	it	lt
 8004ca0:	6032      	strlt	r2, [r6, #0]
 8004ca2:	ea33 0308 	bics.w	r3, r3, r8
 8004ca6:	d112      	bne.n	8004cce <_dtoa_r+0x9e>
 8004ca8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004cac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004cb4:	4323      	orrs	r3, r4
 8004cb6:	f000 855e 	beq.w	8005776 <_dtoa_r+0xb46>
 8004cba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004f14 <_dtoa_r+0x2e4>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8560 	beq.w	8005786 <_dtoa_r+0xb56>
 8004cc6:	f10a 0303 	add.w	r3, sl, #3
 8004cca:	f000 bd5a 	b.w	8005782 <_dtoa_r+0xb52>
 8004cce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f7fb fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	b158      	cbz	r0, 8004cfe <_dtoa_r+0xce>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cee:	b113      	cbz	r3, 8004cf6 <_dtoa_r+0xc6>
 8004cf0:	4b89      	ldr	r3, [pc, #548]	@ (8004f18 <_dtoa_r+0x2e8>)
 8004cf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004f1c <_dtoa_r+0x2ec>
 8004cfa:	f000 bd44 	b.w	8005786 <_dtoa_r+0xb56>
 8004cfe:	ab14      	add	r3, sp, #80	@ 0x50
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	ab15      	add	r3, sp, #84	@ 0x54
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	4648      	mov	r0, r9
 8004d08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004d0c:	f001 fa36 	bl	800617c <__d2b>
 8004d10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004d14:	9003      	str	r0, [sp, #12]
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	d078      	beq.n	8004e0c <_dtoa_r+0x1dc>
 8004d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d30:	9712      	str	r7, [sp, #72]	@ 0x48
 8004d32:	4619      	mov	r1, r3
 8004d34:	2200      	movs	r2, #0
 8004d36:	4b7a      	ldr	r3, [pc, #488]	@ (8004f20 <_dtoa_r+0x2f0>)
 8004d38:	f7fb fa16 	bl	8000168 <__aeabi_dsub>
 8004d3c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004ef0 <_dtoa_r+0x2c0>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f7fb fbc9 	bl	80004d8 <__aeabi_dmul>
 8004d46:	a36c      	add	r3, pc, #432	@ (adr r3, 8004ef8 <_dtoa_r+0x2c8>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f7fb fa0e 	bl	800016c <__adddf3>
 8004d50:	4604      	mov	r4, r0
 8004d52:	4630      	mov	r0, r6
 8004d54:	460d      	mov	r5, r1
 8004d56:	f7fb fb55 	bl	8000404 <__aeabi_i2d>
 8004d5a:	a369      	add	r3, pc, #420	@ (adr r3, 8004f00 <_dtoa_r+0x2d0>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f7fb fbba 	bl	80004d8 <__aeabi_dmul>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4620      	mov	r0, r4
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	f7fb f9fe 	bl	800016c <__adddf3>
 8004d70:	4604      	mov	r4, r0
 8004d72:	460d      	mov	r5, r1
 8004d74:	f7fb fe60 	bl	8000a38 <__aeabi_d2iz>
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4607      	mov	r7, r0
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4620      	mov	r0, r4
 8004d80:	4629      	mov	r1, r5
 8004d82:	f7fb fe1b 	bl	80009bc <__aeabi_dcmplt>
 8004d86:	b140      	cbz	r0, 8004d9a <_dtoa_r+0x16a>
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7fb fb3b 	bl	8000404 <__aeabi_i2d>
 8004d8e:	4622      	mov	r2, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	f7fb fe09 	bl	80009a8 <__aeabi_dcmpeq>
 8004d96:	b900      	cbnz	r0, 8004d9a <_dtoa_r+0x16a>
 8004d98:	3f01      	subs	r7, #1
 8004d9a:	2f16      	cmp	r7, #22
 8004d9c:	d854      	bhi.n	8004e48 <_dtoa_r+0x218>
 8004d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004da2:	4b60      	ldr	r3, [pc, #384]	@ (8004f24 <_dtoa_r+0x2f4>)
 8004da4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fe06 	bl	80009bc <__aeabi_dcmplt>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d04b      	beq.n	8004e4c <_dtoa_r+0x21c>
 8004db4:	2300      	movs	r3, #0
 8004db6:	3f01      	subs	r7, #1
 8004db8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004dba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	bf49      	itett	mi
 8004dc2:	f1c3 0301 	rsbmi	r3, r3, #1
 8004dc6:	2300      	movpl	r3, #0
 8004dc8:	9304      	strmi	r3, [sp, #16]
 8004dca:	2300      	movmi	r3, #0
 8004dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dce:	bf54      	ite	pl
 8004dd0:	9304      	strpl	r3, [sp, #16]
 8004dd2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	db3b      	blt.n	8004e50 <_dtoa_r+0x220>
 8004dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dda:	970e      	str	r7, [sp, #56]	@ 0x38
 8004ddc:	443b      	add	r3, r7
 8004dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8004de0:	2300      	movs	r3, #0
 8004de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004de4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d865      	bhi.n	8004eb6 <_dtoa_r+0x286>
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	bfc4      	itt	gt
 8004dee:	3b04      	subgt	r3, #4
 8004df0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004df2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004df4:	bfc8      	it	gt
 8004df6:	2400      	movgt	r4, #0
 8004df8:	f1a3 0302 	sub.w	r3, r3, #2
 8004dfc:	bfd8      	it	le
 8004dfe:	2401      	movle	r4, #1
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d864      	bhi.n	8004ece <_dtoa_r+0x29e>
 8004e04:	e8df f003 	tbb	[pc, r3]
 8004e08:	2c385553 	.word	0x2c385553
 8004e0c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004e10:	441e      	add	r6, r3
 8004e12:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	bfc1      	itttt	gt
 8004e1a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e1e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004e22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e2a:	bfd6      	itet	le
 8004e2c:	f1c3 0320 	rsble	r3, r3, #32
 8004e30:	ea48 0003 	orrgt.w	r0, r8, r3
 8004e34:	fa04 f003 	lslle.w	r0, r4, r3
 8004e38:	f7fb fad4 	bl	80003e4 <__aeabi_ui2d>
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e42:	3e01      	subs	r6, #1
 8004e44:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e46:	e774      	b.n	8004d32 <_dtoa_r+0x102>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e7b5      	b.n	8004db8 <_dtoa_r+0x188>
 8004e4c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e4e:	e7b4      	b.n	8004dba <_dtoa_r+0x18a>
 8004e50:	9b04      	ldr	r3, [sp, #16]
 8004e52:	1bdb      	subs	r3, r3, r7
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	427b      	negs	r3, r7
 8004e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e5e:	e7c1      	b.n	8004de4 <_dtoa_r+0x1b4>
 8004e60:	2301      	movs	r3, #1
 8004e62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e66:	eb07 0b03 	add.w	fp, r7, r3
 8004e6a:	f10b 0301 	add.w	r3, fp, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	9308      	str	r3, [sp, #32]
 8004e72:	bfb8      	it	lt
 8004e74:	2301      	movlt	r3, #1
 8004e76:	e006      	b.n	8004e86 <_dtoa_r+0x256>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dd28      	ble.n	8004ed4 <_dtoa_r+0x2a4>
 8004e82:	469b      	mov	fp, r3
 8004e84:	9308      	str	r3, [sp, #32]
 8004e86:	2100      	movs	r1, #0
 8004e88:	2204      	movs	r2, #4
 8004e8a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004e8e:	f102 0514 	add.w	r5, r2, #20
 8004e92:	429d      	cmp	r5, r3
 8004e94:	d926      	bls.n	8004ee4 <_dtoa_r+0x2b4>
 8004e96:	6041      	str	r1, [r0, #4]
 8004e98:	4648      	mov	r0, r9
 8004e9a:	f000 fd9b 	bl	80059d4 <_Balloc>
 8004e9e:	4682      	mov	sl, r0
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d143      	bne.n	8004f2c <_dtoa_r+0x2fc>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004f28 <_dtoa_r+0x2f8>)
 8004eac:	e6d4      	b.n	8004c58 <_dtoa_r+0x28>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e7e3      	b.n	8004e7a <_dtoa_r+0x24a>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e7d5      	b.n	8004e62 <_dtoa_r+0x232>
 8004eb6:	2401      	movs	r4, #1
 8004eb8:	2300      	movs	r3, #0
 8004eba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004ebc:	9320      	str	r3, [sp, #128]	@ 0x80
 8004ebe:	f04f 3bff 	mov.w	fp, #4294967295
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2312      	movs	r3, #18
 8004ec6:	f8cd b020 	str.w	fp, [sp, #32]
 8004eca:	9221      	str	r2, [sp, #132]	@ 0x84
 8004ecc:	e7db      	b.n	8004e86 <_dtoa_r+0x256>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ed2:	e7f4      	b.n	8004ebe <_dtoa_r+0x28e>
 8004ed4:	f04f 0b01 	mov.w	fp, #1
 8004ed8:	465b      	mov	r3, fp
 8004eda:	f8cd b020 	str.w	fp, [sp, #32]
 8004ede:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004ee2:	e7d0      	b.n	8004e86 <_dtoa_r+0x256>
 8004ee4:	3101      	adds	r1, #1
 8004ee6:	0052      	lsls	r2, r2, #1
 8004ee8:	e7d1      	b.n	8004e8e <_dtoa_r+0x25e>
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w
 8004ef0:	636f4361 	.word	0x636f4361
 8004ef4:	3fd287a7 	.word	0x3fd287a7
 8004ef8:	8b60c8b3 	.word	0x8b60c8b3
 8004efc:	3fc68a28 	.word	0x3fc68a28
 8004f00:	509f79fb 	.word	0x509f79fb
 8004f04:	3fd34413 	.word	0x3fd34413
 8004f08:	0800827e 	.word	0x0800827e
 8004f0c:	0800836f 	.word	0x0800836f
 8004f10:	7ff00000 	.word	0x7ff00000
 8004f14:	0800836b 	.word	0x0800836b
 8004f18:	080082fe 	.word	0x080082fe
 8004f1c:	080082fd 	.word	0x080082fd
 8004f20:	3ff80000 	.word	0x3ff80000
 8004f24:	080084e0 	.word	0x080084e0
 8004f28:	080083c7 	.word	0x080083c7
 8004f2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f30:	6018      	str	r0, [r3, #0]
 8004f32:	9b08      	ldr	r3, [sp, #32]
 8004f34:	2b0e      	cmp	r3, #14
 8004f36:	f200 80a1 	bhi.w	800507c <_dtoa_r+0x44c>
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	f000 809e 	beq.w	800507c <_dtoa_r+0x44c>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	dd33      	ble.n	8004fac <_dtoa_r+0x37c>
 8004f44:	4b9c      	ldr	r3, [pc, #624]	@ (80051b8 <_dtoa_r+0x588>)
 8004f46:	f007 020f 	and.w	r2, r7, #15
 8004f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f4e:	05f8      	lsls	r0, r7, #23
 8004f50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f54:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004f58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f5c:	d516      	bpl.n	8004f8c <_dtoa_r+0x35c>
 8004f5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f62:	4b96      	ldr	r3, [pc, #600]	@ (80051bc <_dtoa_r+0x58c>)
 8004f64:	2603      	movs	r6, #3
 8004f66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f6a:	f7fb fbdf 	bl	800072c <__aeabi_ddiv>
 8004f6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f72:	f004 040f 	and.w	r4, r4, #15
 8004f76:	4d91      	ldr	r5, [pc, #580]	@ (80051bc <_dtoa_r+0x58c>)
 8004f78:	b954      	cbnz	r4, 8004f90 <_dtoa_r+0x360>
 8004f7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f82:	f7fb fbd3 	bl	800072c <__aeabi_ddiv>
 8004f86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f8a:	e028      	b.n	8004fde <_dtoa_r+0x3ae>
 8004f8c:	2602      	movs	r6, #2
 8004f8e:	e7f2      	b.n	8004f76 <_dtoa_r+0x346>
 8004f90:	07e1      	lsls	r1, r4, #31
 8004f92:	d508      	bpl.n	8004fa6 <_dtoa_r+0x376>
 8004f94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f9c:	f7fb fa9c 	bl	80004d8 <__aeabi_dmul>
 8004fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	1064      	asrs	r4, r4, #1
 8004fa8:	3508      	adds	r5, #8
 8004faa:	e7e5      	b.n	8004f78 <_dtoa_r+0x348>
 8004fac:	f000 80af 	beq.w	800510e <_dtoa_r+0x4de>
 8004fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fb4:	427c      	negs	r4, r7
 8004fb6:	4b80      	ldr	r3, [pc, #512]	@ (80051b8 <_dtoa_r+0x588>)
 8004fb8:	f004 020f 	and.w	r2, r4, #15
 8004fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb fa88 	bl	80004d8 <__aeabi_dmul>
 8004fc8:	2602      	movs	r6, #2
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fd0:	4d7a      	ldr	r5, [pc, #488]	@ (80051bc <_dtoa_r+0x58c>)
 8004fd2:	1124      	asrs	r4, r4, #4
 8004fd4:	2c00      	cmp	r4, #0
 8004fd6:	f040 808f 	bne.w	80050f8 <_dtoa_r+0x4c8>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1d3      	bne.n	8004f86 <_dtoa_r+0x356>
 8004fde:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004fe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8094 	beq.w	8005112 <_dtoa_r+0x4e2>
 8004fea:	2200      	movs	r2, #0
 8004fec:	4620      	mov	r0, r4
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4b73      	ldr	r3, [pc, #460]	@ (80051c0 <_dtoa_r+0x590>)
 8004ff2:	f7fb fce3 	bl	80009bc <__aeabi_dcmplt>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f000 808b 	beq.w	8005112 <_dtoa_r+0x4e2>
 8004ffc:	9b08      	ldr	r3, [sp, #32]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8087 	beq.w	8005112 <_dtoa_r+0x4e2>
 8005004:	f1bb 0f00 	cmp.w	fp, #0
 8005008:	dd34      	ble.n	8005074 <_dtoa_r+0x444>
 800500a:	4620      	mov	r0, r4
 800500c:	2200      	movs	r2, #0
 800500e:	4629      	mov	r1, r5
 8005010:	4b6c      	ldr	r3, [pc, #432]	@ (80051c4 <_dtoa_r+0x594>)
 8005012:	f7fb fa61 	bl	80004d8 <__aeabi_dmul>
 8005016:	465c      	mov	r4, fp
 8005018:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800501c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005020:	3601      	adds	r6, #1
 8005022:	4630      	mov	r0, r6
 8005024:	f7fb f9ee 	bl	8000404 <__aeabi_i2d>
 8005028:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800502c:	f7fb fa54 	bl	80004d8 <__aeabi_dmul>
 8005030:	2200      	movs	r2, #0
 8005032:	4b65      	ldr	r3, [pc, #404]	@ (80051c8 <_dtoa_r+0x598>)
 8005034:	f7fb f89a 	bl	800016c <__adddf3>
 8005038:	4605      	mov	r5, r0
 800503a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800503e:	2c00      	cmp	r4, #0
 8005040:	d16a      	bne.n	8005118 <_dtoa_r+0x4e8>
 8005042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005046:	2200      	movs	r2, #0
 8005048:	4b60      	ldr	r3, [pc, #384]	@ (80051cc <_dtoa_r+0x59c>)
 800504a:	f7fb f88d 	bl	8000168 <__aeabi_dsub>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005056:	462a      	mov	r2, r5
 8005058:	4633      	mov	r3, r6
 800505a:	f7fb fccd 	bl	80009f8 <__aeabi_dcmpgt>
 800505e:	2800      	cmp	r0, #0
 8005060:	f040 8298 	bne.w	8005594 <_dtoa_r+0x964>
 8005064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005068:	462a      	mov	r2, r5
 800506a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800506e:	f7fb fca5 	bl	80009bc <__aeabi_dcmplt>
 8005072:	bb38      	cbnz	r0, 80050c4 <_dtoa_r+0x494>
 8005074:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005078:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800507c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	f2c0 8157 	blt.w	8005332 <_dtoa_r+0x702>
 8005084:	2f0e      	cmp	r7, #14
 8005086:	f300 8154 	bgt.w	8005332 <_dtoa_r+0x702>
 800508a:	4b4b      	ldr	r3, [pc, #300]	@ (80051b8 <_dtoa_r+0x588>)
 800508c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005090:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005094:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005098:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800509a:	2b00      	cmp	r3, #0
 800509c:	f280 80e5 	bge.w	800526a <_dtoa_r+0x63a>
 80050a0:	9b08      	ldr	r3, [sp, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f300 80e1 	bgt.w	800526a <_dtoa_r+0x63a>
 80050a8:	d10c      	bne.n	80050c4 <_dtoa_r+0x494>
 80050aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ae:	2200      	movs	r2, #0
 80050b0:	4b46      	ldr	r3, [pc, #280]	@ (80051cc <_dtoa_r+0x59c>)
 80050b2:	f7fb fa11 	bl	80004d8 <__aeabi_dmul>
 80050b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050ba:	f7fb fc93 	bl	80009e4 <__aeabi_dcmpge>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f000 8266 	beq.w	8005590 <_dtoa_r+0x960>
 80050c4:	2400      	movs	r4, #0
 80050c6:	4625      	mov	r5, r4
 80050c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050ca:	4656      	mov	r6, sl
 80050cc:	ea6f 0803 	mvn.w	r8, r3
 80050d0:	2700      	movs	r7, #0
 80050d2:	4621      	mov	r1, r4
 80050d4:	4648      	mov	r0, r9
 80050d6:	f000 fcbd 	bl	8005a54 <_Bfree>
 80050da:	2d00      	cmp	r5, #0
 80050dc:	f000 80bd 	beq.w	800525a <_dtoa_r+0x62a>
 80050e0:	b12f      	cbz	r7, 80050ee <_dtoa_r+0x4be>
 80050e2:	42af      	cmp	r7, r5
 80050e4:	d003      	beq.n	80050ee <_dtoa_r+0x4be>
 80050e6:	4639      	mov	r1, r7
 80050e8:	4648      	mov	r0, r9
 80050ea:	f000 fcb3 	bl	8005a54 <_Bfree>
 80050ee:	4629      	mov	r1, r5
 80050f0:	4648      	mov	r0, r9
 80050f2:	f000 fcaf 	bl	8005a54 <_Bfree>
 80050f6:	e0b0      	b.n	800525a <_dtoa_r+0x62a>
 80050f8:	07e2      	lsls	r2, r4, #31
 80050fa:	d505      	bpl.n	8005108 <_dtoa_r+0x4d8>
 80050fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005100:	f7fb f9ea 	bl	80004d8 <__aeabi_dmul>
 8005104:	2301      	movs	r3, #1
 8005106:	3601      	adds	r6, #1
 8005108:	1064      	asrs	r4, r4, #1
 800510a:	3508      	adds	r5, #8
 800510c:	e762      	b.n	8004fd4 <_dtoa_r+0x3a4>
 800510e:	2602      	movs	r6, #2
 8005110:	e765      	b.n	8004fde <_dtoa_r+0x3ae>
 8005112:	46b8      	mov	r8, r7
 8005114:	9c08      	ldr	r4, [sp, #32]
 8005116:	e784      	b.n	8005022 <_dtoa_r+0x3f2>
 8005118:	4b27      	ldr	r3, [pc, #156]	@ (80051b8 <_dtoa_r+0x588>)
 800511a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800511c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005120:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005124:	4454      	add	r4, sl
 8005126:	2900      	cmp	r1, #0
 8005128:	d054      	beq.n	80051d4 <_dtoa_r+0x5a4>
 800512a:	2000      	movs	r0, #0
 800512c:	4928      	ldr	r1, [pc, #160]	@ (80051d0 <_dtoa_r+0x5a0>)
 800512e:	f7fb fafd 	bl	800072c <__aeabi_ddiv>
 8005132:	4633      	mov	r3, r6
 8005134:	462a      	mov	r2, r5
 8005136:	f7fb f817 	bl	8000168 <__aeabi_dsub>
 800513a:	4656      	mov	r6, sl
 800513c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005144:	f7fb fc78 	bl	8000a38 <__aeabi_d2iz>
 8005148:	4605      	mov	r5, r0
 800514a:	f7fb f95b 	bl	8000404 <__aeabi_i2d>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005156:	f7fb f807 	bl	8000168 <__aeabi_dsub>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	3530      	adds	r5, #48	@ 0x30
 8005160:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005164:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005168:	f806 5b01 	strb.w	r5, [r6], #1
 800516c:	f7fb fc26 	bl	80009bc <__aeabi_dcmplt>
 8005170:	2800      	cmp	r0, #0
 8005172:	d172      	bne.n	800525a <_dtoa_r+0x62a>
 8005174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005178:	2000      	movs	r0, #0
 800517a:	4911      	ldr	r1, [pc, #68]	@ (80051c0 <_dtoa_r+0x590>)
 800517c:	f7fa fff4 	bl	8000168 <__aeabi_dsub>
 8005180:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005184:	f7fb fc1a 	bl	80009bc <__aeabi_dcmplt>
 8005188:	2800      	cmp	r0, #0
 800518a:	f040 80b4 	bne.w	80052f6 <_dtoa_r+0x6c6>
 800518e:	42a6      	cmp	r6, r4
 8005190:	f43f af70 	beq.w	8005074 <_dtoa_r+0x444>
 8005194:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005198:	2200      	movs	r2, #0
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <_dtoa_r+0x594>)
 800519c:	f7fb f99c 	bl	80004d8 <__aeabi_dmul>
 80051a0:	2200      	movs	r2, #0
 80051a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <_dtoa_r+0x594>)
 80051ac:	f7fb f994 	bl	80004d8 <__aeabi_dmul>
 80051b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80051b4:	e7c4      	b.n	8005140 <_dtoa_r+0x510>
 80051b6:	bf00      	nop
 80051b8:	080084e0 	.word	0x080084e0
 80051bc:	080084b8 	.word	0x080084b8
 80051c0:	3ff00000 	.word	0x3ff00000
 80051c4:	40240000 	.word	0x40240000
 80051c8:	401c0000 	.word	0x401c0000
 80051cc:	40140000 	.word	0x40140000
 80051d0:	3fe00000 	.word	0x3fe00000
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	f7fb f97e 	bl	80004d8 <__aeabi_dmul>
 80051dc:	4656      	mov	r6, sl
 80051de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80051e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051e8:	f7fb fc26 	bl	8000a38 <__aeabi_d2iz>
 80051ec:	4605      	mov	r5, r0
 80051ee:	f7fb f909 	bl	8000404 <__aeabi_i2d>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051fa:	f7fa ffb5 	bl	8000168 <__aeabi_dsub>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	3530      	adds	r5, #48	@ 0x30
 8005204:	f806 5b01 	strb.w	r5, [r6], #1
 8005208:	42a6      	cmp	r6, r4
 800520a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	d124      	bne.n	800525e <_dtoa_r+0x62e>
 8005214:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005218:	4bae      	ldr	r3, [pc, #696]	@ (80054d4 <_dtoa_r+0x8a4>)
 800521a:	f7fa ffa7 	bl	800016c <__adddf3>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005226:	f7fb fbe7 	bl	80009f8 <__aeabi_dcmpgt>
 800522a:	2800      	cmp	r0, #0
 800522c:	d163      	bne.n	80052f6 <_dtoa_r+0x6c6>
 800522e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005232:	2000      	movs	r0, #0
 8005234:	49a7      	ldr	r1, [pc, #668]	@ (80054d4 <_dtoa_r+0x8a4>)
 8005236:	f7fa ff97 	bl	8000168 <__aeabi_dsub>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005242:	f7fb fbbb 	bl	80009bc <__aeabi_dcmplt>
 8005246:	2800      	cmp	r0, #0
 8005248:	f43f af14 	beq.w	8005074 <_dtoa_r+0x444>
 800524c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800524e:	1e73      	subs	r3, r6, #1
 8005250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005252:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005256:	2b30      	cmp	r3, #48	@ 0x30
 8005258:	d0f8      	beq.n	800524c <_dtoa_r+0x61c>
 800525a:	4647      	mov	r7, r8
 800525c:	e03b      	b.n	80052d6 <_dtoa_r+0x6a6>
 800525e:	4b9e      	ldr	r3, [pc, #632]	@ (80054d8 <_dtoa_r+0x8a8>)
 8005260:	f7fb f93a 	bl	80004d8 <__aeabi_dmul>
 8005264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005268:	e7bc      	b.n	80051e4 <_dtoa_r+0x5b4>
 800526a:	4656      	mov	r6, sl
 800526c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005274:	4620      	mov	r0, r4
 8005276:	4629      	mov	r1, r5
 8005278:	f7fb fa58 	bl	800072c <__aeabi_ddiv>
 800527c:	f7fb fbdc 	bl	8000a38 <__aeabi_d2iz>
 8005280:	4680      	mov	r8, r0
 8005282:	f7fb f8bf 	bl	8000404 <__aeabi_i2d>
 8005286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800528a:	f7fb f925 	bl	80004d8 <__aeabi_dmul>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f7fa ff67 	bl	8000168 <__aeabi_dsub>
 800529a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800529e:	9d08      	ldr	r5, [sp, #32]
 80052a0:	f806 4b01 	strb.w	r4, [r6], #1
 80052a4:	eba6 040a 	sub.w	r4, r6, sl
 80052a8:	42a5      	cmp	r5, r4
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	d133      	bne.n	8005318 <_dtoa_r+0x6e8>
 80052b0:	f7fa ff5c 	bl	800016c <__adddf3>
 80052b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052b8:	4604      	mov	r4, r0
 80052ba:	460d      	mov	r5, r1
 80052bc:	f7fb fb9c 	bl	80009f8 <__aeabi_dcmpgt>
 80052c0:	b9c0      	cbnz	r0, 80052f4 <_dtoa_r+0x6c4>
 80052c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7fb fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 80052ce:	b110      	cbz	r0, 80052d6 <_dtoa_r+0x6a6>
 80052d0:	f018 0f01 	tst.w	r8, #1
 80052d4:	d10e      	bne.n	80052f4 <_dtoa_r+0x6c4>
 80052d6:	4648      	mov	r0, r9
 80052d8:	9903      	ldr	r1, [sp, #12]
 80052da:	f000 fbbb 	bl	8005a54 <_Bfree>
 80052de:	2300      	movs	r3, #0
 80052e0:	7033      	strb	r3, [r6, #0]
 80052e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80052e4:	3701      	adds	r7, #1
 80052e6:	601f      	str	r7, [r3, #0]
 80052e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 824b 	beq.w	8005786 <_dtoa_r+0xb56>
 80052f0:	601e      	str	r6, [r3, #0]
 80052f2:	e248      	b.n	8005786 <_dtoa_r+0xb56>
 80052f4:	46b8      	mov	r8, r7
 80052f6:	4633      	mov	r3, r6
 80052f8:	461e      	mov	r6, r3
 80052fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052fe:	2a39      	cmp	r2, #57	@ 0x39
 8005300:	d106      	bne.n	8005310 <_dtoa_r+0x6e0>
 8005302:	459a      	cmp	sl, r3
 8005304:	d1f8      	bne.n	80052f8 <_dtoa_r+0x6c8>
 8005306:	2230      	movs	r2, #48	@ 0x30
 8005308:	f108 0801 	add.w	r8, r8, #1
 800530c:	f88a 2000 	strb.w	r2, [sl]
 8005310:	781a      	ldrb	r2, [r3, #0]
 8005312:	3201      	adds	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e7a0      	b.n	800525a <_dtoa_r+0x62a>
 8005318:	2200      	movs	r2, #0
 800531a:	4b6f      	ldr	r3, [pc, #444]	@ (80054d8 <_dtoa_r+0x8a8>)
 800531c:	f7fb f8dc 	bl	80004d8 <__aeabi_dmul>
 8005320:	2200      	movs	r2, #0
 8005322:	2300      	movs	r3, #0
 8005324:	4604      	mov	r4, r0
 8005326:	460d      	mov	r5, r1
 8005328:	f7fb fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800532c:	2800      	cmp	r0, #0
 800532e:	d09f      	beq.n	8005270 <_dtoa_r+0x640>
 8005330:	e7d1      	b.n	80052d6 <_dtoa_r+0x6a6>
 8005332:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005334:	2a00      	cmp	r2, #0
 8005336:	f000 80ea 	beq.w	800550e <_dtoa_r+0x8de>
 800533a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800533c:	2a01      	cmp	r2, #1
 800533e:	f300 80cd 	bgt.w	80054dc <_dtoa_r+0x8ac>
 8005342:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005344:	2a00      	cmp	r2, #0
 8005346:	f000 80c1 	beq.w	80054cc <_dtoa_r+0x89c>
 800534a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800534e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005350:	9e04      	ldr	r6, [sp, #16]
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	2101      	movs	r1, #1
 8005356:	441a      	add	r2, r3
 8005358:	9204      	str	r2, [sp, #16]
 800535a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800535c:	4648      	mov	r0, r9
 800535e:	441a      	add	r2, r3
 8005360:	9209      	str	r2, [sp, #36]	@ 0x24
 8005362:	f000 fc75 	bl	8005c50 <__i2b>
 8005366:	4605      	mov	r5, r0
 8005368:	b166      	cbz	r6, 8005384 <_dtoa_r+0x754>
 800536a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	dd09      	ble.n	8005384 <_dtoa_r+0x754>
 8005370:	42b3      	cmp	r3, r6
 8005372:	bfa8      	it	ge
 8005374:	4633      	movge	r3, r6
 8005376:	9a04      	ldr	r2, [sp, #16]
 8005378:	1af6      	subs	r6, r6, r3
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	9204      	str	r2, [sp, #16]
 800537e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	9309      	str	r3, [sp, #36]	@ 0x24
 8005384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005386:	b30b      	cbz	r3, 80053cc <_dtoa_r+0x79c>
 8005388:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80c6 	beq.w	800551c <_dtoa_r+0x8ec>
 8005390:	2c00      	cmp	r4, #0
 8005392:	f000 80c0 	beq.w	8005516 <_dtoa_r+0x8e6>
 8005396:	4629      	mov	r1, r5
 8005398:	4622      	mov	r2, r4
 800539a:	4648      	mov	r0, r9
 800539c:	f000 fd10 	bl	8005dc0 <__pow5mult>
 80053a0:	9a03      	ldr	r2, [sp, #12]
 80053a2:	4601      	mov	r1, r0
 80053a4:	4605      	mov	r5, r0
 80053a6:	4648      	mov	r0, r9
 80053a8:	f000 fc68 	bl	8005c7c <__multiply>
 80053ac:	9903      	ldr	r1, [sp, #12]
 80053ae:	4680      	mov	r8, r0
 80053b0:	4648      	mov	r0, r9
 80053b2:	f000 fb4f 	bl	8005a54 <_Bfree>
 80053b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053b8:	1b1b      	subs	r3, r3, r4
 80053ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80053bc:	f000 80b1 	beq.w	8005522 <_dtoa_r+0x8f2>
 80053c0:	4641      	mov	r1, r8
 80053c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053c4:	4648      	mov	r0, r9
 80053c6:	f000 fcfb 	bl	8005dc0 <__pow5mult>
 80053ca:	9003      	str	r0, [sp, #12]
 80053cc:	2101      	movs	r1, #1
 80053ce:	4648      	mov	r0, r9
 80053d0:	f000 fc3e 	bl	8005c50 <__i2b>
 80053d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053d6:	4604      	mov	r4, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 81d8 	beq.w	800578e <_dtoa_r+0xb5e>
 80053de:	461a      	mov	r2, r3
 80053e0:	4601      	mov	r1, r0
 80053e2:	4648      	mov	r0, r9
 80053e4:	f000 fcec 	bl	8005dc0 <__pow5mult>
 80053e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053ea:	4604      	mov	r4, r0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	f300 809f 	bgt.w	8005530 <_dtoa_r+0x900>
 80053f2:	9b06      	ldr	r3, [sp, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 8097 	bne.w	8005528 <_dtoa_r+0x8f8>
 80053fa:	9b07      	ldr	r3, [sp, #28]
 80053fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005400:	2b00      	cmp	r3, #0
 8005402:	f040 8093 	bne.w	800552c <_dtoa_r+0x8fc>
 8005406:	9b07      	ldr	r3, [sp, #28]
 8005408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800540c:	0d1b      	lsrs	r3, r3, #20
 800540e:	051b      	lsls	r3, r3, #20
 8005410:	b133      	cbz	r3, 8005420 <_dtoa_r+0x7f0>
 8005412:	9b04      	ldr	r3, [sp, #16]
 8005414:	3301      	adds	r3, #1
 8005416:	9304      	str	r3, [sp, #16]
 8005418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800541a:	3301      	adds	r3, #1
 800541c:	9309      	str	r3, [sp, #36]	@ 0x24
 800541e:	2301      	movs	r3, #1
 8005420:	930a      	str	r3, [sp, #40]	@ 0x28
 8005422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 81b8 	beq.w	800579a <_dtoa_r+0xb6a>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005430:	6918      	ldr	r0, [r3, #16]
 8005432:	f000 fbc1 	bl	8005bb8 <__hi0bits>
 8005436:	f1c0 0020 	rsb	r0, r0, #32
 800543a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800543c:	4418      	add	r0, r3
 800543e:	f010 001f 	ands.w	r0, r0, #31
 8005442:	f000 8082 	beq.w	800554a <_dtoa_r+0x91a>
 8005446:	f1c0 0320 	rsb	r3, r0, #32
 800544a:	2b04      	cmp	r3, #4
 800544c:	dd73      	ble.n	8005536 <_dtoa_r+0x906>
 800544e:	9b04      	ldr	r3, [sp, #16]
 8005450:	f1c0 001c 	rsb	r0, r0, #28
 8005454:	4403      	add	r3, r0
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545a:	4406      	add	r6, r0
 800545c:	4403      	add	r3, r0
 800545e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005460:	9b04      	ldr	r3, [sp, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	dd05      	ble.n	8005472 <_dtoa_r+0x842>
 8005466:	461a      	mov	r2, r3
 8005468:	4648      	mov	r0, r9
 800546a:	9903      	ldr	r1, [sp, #12]
 800546c:	f000 fd02 	bl	8005e74 <__lshift>
 8005470:	9003      	str	r0, [sp, #12]
 8005472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	dd05      	ble.n	8005484 <_dtoa_r+0x854>
 8005478:	4621      	mov	r1, r4
 800547a:	461a      	mov	r2, r3
 800547c:	4648      	mov	r0, r9
 800547e:	f000 fcf9 	bl	8005e74 <__lshift>
 8005482:	4604      	mov	r4, r0
 8005484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d061      	beq.n	800554e <_dtoa_r+0x91e>
 800548a:	4621      	mov	r1, r4
 800548c:	9803      	ldr	r0, [sp, #12]
 800548e:	f000 fd5d 	bl	8005f4c <__mcmp>
 8005492:	2800      	cmp	r0, #0
 8005494:	da5b      	bge.n	800554e <_dtoa_r+0x91e>
 8005496:	2300      	movs	r3, #0
 8005498:	220a      	movs	r2, #10
 800549a:	4648      	mov	r0, r9
 800549c:	9903      	ldr	r1, [sp, #12]
 800549e:	f000 fafb 	bl	8005a98 <__multadd>
 80054a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054a4:	f107 38ff 	add.w	r8, r7, #4294967295
 80054a8:	9003      	str	r0, [sp, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8177 	beq.w	800579e <_dtoa_r+0xb6e>
 80054b0:	4629      	mov	r1, r5
 80054b2:	2300      	movs	r3, #0
 80054b4:	220a      	movs	r2, #10
 80054b6:	4648      	mov	r0, r9
 80054b8:	f000 faee 	bl	8005a98 <__multadd>
 80054bc:	f1bb 0f00 	cmp.w	fp, #0
 80054c0:	4605      	mov	r5, r0
 80054c2:	dc6f      	bgt.n	80055a4 <_dtoa_r+0x974>
 80054c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	dc49      	bgt.n	800555e <_dtoa_r+0x92e>
 80054ca:	e06b      	b.n	80055a4 <_dtoa_r+0x974>
 80054cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80054d2:	e73c      	b.n	800534e <_dtoa_r+0x71e>
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	40240000 	.word	0x40240000
 80054dc:	9b08      	ldr	r3, [sp, #32]
 80054de:	1e5c      	subs	r4, r3, #1
 80054e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	db09      	blt.n	80054fa <_dtoa_r+0x8ca>
 80054e6:	1b1c      	subs	r4, r3, r4
 80054e8:	9b08      	ldr	r3, [sp, #32]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f6bf af30 	bge.w	8005350 <_dtoa_r+0x720>
 80054f0:	9b04      	ldr	r3, [sp, #16]
 80054f2:	9a08      	ldr	r2, [sp, #32]
 80054f4:	1a9e      	subs	r6, r3, r2
 80054f6:	2300      	movs	r3, #0
 80054f8:	e72b      	b.n	8005352 <_dtoa_r+0x722>
 80054fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054fe:	1ae3      	subs	r3, r4, r3
 8005500:	441a      	add	r2, r3
 8005502:	940a      	str	r4, [sp, #40]	@ 0x28
 8005504:	9e04      	ldr	r6, [sp, #16]
 8005506:	2400      	movs	r4, #0
 8005508:	9b08      	ldr	r3, [sp, #32]
 800550a:	920e      	str	r2, [sp, #56]	@ 0x38
 800550c:	e721      	b.n	8005352 <_dtoa_r+0x722>
 800550e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005510:	9e04      	ldr	r6, [sp, #16]
 8005512:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005514:	e728      	b.n	8005368 <_dtoa_r+0x738>
 8005516:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800551a:	e751      	b.n	80053c0 <_dtoa_r+0x790>
 800551c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800551e:	9903      	ldr	r1, [sp, #12]
 8005520:	e750      	b.n	80053c4 <_dtoa_r+0x794>
 8005522:	f8cd 800c 	str.w	r8, [sp, #12]
 8005526:	e751      	b.n	80053cc <_dtoa_r+0x79c>
 8005528:	2300      	movs	r3, #0
 800552a:	e779      	b.n	8005420 <_dtoa_r+0x7f0>
 800552c:	9b06      	ldr	r3, [sp, #24]
 800552e:	e777      	b.n	8005420 <_dtoa_r+0x7f0>
 8005530:	2300      	movs	r3, #0
 8005532:	930a      	str	r3, [sp, #40]	@ 0x28
 8005534:	e779      	b.n	800542a <_dtoa_r+0x7fa>
 8005536:	d093      	beq.n	8005460 <_dtoa_r+0x830>
 8005538:	9a04      	ldr	r2, [sp, #16]
 800553a:	331c      	adds	r3, #28
 800553c:	441a      	add	r2, r3
 800553e:	9204      	str	r2, [sp, #16]
 8005540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005542:	441e      	add	r6, r3
 8005544:	441a      	add	r2, r3
 8005546:	9209      	str	r2, [sp, #36]	@ 0x24
 8005548:	e78a      	b.n	8005460 <_dtoa_r+0x830>
 800554a:	4603      	mov	r3, r0
 800554c:	e7f4      	b.n	8005538 <_dtoa_r+0x908>
 800554e:	9b08      	ldr	r3, [sp, #32]
 8005550:	46b8      	mov	r8, r7
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc20      	bgt.n	8005598 <_dtoa_r+0x968>
 8005556:	469b      	mov	fp, r3
 8005558:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800555a:	2b02      	cmp	r3, #2
 800555c:	dd1e      	ble.n	800559c <_dtoa_r+0x96c>
 800555e:	f1bb 0f00 	cmp.w	fp, #0
 8005562:	f47f adb1 	bne.w	80050c8 <_dtoa_r+0x498>
 8005566:	4621      	mov	r1, r4
 8005568:	465b      	mov	r3, fp
 800556a:	2205      	movs	r2, #5
 800556c:	4648      	mov	r0, r9
 800556e:	f000 fa93 	bl	8005a98 <__multadd>
 8005572:	4601      	mov	r1, r0
 8005574:	4604      	mov	r4, r0
 8005576:	9803      	ldr	r0, [sp, #12]
 8005578:	f000 fce8 	bl	8005f4c <__mcmp>
 800557c:	2800      	cmp	r0, #0
 800557e:	f77f ada3 	ble.w	80050c8 <_dtoa_r+0x498>
 8005582:	4656      	mov	r6, sl
 8005584:	2331      	movs	r3, #49	@ 0x31
 8005586:	f108 0801 	add.w	r8, r8, #1
 800558a:	f806 3b01 	strb.w	r3, [r6], #1
 800558e:	e59f      	b.n	80050d0 <_dtoa_r+0x4a0>
 8005590:	46b8      	mov	r8, r7
 8005592:	9c08      	ldr	r4, [sp, #32]
 8005594:	4625      	mov	r5, r4
 8005596:	e7f4      	b.n	8005582 <_dtoa_r+0x952>
 8005598:	f8dd b020 	ldr.w	fp, [sp, #32]
 800559c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8101 	beq.w	80057a6 <_dtoa_r+0xb76>
 80055a4:	2e00      	cmp	r6, #0
 80055a6:	dd05      	ble.n	80055b4 <_dtoa_r+0x984>
 80055a8:	4629      	mov	r1, r5
 80055aa:	4632      	mov	r2, r6
 80055ac:	4648      	mov	r0, r9
 80055ae:	f000 fc61 	bl	8005e74 <__lshift>
 80055b2:	4605      	mov	r5, r0
 80055b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d05c      	beq.n	8005674 <_dtoa_r+0xa44>
 80055ba:	4648      	mov	r0, r9
 80055bc:	6869      	ldr	r1, [r5, #4]
 80055be:	f000 fa09 	bl	80059d4 <_Balloc>
 80055c2:	4606      	mov	r6, r0
 80055c4:	b928      	cbnz	r0, 80055d2 <_dtoa_r+0x9a2>
 80055c6:	4602      	mov	r2, r0
 80055c8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80055cc:	4b80      	ldr	r3, [pc, #512]	@ (80057d0 <_dtoa_r+0xba0>)
 80055ce:	f7ff bb43 	b.w	8004c58 <_dtoa_r+0x28>
 80055d2:	692a      	ldr	r2, [r5, #16]
 80055d4:	f105 010c 	add.w	r1, r5, #12
 80055d8:	3202      	adds	r2, #2
 80055da:	0092      	lsls	r2, r2, #2
 80055dc:	300c      	adds	r0, #12
 80055de:	f001 ff63 	bl	80074a8 <memcpy>
 80055e2:	2201      	movs	r2, #1
 80055e4:	4631      	mov	r1, r6
 80055e6:	4648      	mov	r0, r9
 80055e8:	f000 fc44 	bl	8005e74 <__lshift>
 80055ec:	462f      	mov	r7, r5
 80055ee:	4605      	mov	r5, r0
 80055f0:	f10a 0301 	add.w	r3, sl, #1
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	eb0a 030b 	add.w	r3, sl, fp
 80055fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80055fc:	9b06      	ldr	r3, [sp, #24]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	9309      	str	r3, [sp, #36]	@ 0x24
 8005604:	9b04      	ldr	r3, [sp, #16]
 8005606:	4621      	mov	r1, r4
 8005608:	9803      	ldr	r0, [sp, #12]
 800560a:	f103 3bff 	add.w	fp, r3, #4294967295
 800560e:	f7ff fa87 	bl	8004b20 <quorem>
 8005612:	4603      	mov	r3, r0
 8005614:	4639      	mov	r1, r7
 8005616:	3330      	adds	r3, #48	@ 0x30
 8005618:	9006      	str	r0, [sp, #24]
 800561a:	9803      	ldr	r0, [sp, #12]
 800561c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800561e:	f000 fc95 	bl	8005f4c <__mcmp>
 8005622:	462a      	mov	r2, r5
 8005624:	9008      	str	r0, [sp, #32]
 8005626:	4621      	mov	r1, r4
 8005628:	4648      	mov	r0, r9
 800562a:	f000 fcab 	bl	8005f84 <__mdiff>
 800562e:	68c2      	ldr	r2, [r0, #12]
 8005630:	4606      	mov	r6, r0
 8005632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005634:	bb02      	cbnz	r2, 8005678 <_dtoa_r+0xa48>
 8005636:	4601      	mov	r1, r0
 8005638:	9803      	ldr	r0, [sp, #12]
 800563a:	f000 fc87 	bl	8005f4c <__mcmp>
 800563e:	4602      	mov	r2, r0
 8005640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005642:	4631      	mov	r1, r6
 8005644:	4648      	mov	r0, r9
 8005646:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800564a:	f000 fa03 	bl	8005a54 <_Bfree>
 800564e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005650:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005652:	9e04      	ldr	r6, [sp, #16]
 8005654:	ea42 0103 	orr.w	r1, r2, r3
 8005658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565a:	4319      	orrs	r1, r3
 800565c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800565e:	d10d      	bne.n	800567c <_dtoa_r+0xa4c>
 8005660:	2b39      	cmp	r3, #57	@ 0x39
 8005662:	d027      	beq.n	80056b4 <_dtoa_r+0xa84>
 8005664:	9a08      	ldr	r2, [sp, #32]
 8005666:	2a00      	cmp	r2, #0
 8005668:	dd01      	ble.n	800566e <_dtoa_r+0xa3e>
 800566a:	9b06      	ldr	r3, [sp, #24]
 800566c:	3331      	adds	r3, #49	@ 0x31
 800566e:	f88b 3000 	strb.w	r3, [fp]
 8005672:	e52e      	b.n	80050d2 <_dtoa_r+0x4a2>
 8005674:	4628      	mov	r0, r5
 8005676:	e7b9      	b.n	80055ec <_dtoa_r+0x9bc>
 8005678:	2201      	movs	r2, #1
 800567a:	e7e2      	b.n	8005642 <_dtoa_r+0xa12>
 800567c:	9908      	ldr	r1, [sp, #32]
 800567e:	2900      	cmp	r1, #0
 8005680:	db04      	blt.n	800568c <_dtoa_r+0xa5c>
 8005682:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005684:	4301      	orrs	r1, r0
 8005686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005688:	4301      	orrs	r1, r0
 800568a:	d120      	bne.n	80056ce <_dtoa_r+0xa9e>
 800568c:	2a00      	cmp	r2, #0
 800568e:	ddee      	ble.n	800566e <_dtoa_r+0xa3e>
 8005690:	2201      	movs	r2, #1
 8005692:	9903      	ldr	r1, [sp, #12]
 8005694:	4648      	mov	r0, r9
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	f000 fbec 	bl	8005e74 <__lshift>
 800569c:	4621      	mov	r1, r4
 800569e:	9003      	str	r0, [sp, #12]
 80056a0:	f000 fc54 	bl	8005f4c <__mcmp>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	dc02      	bgt.n	80056b0 <_dtoa_r+0xa80>
 80056aa:	d1e0      	bne.n	800566e <_dtoa_r+0xa3e>
 80056ac:	07da      	lsls	r2, r3, #31
 80056ae:	d5de      	bpl.n	800566e <_dtoa_r+0xa3e>
 80056b0:	2b39      	cmp	r3, #57	@ 0x39
 80056b2:	d1da      	bne.n	800566a <_dtoa_r+0xa3a>
 80056b4:	2339      	movs	r3, #57	@ 0x39
 80056b6:	f88b 3000 	strb.w	r3, [fp]
 80056ba:	4633      	mov	r3, r6
 80056bc:	461e      	mov	r6, r3
 80056be:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	2a39      	cmp	r2, #57	@ 0x39
 80056c6:	d04e      	beq.n	8005766 <_dtoa_r+0xb36>
 80056c8:	3201      	adds	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e501      	b.n	80050d2 <_dtoa_r+0x4a2>
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	dd03      	ble.n	80056da <_dtoa_r+0xaaa>
 80056d2:	2b39      	cmp	r3, #57	@ 0x39
 80056d4:	d0ee      	beq.n	80056b4 <_dtoa_r+0xa84>
 80056d6:	3301      	adds	r3, #1
 80056d8:	e7c9      	b.n	800566e <_dtoa_r+0xa3e>
 80056da:	9a04      	ldr	r2, [sp, #16]
 80056dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80056e2:	428a      	cmp	r2, r1
 80056e4:	d028      	beq.n	8005738 <_dtoa_r+0xb08>
 80056e6:	2300      	movs	r3, #0
 80056e8:	220a      	movs	r2, #10
 80056ea:	9903      	ldr	r1, [sp, #12]
 80056ec:	4648      	mov	r0, r9
 80056ee:	f000 f9d3 	bl	8005a98 <__multadd>
 80056f2:	42af      	cmp	r7, r5
 80056f4:	9003      	str	r0, [sp, #12]
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	f04f 020a 	mov.w	r2, #10
 80056fe:	4639      	mov	r1, r7
 8005700:	4648      	mov	r0, r9
 8005702:	d107      	bne.n	8005714 <_dtoa_r+0xae4>
 8005704:	f000 f9c8 	bl	8005a98 <__multadd>
 8005708:	4607      	mov	r7, r0
 800570a:	4605      	mov	r5, r0
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	3301      	adds	r3, #1
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	e777      	b.n	8005604 <_dtoa_r+0x9d4>
 8005714:	f000 f9c0 	bl	8005a98 <__multadd>
 8005718:	4629      	mov	r1, r5
 800571a:	4607      	mov	r7, r0
 800571c:	2300      	movs	r3, #0
 800571e:	220a      	movs	r2, #10
 8005720:	4648      	mov	r0, r9
 8005722:	f000 f9b9 	bl	8005a98 <__multadd>
 8005726:	4605      	mov	r5, r0
 8005728:	e7f0      	b.n	800570c <_dtoa_r+0xadc>
 800572a:	f1bb 0f00 	cmp.w	fp, #0
 800572e:	bfcc      	ite	gt
 8005730:	465e      	movgt	r6, fp
 8005732:	2601      	movle	r6, #1
 8005734:	2700      	movs	r7, #0
 8005736:	4456      	add	r6, sl
 8005738:	2201      	movs	r2, #1
 800573a:	9903      	ldr	r1, [sp, #12]
 800573c:	4648      	mov	r0, r9
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	f000 fb98 	bl	8005e74 <__lshift>
 8005744:	4621      	mov	r1, r4
 8005746:	9003      	str	r0, [sp, #12]
 8005748:	f000 fc00 	bl	8005f4c <__mcmp>
 800574c:	2800      	cmp	r0, #0
 800574e:	dcb4      	bgt.n	80056ba <_dtoa_r+0xa8a>
 8005750:	d102      	bne.n	8005758 <_dtoa_r+0xb28>
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	07db      	lsls	r3, r3, #31
 8005756:	d4b0      	bmi.n	80056ba <_dtoa_r+0xa8a>
 8005758:	4633      	mov	r3, r6
 800575a:	461e      	mov	r6, r3
 800575c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005760:	2a30      	cmp	r2, #48	@ 0x30
 8005762:	d0fa      	beq.n	800575a <_dtoa_r+0xb2a>
 8005764:	e4b5      	b.n	80050d2 <_dtoa_r+0x4a2>
 8005766:	459a      	cmp	sl, r3
 8005768:	d1a8      	bne.n	80056bc <_dtoa_r+0xa8c>
 800576a:	2331      	movs	r3, #49	@ 0x31
 800576c:	f108 0801 	add.w	r8, r8, #1
 8005770:	f88a 3000 	strb.w	r3, [sl]
 8005774:	e4ad      	b.n	80050d2 <_dtoa_r+0x4a2>
 8005776:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005778:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80057d4 <_dtoa_r+0xba4>
 800577c:	b11b      	cbz	r3, 8005786 <_dtoa_r+0xb56>
 800577e:	f10a 0308 	add.w	r3, sl, #8
 8005782:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4650      	mov	r0, sl
 8005788:	b017      	add	sp, #92	@ 0x5c
 800578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005790:	2b01      	cmp	r3, #1
 8005792:	f77f ae2e 	ble.w	80053f2 <_dtoa_r+0x7c2>
 8005796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005798:	930a      	str	r3, [sp, #40]	@ 0x28
 800579a:	2001      	movs	r0, #1
 800579c:	e64d      	b.n	800543a <_dtoa_r+0x80a>
 800579e:	f1bb 0f00 	cmp.w	fp, #0
 80057a2:	f77f aed9 	ble.w	8005558 <_dtoa_r+0x928>
 80057a6:	4656      	mov	r6, sl
 80057a8:	4621      	mov	r1, r4
 80057aa:	9803      	ldr	r0, [sp, #12]
 80057ac:	f7ff f9b8 	bl	8004b20 <quorem>
 80057b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80057b4:	f806 3b01 	strb.w	r3, [r6], #1
 80057b8:	eba6 020a 	sub.w	r2, r6, sl
 80057bc:	4593      	cmp	fp, r2
 80057be:	ddb4      	ble.n	800572a <_dtoa_r+0xafa>
 80057c0:	2300      	movs	r3, #0
 80057c2:	220a      	movs	r2, #10
 80057c4:	4648      	mov	r0, r9
 80057c6:	9903      	ldr	r1, [sp, #12]
 80057c8:	f000 f966 	bl	8005a98 <__multadd>
 80057cc:	9003      	str	r0, [sp, #12]
 80057ce:	e7eb      	b.n	80057a8 <_dtoa_r+0xb78>
 80057d0:	080083c7 	.word	0x080083c7
 80057d4:	08008362 	.word	0x08008362

080057d8 <_free_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4605      	mov	r5, r0
 80057dc:	2900      	cmp	r1, #0
 80057de:	d040      	beq.n	8005862 <_free_r+0x8a>
 80057e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e4:	1f0c      	subs	r4, r1, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bfb8      	it	lt
 80057ea:	18e4      	addlt	r4, r4, r3
 80057ec:	f000 f8e6 	bl	80059bc <__malloc_lock>
 80057f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005864 <_free_r+0x8c>)
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	b933      	cbnz	r3, 8005804 <_free_r+0x2c>
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	6014      	str	r4, [r2, #0]
 80057fa:	4628      	mov	r0, r5
 80057fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005800:	f000 b8e2 	b.w	80059c8 <__malloc_unlock>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d908      	bls.n	800581a <_free_r+0x42>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	1821      	adds	r1, r4, r0
 800580c:	428b      	cmp	r3, r1
 800580e:	bf01      	itttt	eq
 8005810:	6819      	ldreq	r1, [r3, #0]
 8005812:	685b      	ldreq	r3, [r3, #4]
 8005814:	1809      	addeq	r1, r1, r0
 8005816:	6021      	streq	r1, [r4, #0]
 8005818:	e7ed      	b.n	80057f6 <_free_r+0x1e>
 800581a:	461a      	mov	r2, r3
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b10b      	cbz	r3, 8005824 <_free_r+0x4c>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d9fa      	bls.n	800581a <_free_r+0x42>
 8005824:	6811      	ldr	r1, [r2, #0]
 8005826:	1850      	adds	r0, r2, r1
 8005828:	42a0      	cmp	r0, r4
 800582a:	d10b      	bne.n	8005844 <_free_r+0x6c>
 800582c:	6820      	ldr	r0, [r4, #0]
 800582e:	4401      	add	r1, r0
 8005830:	1850      	adds	r0, r2, r1
 8005832:	4283      	cmp	r3, r0
 8005834:	6011      	str	r1, [r2, #0]
 8005836:	d1e0      	bne.n	80057fa <_free_r+0x22>
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4408      	add	r0, r1
 800583e:	6010      	str	r0, [r2, #0]
 8005840:	6053      	str	r3, [r2, #4]
 8005842:	e7da      	b.n	80057fa <_free_r+0x22>
 8005844:	d902      	bls.n	800584c <_free_r+0x74>
 8005846:	230c      	movs	r3, #12
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	e7d6      	b.n	80057fa <_free_r+0x22>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	1821      	adds	r1, r4, r0
 8005850:	428b      	cmp	r3, r1
 8005852:	bf01      	itttt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	1809      	addeq	r1, r1, r0
 800585a:	6021      	streq	r1, [r4, #0]
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	6054      	str	r4, [r2, #4]
 8005860:	e7cb      	b.n	80057fa <_free_r+0x22>
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	2000042c 	.word	0x2000042c

08005868 <malloc>:
 8005868:	4b02      	ldr	r3, [pc, #8]	@ (8005874 <malloc+0xc>)
 800586a:	4601      	mov	r1, r0
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	f000 b825 	b.w	80058bc <_malloc_r>
 8005872:	bf00      	nop
 8005874:	20000020 	.word	0x20000020

08005878 <sbrk_aligned>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4e0f      	ldr	r6, [pc, #60]	@ (80058b8 <sbrk_aligned+0x40>)
 800587c:	460c      	mov	r4, r1
 800587e:	6831      	ldr	r1, [r6, #0]
 8005880:	4605      	mov	r5, r0
 8005882:	b911      	cbnz	r1, 800588a <sbrk_aligned+0x12>
 8005884:	f001 fe00 	bl	8007488 <_sbrk_r>
 8005888:	6030      	str	r0, [r6, #0]
 800588a:	4621      	mov	r1, r4
 800588c:	4628      	mov	r0, r5
 800588e:	f001 fdfb 	bl	8007488 <_sbrk_r>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d103      	bne.n	800589e <sbrk_aligned+0x26>
 8005896:	f04f 34ff 	mov.w	r4, #4294967295
 800589a:	4620      	mov	r0, r4
 800589c:	bd70      	pop	{r4, r5, r6, pc}
 800589e:	1cc4      	adds	r4, r0, #3
 80058a0:	f024 0403 	bic.w	r4, r4, #3
 80058a4:	42a0      	cmp	r0, r4
 80058a6:	d0f8      	beq.n	800589a <sbrk_aligned+0x22>
 80058a8:	1a21      	subs	r1, r4, r0
 80058aa:	4628      	mov	r0, r5
 80058ac:	f001 fdec 	bl	8007488 <_sbrk_r>
 80058b0:	3001      	adds	r0, #1
 80058b2:	d1f2      	bne.n	800589a <sbrk_aligned+0x22>
 80058b4:	e7ef      	b.n	8005896 <sbrk_aligned+0x1e>
 80058b6:	bf00      	nop
 80058b8:	20000428 	.word	0x20000428

080058bc <_malloc_r>:
 80058bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c0:	1ccd      	adds	r5, r1, #3
 80058c2:	f025 0503 	bic.w	r5, r5, #3
 80058c6:	3508      	adds	r5, #8
 80058c8:	2d0c      	cmp	r5, #12
 80058ca:	bf38      	it	cc
 80058cc:	250c      	movcc	r5, #12
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	4606      	mov	r6, r0
 80058d2:	db01      	blt.n	80058d8 <_malloc_r+0x1c>
 80058d4:	42a9      	cmp	r1, r5
 80058d6:	d904      	bls.n	80058e2 <_malloc_r+0x26>
 80058d8:	230c      	movs	r3, #12
 80058da:	6033      	str	r3, [r6, #0]
 80058dc:	2000      	movs	r0, #0
 80058de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059b8 <_malloc_r+0xfc>
 80058e6:	f000 f869 	bl	80059bc <__malloc_lock>
 80058ea:	f8d8 3000 	ldr.w	r3, [r8]
 80058ee:	461c      	mov	r4, r3
 80058f0:	bb44      	cbnz	r4, 8005944 <_malloc_r+0x88>
 80058f2:	4629      	mov	r1, r5
 80058f4:	4630      	mov	r0, r6
 80058f6:	f7ff ffbf 	bl	8005878 <sbrk_aligned>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	4604      	mov	r4, r0
 80058fe:	d158      	bne.n	80059b2 <_malloc_r+0xf6>
 8005900:	f8d8 4000 	ldr.w	r4, [r8]
 8005904:	4627      	mov	r7, r4
 8005906:	2f00      	cmp	r7, #0
 8005908:	d143      	bne.n	8005992 <_malloc_r+0xd6>
 800590a:	2c00      	cmp	r4, #0
 800590c:	d04b      	beq.n	80059a6 <_malloc_r+0xea>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	4639      	mov	r1, r7
 8005912:	4630      	mov	r0, r6
 8005914:	eb04 0903 	add.w	r9, r4, r3
 8005918:	f001 fdb6 	bl	8007488 <_sbrk_r>
 800591c:	4581      	cmp	r9, r0
 800591e:	d142      	bne.n	80059a6 <_malloc_r+0xea>
 8005920:	6821      	ldr	r1, [r4, #0]
 8005922:	4630      	mov	r0, r6
 8005924:	1a6d      	subs	r5, r5, r1
 8005926:	4629      	mov	r1, r5
 8005928:	f7ff ffa6 	bl	8005878 <sbrk_aligned>
 800592c:	3001      	adds	r0, #1
 800592e:	d03a      	beq.n	80059a6 <_malloc_r+0xea>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	442b      	add	r3, r5
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	f8d8 3000 	ldr.w	r3, [r8]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	bb62      	cbnz	r2, 8005998 <_malloc_r+0xdc>
 800593e:	f8c8 7000 	str.w	r7, [r8]
 8005942:	e00f      	b.n	8005964 <_malloc_r+0xa8>
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	1b52      	subs	r2, r2, r5
 8005948:	d420      	bmi.n	800598c <_malloc_r+0xd0>
 800594a:	2a0b      	cmp	r2, #11
 800594c:	d917      	bls.n	800597e <_malloc_r+0xc2>
 800594e:	1961      	adds	r1, r4, r5
 8005950:	42a3      	cmp	r3, r4
 8005952:	6025      	str	r5, [r4, #0]
 8005954:	bf18      	it	ne
 8005956:	6059      	strne	r1, [r3, #4]
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	bf08      	it	eq
 800595c:	f8c8 1000 	streq.w	r1, [r8]
 8005960:	5162      	str	r2, [r4, r5]
 8005962:	604b      	str	r3, [r1, #4]
 8005964:	4630      	mov	r0, r6
 8005966:	f000 f82f 	bl	80059c8 <__malloc_unlock>
 800596a:	f104 000b 	add.w	r0, r4, #11
 800596e:	1d23      	adds	r3, r4, #4
 8005970:	f020 0007 	bic.w	r0, r0, #7
 8005974:	1ac2      	subs	r2, r0, r3
 8005976:	bf1c      	itt	ne
 8005978:	1a1b      	subne	r3, r3, r0
 800597a:	50a3      	strne	r3, [r4, r2]
 800597c:	e7af      	b.n	80058de <_malloc_r+0x22>
 800597e:	6862      	ldr	r2, [r4, #4]
 8005980:	42a3      	cmp	r3, r4
 8005982:	bf0c      	ite	eq
 8005984:	f8c8 2000 	streq.w	r2, [r8]
 8005988:	605a      	strne	r2, [r3, #4]
 800598a:	e7eb      	b.n	8005964 <_malloc_r+0xa8>
 800598c:	4623      	mov	r3, r4
 800598e:	6864      	ldr	r4, [r4, #4]
 8005990:	e7ae      	b.n	80058f0 <_malloc_r+0x34>
 8005992:	463c      	mov	r4, r7
 8005994:	687f      	ldr	r7, [r7, #4]
 8005996:	e7b6      	b.n	8005906 <_malloc_r+0x4a>
 8005998:	461a      	mov	r2, r3
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	42a3      	cmp	r3, r4
 800599e:	d1fb      	bne.n	8005998 <_malloc_r+0xdc>
 80059a0:	2300      	movs	r3, #0
 80059a2:	6053      	str	r3, [r2, #4]
 80059a4:	e7de      	b.n	8005964 <_malloc_r+0xa8>
 80059a6:	230c      	movs	r3, #12
 80059a8:	4630      	mov	r0, r6
 80059aa:	6033      	str	r3, [r6, #0]
 80059ac:	f000 f80c 	bl	80059c8 <__malloc_unlock>
 80059b0:	e794      	b.n	80058dc <_malloc_r+0x20>
 80059b2:	6005      	str	r5, [r0, #0]
 80059b4:	e7d6      	b.n	8005964 <_malloc_r+0xa8>
 80059b6:	bf00      	nop
 80059b8:	2000042c 	.word	0x2000042c

080059bc <__malloc_lock>:
 80059bc:	4801      	ldr	r0, [pc, #4]	@ (80059c4 <__malloc_lock+0x8>)
 80059be:	f7ff b87c 	b.w	8004aba <__retarget_lock_acquire_recursive>
 80059c2:	bf00      	nop
 80059c4:	20000424 	.word	0x20000424

080059c8 <__malloc_unlock>:
 80059c8:	4801      	ldr	r0, [pc, #4]	@ (80059d0 <__malloc_unlock+0x8>)
 80059ca:	f7ff b877 	b.w	8004abc <__retarget_lock_release_recursive>
 80059ce:	bf00      	nop
 80059d0:	20000424 	.word	0x20000424

080059d4 <_Balloc>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	69c6      	ldr	r6, [r0, #28]
 80059d8:	4604      	mov	r4, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	b976      	cbnz	r6, 80059fc <_Balloc+0x28>
 80059de:	2010      	movs	r0, #16
 80059e0:	f7ff ff42 	bl	8005868 <malloc>
 80059e4:	4602      	mov	r2, r0
 80059e6:	61e0      	str	r0, [r4, #28]
 80059e8:	b920      	cbnz	r0, 80059f4 <_Balloc+0x20>
 80059ea:	216b      	movs	r1, #107	@ 0x6b
 80059ec:	4b17      	ldr	r3, [pc, #92]	@ (8005a4c <_Balloc+0x78>)
 80059ee:	4818      	ldr	r0, [pc, #96]	@ (8005a50 <_Balloc+0x7c>)
 80059f0:	f7ff f878 	bl	8004ae4 <__assert_func>
 80059f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059f8:	6006      	str	r6, [r0, #0]
 80059fa:	60c6      	str	r6, [r0, #12]
 80059fc:	69e6      	ldr	r6, [r4, #28]
 80059fe:	68f3      	ldr	r3, [r6, #12]
 8005a00:	b183      	cbz	r3, 8005a24 <_Balloc+0x50>
 8005a02:	69e3      	ldr	r3, [r4, #28]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a0a:	b9b8      	cbnz	r0, 8005a3c <_Balloc+0x68>
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a12:	1d72      	adds	r2, r6, #5
 8005a14:	4620      	mov	r0, r4
 8005a16:	0092      	lsls	r2, r2, #2
 8005a18:	f001 fd61 	bl	80074de <_calloc_r>
 8005a1c:	b160      	cbz	r0, 8005a38 <_Balloc+0x64>
 8005a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a22:	e00e      	b.n	8005a42 <_Balloc+0x6e>
 8005a24:	2221      	movs	r2, #33	@ 0x21
 8005a26:	2104      	movs	r1, #4
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f001 fd58 	bl	80074de <_calloc_r>
 8005a2e:	69e3      	ldr	r3, [r4, #28]
 8005a30:	60f0      	str	r0, [r6, #12]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e4      	bne.n	8005a02 <_Balloc+0x2e>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	6802      	ldr	r2, [r0, #0]
 8005a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a42:	2300      	movs	r3, #0
 8005a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a48:	e7f7      	b.n	8005a3a <_Balloc+0x66>
 8005a4a:	bf00      	nop
 8005a4c:	0800827e 	.word	0x0800827e
 8005a50:	080083d8 	.word	0x080083d8

08005a54 <_Bfree>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	69c6      	ldr	r6, [r0, #28]
 8005a58:	4605      	mov	r5, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	b976      	cbnz	r6, 8005a7c <_Bfree+0x28>
 8005a5e:	2010      	movs	r0, #16
 8005a60:	f7ff ff02 	bl	8005868 <malloc>
 8005a64:	4602      	mov	r2, r0
 8005a66:	61e8      	str	r0, [r5, #28]
 8005a68:	b920      	cbnz	r0, 8005a74 <_Bfree+0x20>
 8005a6a:	218f      	movs	r1, #143	@ 0x8f
 8005a6c:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <_Bfree+0x3c>)
 8005a6e:	4809      	ldr	r0, [pc, #36]	@ (8005a94 <_Bfree+0x40>)
 8005a70:	f7ff f838 	bl	8004ae4 <__assert_func>
 8005a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a78:	6006      	str	r6, [r0, #0]
 8005a7a:	60c6      	str	r6, [r0, #12]
 8005a7c:	b13c      	cbz	r4, 8005a8e <_Bfree+0x3a>
 8005a7e:	69eb      	ldr	r3, [r5, #28]
 8005a80:	6862      	ldr	r2, [r4, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a88:	6021      	str	r1, [r4, #0]
 8005a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	0800827e 	.word	0x0800827e
 8005a94:	080083d8 	.word	0x080083d8

08005a98 <__multadd>:
 8005a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	461e      	mov	r6, r3
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	690d      	ldr	r5, [r1, #16]
 8005aa6:	f101 0c14 	add.w	ip, r1, #20
 8005aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8005aae:	3001      	adds	r0, #1
 8005ab0:	b299      	uxth	r1, r3
 8005ab2:	fb02 6101 	mla	r1, r2, r1, r6
 8005ab6:	0c1e      	lsrs	r6, r3, #16
 8005ab8:	0c0b      	lsrs	r3, r1, #16
 8005aba:	fb02 3306 	mla	r3, r2, r6, r3
 8005abe:	b289      	uxth	r1, r1
 8005ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ac4:	4285      	cmp	r5, r0
 8005ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005aca:	f84c 1b04 	str.w	r1, [ip], #4
 8005ace:	dcec      	bgt.n	8005aaa <__multadd+0x12>
 8005ad0:	b30e      	cbz	r6, 8005b16 <__multadd+0x7e>
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	dc19      	bgt.n	8005b0c <__multadd+0x74>
 8005ad8:	6861      	ldr	r1, [r4, #4]
 8005ada:	4638      	mov	r0, r7
 8005adc:	3101      	adds	r1, #1
 8005ade:	f7ff ff79 	bl	80059d4 <_Balloc>
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	b928      	cbnz	r0, 8005af2 <__multadd+0x5a>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	21ba      	movs	r1, #186	@ 0xba
 8005aea:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <__multadd+0x84>)
 8005aec:	480c      	ldr	r0, [pc, #48]	@ (8005b20 <__multadd+0x88>)
 8005aee:	f7fe fff9 	bl	8004ae4 <__assert_func>
 8005af2:	6922      	ldr	r2, [r4, #16]
 8005af4:	f104 010c 	add.w	r1, r4, #12
 8005af8:	3202      	adds	r2, #2
 8005afa:	0092      	lsls	r2, r2, #2
 8005afc:	300c      	adds	r0, #12
 8005afe:	f001 fcd3 	bl	80074a8 <memcpy>
 8005b02:	4621      	mov	r1, r4
 8005b04:	4638      	mov	r0, r7
 8005b06:	f7ff ffa5 	bl	8005a54 <_Bfree>
 8005b0a:	4644      	mov	r4, r8
 8005b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b10:	3501      	adds	r5, #1
 8005b12:	615e      	str	r6, [r3, #20]
 8005b14:	6125      	str	r5, [r4, #16]
 8005b16:	4620      	mov	r0, r4
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	080083c7 	.word	0x080083c7
 8005b20:	080083d8 	.word	0x080083d8

08005b24 <__s2b>:
 8005b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	4615      	mov	r5, r2
 8005b2a:	2209      	movs	r2, #9
 8005b2c:	461f      	mov	r7, r3
 8005b2e:	3308      	adds	r3, #8
 8005b30:	460c      	mov	r4, r1
 8005b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b36:	4606      	mov	r6, r0
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	db09      	blt.n	8005b54 <__s2b+0x30>
 8005b40:	4630      	mov	r0, r6
 8005b42:	f7ff ff47 	bl	80059d4 <_Balloc>
 8005b46:	b940      	cbnz	r0, 8005b5a <__s2b+0x36>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	21d3      	movs	r1, #211	@ 0xd3
 8005b4c:	4b18      	ldr	r3, [pc, #96]	@ (8005bb0 <__s2b+0x8c>)
 8005b4e:	4819      	ldr	r0, [pc, #100]	@ (8005bb4 <__s2b+0x90>)
 8005b50:	f7fe ffc8 	bl	8004ae4 <__assert_func>
 8005b54:	0052      	lsls	r2, r2, #1
 8005b56:	3101      	adds	r1, #1
 8005b58:	e7f0      	b.n	8005b3c <__s2b+0x18>
 8005b5a:	9b08      	ldr	r3, [sp, #32]
 8005b5c:	2d09      	cmp	r5, #9
 8005b5e:	6143      	str	r3, [r0, #20]
 8005b60:	f04f 0301 	mov.w	r3, #1
 8005b64:	6103      	str	r3, [r0, #16]
 8005b66:	dd16      	ble.n	8005b96 <__s2b+0x72>
 8005b68:	f104 0909 	add.w	r9, r4, #9
 8005b6c:	46c8      	mov	r8, r9
 8005b6e:	442c      	add	r4, r5
 8005b70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b74:	4601      	mov	r1, r0
 8005b76:	220a      	movs	r2, #10
 8005b78:	4630      	mov	r0, r6
 8005b7a:	3b30      	subs	r3, #48	@ 0x30
 8005b7c:	f7ff ff8c 	bl	8005a98 <__multadd>
 8005b80:	45a0      	cmp	r8, r4
 8005b82:	d1f5      	bne.n	8005b70 <__s2b+0x4c>
 8005b84:	f1a5 0408 	sub.w	r4, r5, #8
 8005b88:	444c      	add	r4, r9
 8005b8a:	1b2d      	subs	r5, r5, r4
 8005b8c:	1963      	adds	r3, r4, r5
 8005b8e:	42bb      	cmp	r3, r7
 8005b90:	db04      	blt.n	8005b9c <__s2b+0x78>
 8005b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b96:	2509      	movs	r5, #9
 8005b98:	340a      	adds	r4, #10
 8005b9a:	e7f6      	b.n	8005b8a <__s2b+0x66>
 8005b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ba0:	4601      	mov	r1, r0
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	3b30      	subs	r3, #48	@ 0x30
 8005ba8:	f7ff ff76 	bl	8005a98 <__multadd>
 8005bac:	e7ee      	b.n	8005b8c <__s2b+0x68>
 8005bae:	bf00      	nop
 8005bb0:	080083c7 	.word	0x080083c7
 8005bb4:	080083d8 	.word	0x080083d8

08005bb8 <__hi0bits>:
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005bbe:	bf3a      	itte	cc
 8005bc0:	0403      	lslcc	r3, r0, #16
 8005bc2:	2010      	movcc	r0, #16
 8005bc4:	2000      	movcs	r0, #0
 8005bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bca:	bf3c      	itt	cc
 8005bcc:	021b      	lslcc	r3, r3, #8
 8005bce:	3008      	addcc	r0, #8
 8005bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bd4:	bf3c      	itt	cc
 8005bd6:	011b      	lslcc	r3, r3, #4
 8005bd8:	3004      	addcc	r0, #4
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bde:	bf3c      	itt	cc
 8005be0:	009b      	lslcc	r3, r3, #2
 8005be2:	3002      	addcc	r0, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	db05      	blt.n	8005bf4 <__hi0bits+0x3c>
 8005be8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005bec:	f100 0001 	add.w	r0, r0, #1
 8005bf0:	bf08      	it	eq
 8005bf2:	2020      	moveq	r0, #32
 8005bf4:	4770      	bx	lr

08005bf6 <__lo0bits>:
 8005bf6:	6803      	ldr	r3, [r0, #0]
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	f013 0007 	ands.w	r0, r3, #7
 8005bfe:	d00b      	beq.n	8005c18 <__lo0bits+0x22>
 8005c00:	07d9      	lsls	r1, r3, #31
 8005c02:	d421      	bmi.n	8005c48 <__lo0bits+0x52>
 8005c04:	0798      	lsls	r0, r3, #30
 8005c06:	bf49      	itett	mi
 8005c08:	085b      	lsrmi	r3, r3, #1
 8005c0a:	089b      	lsrpl	r3, r3, #2
 8005c0c:	2001      	movmi	r0, #1
 8005c0e:	6013      	strmi	r3, [r2, #0]
 8005c10:	bf5c      	itt	pl
 8005c12:	2002      	movpl	r0, #2
 8005c14:	6013      	strpl	r3, [r2, #0]
 8005c16:	4770      	bx	lr
 8005c18:	b299      	uxth	r1, r3
 8005c1a:	b909      	cbnz	r1, 8005c20 <__lo0bits+0x2a>
 8005c1c:	2010      	movs	r0, #16
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	b2d9      	uxtb	r1, r3
 8005c22:	b909      	cbnz	r1, 8005c28 <__lo0bits+0x32>
 8005c24:	3008      	adds	r0, #8
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	0719      	lsls	r1, r3, #28
 8005c2a:	bf04      	itt	eq
 8005c2c:	091b      	lsreq	r3, r3, #4
 8005c2e:	3004      	addeq	r0, #4
 8005c30:	0799      	lsls	r1, r3, #30
 8005c32:	bf04      	itt	eq
 8005c34:	089b      	lsreq	r3, r3, #2
 8005c36:	3002      	addeq	r0, #2
 8005c38:	07d9      	lsls	r1, r3, #31
 8005c3a:	d403      	bmi.n	8005c44 <__lo0bits+0x4e>
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	f100 0001 	add.w	r0, r0, #1
 8005c42:	d003      	beq.n	8005c4c <__lo0bits+0x56>
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4770      	bx	lr
 8005c48:	2000      	movs	r0, #0
 8005c4a:	4770      	bx	lr
 8005c4c:	2020      	movs	r0, #32
 8005c4e:	4770      	bx	lr

08005c50 <__i2b>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	2101      	movs	r1, #1
 8005c56:	f7ff febd 	bl	80059d4 <_Balloc>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	b928      	cbnz	r0, 8005c6a <__i2b+0x1a>
 8005c5e:	f240 1145 	movw	r1, #325	@ 0x145
 8005c62:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <__i2b+0x24>)
 8005c64:	4804      	ldr	r0, [pc, #16]	@ (8005c78 <__i2b+0x28>)
 8005c66:	f7fe ff3d 	bl	8004ae4 <__assert_func>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	6144      	str	r4, [r0, #20]
 8005c6e:	6103      	str	r3, [r0, #16]
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	080083c7 	.word	0x080083c7
 8005c78:	080083d8 	.word	0x080083d8

08005c7c <__multiply>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	4617      	mov	r7, r2
 8005c82:	690a      	ldr	r2, [r1, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4689      	mov	r9, r1
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	bfa2      	ittt	ge
 8005c8c:	463b      	movge	r3, r7
 8005c8e:	460f      	movge	r7, r1
 8005c90:	4699      	movge	r9, r3
 8005c92:	693d      	ldr	r5, [r7, #16]
 8005c94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	eb05 060a 	add.w	r6, r5, sl
 8005ca0:	42b3      	cmp	r3, r6
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	bfb8      	it	lt
 8005ca6:	3101      	addlt	r1, #1
 8005ca8:	f7ff fe94 	bl	80059d4 <_Balloc>
 8005cac:	b930      	cbnz	r0, 8005cbc <__multiply+0x40>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005cb4:	4b40      	ldr	r3, [pc, #256]	@ (8005db8 <__multiply+0x13c>)
 8005cb6:	4841      	ldr	r0, [pc, #260]	@ (8005dbc <__multiply+0x140>)
 8005cb8:	f7fe ff14 	bl	8004ae4 <__assert_func>
 8005cbc:	f100 0414 	add.w	r4, r0, #20
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005cc8:	4573      	cmp	r3, lr
 8005cca:	d320      	bcc.n	8005d0e <__multiply+0x92>
 8005ccc:	f107 0814 	add.w	r8, r7, #20
 8005cd0:	f109 0114 	add.w	r1, r9, #20
 8005cd4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005cd8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005cdc:	9302      	str	r3, [sp, #8]
 8005cde:	1beb      	subs	r3, r5, r7
 8005ce0:	3b15      	subs	r3, #21
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	3715      	adds	r7, #21
 8005cea:	42bd      	cmp	r5, r7
 8005cec:	bf38      	it	cc
 8005cee:	2304      	movcc	r3, #4
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	9b02      	ldr	r3, [sp, #8]
 8005cf4:	9103      	str	r1, [sp, #12]
 8005cf6:	428b      	cmp	r3, r1
 8005cf8:	d80c      	bhi.n	8005d14 <__multiply+0x98>
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	dd03      	ble.n	8005d06 <__multiply+0x8a>
 8005cfe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d055      	beq.n	8005db2 <__multiply+0x136>
 8005d06:	6106      	str	r6, [r0, #16]
 8005d08:	b005      	add	sp, #20
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	f843 2b04 	str.w	r2, [r3], #4
 8005d12:	e7d9      	b.n	8005cc8 <__multiply+0x4c>
 8005d14:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d18:	f1ba 0f00 	cmp.w	sl, #0
 8005d1c:	d01f      	beq.n	8005d5e <__multiply+0xe2>
 8005d1e:	46c4      	mov	ip, r8
 8005d20:	46a1      	mov	r9, r4
 8005d22:	2700      	movs	r7, #0
 8005d24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d28:	f8d9 3000 	ldr.w	r3, [r9]
 8005d2c:	fa1f fb82 	uxth.w	fp, r2
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d36:	443b      	add	r3, r7
 8005d38:	f8d9 7000 	ldr.w	r7, [r9]
 8005d3c:	0c12      	lsrs	r2, r2, #16
 8005d3e:	0c3f      	lsrs	r7, r7, #16
 8005d40:	fb0a 7202 	mla	r2, sl, r2, r7
 8005d44:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d4e:	4565      	cmp	r5, ip
 8005d50:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005d54:	f849 3b04 	str.w	r3, [r9], #4
 8005d58:	d8e4      	bhi.n	8005d24 <__multiply+0xa8>
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	50e7      	str	r7, [r4, r3]
 8005d5e:	9b03      	ldr	r3, [sp, #12]
 8005d60:	3104      	adds	r1, #4
 8005d62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d66:	f1b9 0f00 	cmp.w	r9, #0
 8005d6a:	d020      	beq.n	8005dae <__multiply+0x132>
 8005d6c:	4647      	mov	r7, r8
 8005d6e:	46a4      	mov	ip, r4
 8005d70:	f04f 0a00 	mov.w	sl, #0
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	f8b7 b000 	ldrh.w	fp, [r7]
 8005d7a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	fb09 220b 	mla	r2, r9, fp, r2
 8005d84:	4452      	add	r2, sl
 8005d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8a:	f84c 3b04 	str.w	r3, [ip], #4
 8005d8e:	f857 3b04 	ldr.w	r3, [r7], #4
 8005d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d96:	f8bc 3000 	ldrh.w	r3, [ip]
 8005d9a:	42bd      	cmp	r5, r7
 8005d9c:	fb09 330a 	mla	r3, r9, sl, r3
 8005da0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005da4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005da8:	d8e5      	bhi.n	8005d76 <__multiply+0xfa>
 8005daa:	9a01      	ldr	r2, [sp, #4]
 8005dac:	50a3      	str	r3, [r4, r2]
 8005dae:	3404      	adds	r4, #4
 8005db0:	e79f      	b.n	8005cf2 <__multiply+0x76>
 8005db2:	3e01      	subs	r6, #1
 8005db4:	e7a1      	b.n	8005cfa <__multiply+0x7e>
 8005db6:	bf00      	nop
 8005db8:	080083c7 	.word	0x080083c7
 8005dbc:	080083d8 	.word	0x080083d8

08005dc0 <__pow5mult>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	4615      	mov	r5, r2
 8005dc6:	f012 0203 	ands.w	r2, r2, #3
 8005dca:	4607      	mov	r7, r0
 8005dcc:	460e      	mov	r6, r1
 8005dce:	d007      	beq.n	8005de0 <__pow5mult+0x20>
 8005dd0:	4c25      	ldr	r4, [pc, #148]	@ (8005e68 <__pow5mult+0xa8>)
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dda:	f7ff fe5d 	bl	8005a98 <__multadd>
 8005dde:	4606      	mov	r6, r0
 8005de0:	10ad      	asrs	r5, r5, #2
 8005de2:	d03d      	beq.n	8005e60 <__pow5mult+0xa0>
 8005de4:	69fc      	ldr	r4, [r7, #28]
 8005de6:	b97c      	cbnz	r4, 8005e08 <__pow5mult+0x48>
 8005de8:	2010      	movs	r0, #16
 8005dea:	f7ff fd3d 	bl	8005868 <malloc>
 8005dee:	4602      	mov	r2, r0
 8005df0:	61f8      	str	r0, [r7, #28]
 8005df2:	b928      	cbnz	r0, 8005e00 <__pow5mult+0x40>
 8005df4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005df8:	4b1c      	ldr	r3, [pc, #112]	@ (8005e6c <__pow5mult+0xac>)
 8005dfa:	481d      	ldr	r0, [pc, #116]	@ (8005e70 <__pow5mult+0xb0>)
 8005dfc:	f7fe fe72 	bl	8004ae4 <__assert_func>
 8005e00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e04:	6004      	str	r4, [r0, #0]
 8005e06:	60c4      	str	r4, [r0, #12]
 8005e08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e10:	b94c      	cbnz	r4, 8005e26 <__pow5mult+0x66>
 8005e12:	f240 2171 	movw	r1, #625	@ 0x271
 8005e16:	4638      	mov	r0, r7
 8005e18:	f7ff ff1a 	bl	8005c50 <__i2b>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e24:	6003      	str	r3, [r0, #0]
 8005e26:	f04f 0900 	mov.w	r9, #0
 8005e2a:	07eb      	lsls	r3, r5, #31
 8005e2c:	d50a      	bpl.n	8005e44 <__pow5mult+0x84>
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4622      	mov	r2, r4
 8005e32:	4638      	mov	r0, r7
 8005e34:	f7ff ff22 	bl	8005c7c <__multiply>
 8005e38:	4680      	mov	r8, r0
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f7ff fe09 	bl	8005a54 <_Bfree>
 8005e42:	4646      	mov	r6, r8
 8005e44:	106d      	asrs	r5, r5, #1
 8005e46:	d00b      	beq.n	8005e60 <__pow5mult+0xa0>
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	b938      	cbnz	r0, 8005e5c <__pow5mult+0x9c>
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff ff13 	bl	8005c7c <__multiply>
 8005e56:	6020      	str	r0, [r4, #0]
 8005e58:	f8c0 9000 	str.w	r9, [r0]
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	e7e4      	b.n	8005e2a <__pow5mult+0x6a>
 8005e60:	4630      	mov	r0, r6
 8005e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e66:	bf00      	nop
 8005e68:	080084ac 	.word	0x080084ac
 8005e6c:	0800827e 	.word	0x0800827e
 8005e70:	080083d8 	.word	0x080083d8

08005e74 <__lshift>:
 8005e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e78:	460c      	mov	r4, r1
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	4691      	mov	r9, r2
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	6849      	ldr	r1, [r1, #4]
 8005e82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e86:	68a3      	ldr	r3, [r4, #8]
 8005e88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e8c:	f108 0601 	add.w	r6, r8, #1
 8005e90:	42b3      	cmp	r3, r6
 8005e92:	db0b      	blt.n	8005eac <__lshift+0x38>
 8005e94:	4638      	mov	r0, r7
 8005e96:	f7ff fd9d 	bl	80059d4 <_Balloc>
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	b948      	cbnz	r0, 8005eb2 <__lshift+0x3e>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ea4:	4b27      	ldr	r3, [pc, #156]	@ (8005f44 <__lshift+0xd0>)
 8005ea6:	4828      	ldr	r0, [pc, #160]	@ (8005f48 <__lshift+0xd4>)
 8005ea8:	f7fe fe1c 	bl	8004ae4 <__assert_func>
 8005eac:	3101      	adds	r1, #1
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	e7ee      	b.n	8005e90 <__lshift+0x1c>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f100 0114 	add.w	r1, r0, #20
 8005eb8:	f100 0210 	add.w	r2, r0, #16
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	4553      	cmp	r3, sl
 8005ec0:	db33      	blt.n	8005f2a <__lshift+0xb6>
 8005ec2:	6920      	ldr	r0, [r4, #16]
 8005ec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ec8:	f104 0314 	add.w	r3, r4, #20
 8005ecc:	f019 091f 	ands.w	r9, r9, #31
 8005ed0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ed4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ed8:	d02b      	beq.n	8005f32 <__lshift+0xbe>
 8005eda:	468a      	mov	sl, r1
 8005edc:	2200      	movs	r2, #0
 8005ede:	f1c9 0e20 	rsb	lr, r9, #32
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	fa00 f009 	lsl.w	r0, r0, r9
 8005ee8:	4310      	orrs	r0, r2
 8005eea:	f84a 0b04 	str.w	r0, [sl], #4
 8005eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef2:	459c      	cmp	ip, r3
 8005ef4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ef8:	d8f3      	bhi.n	8005ee2 <__lshift+0x6e>
 8005efa:	ebac 0304 	sub.w	r3, ip, r4
 8005efe:	3b15      	subs	r3, #21
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	3304      	adds	r3, #4
 8005f06:	f104 0015 	add.w	r0, r4, #21
 8005f0a:	4560      	cmp	r0, ip
 8005f0c:	bf88      	it	hi
 8005f0e:	2304      	movhi	r3, #4
 8005f10:	50ca      	str	r2, [r1, r3]
 8005f12:	b10a      	cbz	r2, 8005f18 <__lshift+0xa4>
 8005f14:	f108 0602 	add.w	r6, r8, #2
 8005f18:	3e01      	subs	r6, #1
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	612e      	str	r6, [r5, #16]
 8005f20:	f7ff fd98 	bl	8005a54 <_Bfree>
 8005f24:	4628      	mov	r0, r5
 8005f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f2e:	3301      	adds	r3, #1
 8005f30:	e7c5      	b.n	8005ebe <__lshift+0x4a>
 8005f32:	3904      	subs	r1, #4
 8005f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f38:	459c      	cmp	ip, r3
 8005f3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f3e:	d8f9      	bhi.n	8005f34 <__lshift+0xc0>
 8005f40:	e7ea      	b.n	8005f18 <__lshift+0xa4>
 8005f42:	bf00      	nop
 8005f44:	080083c7 	.word	0x080083c7
 8005f48:	080083d8 	.word	0x080083d8

08005f4c <__mcmp>:
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	690a      	ldr	r2, [r1, #16]
 8005f50:	6900      	ldr	r0, [r0, #16]
 8005f52:	b530      	push	{r4, r5, lr}
 8005f54:	1a80      	subs	r0, r0, r2
 8005f56:	d10e      	bne.n	8005f76 <__mcmp+0x2a>
 8005f58:	3314      	adds	r3, #20
 8005f5a:	3114      	adds	r1, #20
 8005f5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f6c:	4295      	cmp	r5, r2
 8005f6e:	d003      	beq.n	8005f78 <__mcmp+0x2c>
 8005f70:	d205      	bcs.n	8005f7e <__mcmp+0x32>
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
 8005f76:	bd30      	pop	{r4, r5, pc}
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d3f3      	bcc.n	8005f64 <__mcmp+0x18>
 8005f7c:	e7fb      	b.n	8005f76 <__mcmp+0x2a>
 8005f7e:	2001      	movs	r0, #1
 8005f80:	e7f9      	b.n	8005f76 <__mcmp+0x2a>
	...

08005f84 <__mdiff>:
 8005f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	4689      	mov	r9, r1
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4648      	mov	r0, r9
 8005f90:	4614      	mov	r4, r2
 8005f92:	f7ff ffdb 	bl	8005f4c <__mcmp>
 8005f96:	1e05      	subs	r5, r0, #0
 8005f98:	d112      	bne.n	8005fc0 <__mdiff+0x3c>
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff fd19 	bl	80059d4 <_Balloc>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	b928      	cbnz	r0, 8005fb2 <__mdiff+0x2e>
 8005fa6:	f240 2137 	movw	r1, #567	@ 0x237
 8005faa:	4b3e      	ldr	r3, [pc, #248]	@ (80060a4 <__mdiff+0x120>)
 8005fac:	483e      	ldr	r0, [pc, #248]	@ (80060a8 <__mdiff+0x124>)
 8005fae:	f7fe fd99 	bl	8004ae4 <__assert_func>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fb8:	4610      	mov	r0, r2
 8005fba:	b003      	add	sp, #12
 8005fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc0:	bfbc      	itt	lt
 8005fc2:	464b      	movlt	r3, r9
 8005fc4:	46a1      	movlt	r9, r4
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005fcc:	bfba      	itte	lt
 8005fce:	461c      	movlt	r4, r3
 8005fd0:	2501      	movlt	r5, #1
 8005fd2:	2500      	movge	r5, #0
 8005fd4:	f7ff fcfe 	bl	80059d4 <_Balloc>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	b918      	cbnz	r0, 8005fe4 <__mdiff+0x60>
 8005fdc:	f240 2145 	movw	r1, #581	@ 0x245
 8005fe0:	4b30      	ldr	r3, [pc, #192]	@ (80060a4 <__mdiff+0x120>)
 8005fe2:	e7e3      	b.n	8005fac <__mdiff+0x28>
 8005fe4:	f100 0b14 	add.w	fp, r0, #20
 8005fe8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005fec:	f109 0310 	add.w	r3, r9, #16
 8005ff0:	60c5      	str	r5, [r0, #12]
 8005ff2:	f04f 0c00 	mov.w	ip, #0
 8005ff6:	f109 0514 	add.w	r5, r9, #20
 8005ffa:	46d9      	mov	r9, fp
 8005ffc:	6926      	ldr	r6, [r4, #16]
 8005ffe:	f104 0e14 	add.w	lr, r4, #20
 8006002:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006006:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	9b01      	ldr	r3, [sp, #4]
 800600e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006012:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006016:	b281      	uxth	r1, r0
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	fa1f f38a 	uxth.w	r3, sl
 800601e:	1a5b      	subs	r3, r3, r1
 8006020:	0c00      	lsrs	r0, r0, #16
 8006022:	4463      	add	r3, ip
 8006024:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006028:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800602c:	b29b      	uxth	r3, r3
 800602e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006032:	4576      	cmp	r6, lr
 8006034:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006038:	f849 3b04 	str.w	r3, [r9], #4
 800603c:	d8e6      	bhi.n	800600c <__mdiff+0x88>
 800603e:	1b33      	subs	r3, r6, r4
 8006040:	3b15      	subs	r3, #21
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	3415      	adds	r4, #21
 8006048:	3304      	adds	r3, #4
 800604a:	42a6      	cmp	r6, r4
 800604c:	bf38      	it	cc
 800604e:	2304      	movcc	r3, #4
 8006050:	441d      	add	r5, r3
 8006052:	445b      	add	r3, fp
 8006054:	461e      	mov	r6, r3
 8006056:	462c      	mov	r4, r5
 8006058:	4544      	cmp	r4, r8
 800605a:	d30e      	bcc.n	800607a <__mdiff+0xf6>
 800605c:	f108 0103 	add.w	r1, r8, #3
 8006060:	1b49      	subs	r1, r1, r5
 8006062:	f021 0103 	bic.w	r1, r1, #3
 8006066:	3d03      	subs	r5, #3
 8006068:	45a8      	cmp	r8, r5
 800606a:	bf38      	it	cc
 800606c:	2100      	movcc	r1, #0
 800606e:	440b      	add	r3, r1
 8006070:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006074:	b199      	cbz	r1, 800609e <__mdiff+0x11a>
 8006076:	6117      	str	r7, [r2, #16]
 8006078:	e79e      	b.n	8005fb8 <__mdiff+0x34>
 800607a:	46e6      	mov	lr, ip
 800607c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006080:	fa1f fc81 	uxth.w	ip, r1
 8006084:	44f4      	add	ip, lr
 8006086:	0c08      	lsrs	r0, r1, #16
 8006088:	4471      	add	r1, lr
 800608a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800608e:	b289      	uxth	r1, r1
 8006090:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006098:	f846 1b04 	str.w	r1, [r6], #4
 800609c:	e7dc      	b.n	8006058 <__mdiff+0xd4>
 800609e:	3f01      	subs	r7, #1
 80060a0:	e7e6      	b.n	8006070 <__mdiff+0xec>
 80060a2:	bf00      	nop
 80060a4:	080083c7 	.word	0x080083c7
 80060a8:	080083d8 	.word	0x080083d8

080060ac <__ulp>:
 80060ac:	4b0e      	ldr	r3, [pc, #56]	@ (80060e8 <__ulp+0x3c>)
 80060ae:	400b      	ands	r3, r1
 80060b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dc08      	bgt.n	80060ca <__ulp+0x1e>
 80060b8:	425b      	negs	r3, r3
 80060ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80060be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80060c2:	da04      	bge.n	80060ce <__ulp+0x22>
 80060c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80060c8:	4113      	asrs	r3, r2
 80060ca:	2200      	movs	r2, #0
 80060cc:	e008      	b.n	80060e0 <__ulp+0x34>
 80060ce:	f1a2 0314 	sub.w	r3, r2, #20
 80060d2:	2b1e      	cmp	r3, #30
 80060d4:	bfd6      	itet	le
 80060d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80060da:	2201      	movgt	r2, #1
 80060dc:	40da      	lsrle	r2, r3
 80060de:	2300      	movs	r3, #0
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	7ff00000 	.word	0x7ff00000

080060ec <__b2d>:
 80060ec:	6902      	ldr	r2, [r0, #16]
 80060ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f0:	f100 0614 	add.w	r6, r0, #20
 80060f4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80060f8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80060fc:	4f1e      	ldr	r7, [pc, #120]	@ (8006178 <__b2d+0x8c>)
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fd5a 	bl	8005bb8 <__hi0bits>
 8006104:	4603      	mov	r3, r0
 8006106:	f1c0 0020 	rsb	r0, r0, #32
 800610a:	2b0a      	cmp	r3, #10
 800610c:	f1a2 0504 	sub.w	r5, r2, #4
 8006110:	6008      	str	r0, [r1, #0]
 8006112:	dc12      	bgt.n	800613a <__b2d+0x4e>
 8006114:	42ae      	cmp	r6, r5
 8006116:	bf2c      	ite	cs
 8006118:	2200      	movcs	r2, #0
 800611a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800611e:	f1c3 0c0b 	rsb	ip, r3, #11
 8006122:	3315      	adds	r3, #21
 8006124:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006128:	fa04 f303 	lsl.w	r3, r4, r3
 800612c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006130:	ea4e 0107 	orr.w	r1, lr, r7
 8006134:	431a      	orrs	r2, r3
 8006136:	4610      	mov	r0, r2
 8006138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800613a:	42ae      	cmp	r6, r5
 800613c:	bf36      	itet	cc
 800613e:	f1a2 0508 	subcc.w	r5, r2, #8
 8006142:	2200      	movcs	r2, #0
 8006144:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006148:	3b0b      	subs	r3, #11
 800614a:	d012      	beq.n	8006172 <__b2d+0x86>
 800614c:	f1c3 0720 	rsb	r7, r3, #32
 8006150:	fa22 f107 	lsr.w	r1, r2, r7
 8006154:	409c      	lsls	r4, r3
 8006156:	430c      	orrs	r4, r1
 8006158:	42b5      	cmp	r5, r6
 800615a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800615e:	bf94      	ite	ls
 8006160:	2400      	movls	r4, #0
 8006162:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006166:	409a      	lsls	r2, r3
 8006168:	40fc      	lsrs	r4, r7
 800616a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800616e:	4322      	orrs	r2, r4
 8006170:	e7e1      	b.n	8006136 <__b2d+0x4a>
 8006172:	ea44 0107 	orr.w	r1, r4, r7
 8006176:	e7de      	b.n	8006136 <__b2d+0x4a>
 8006178:	3ff00000 	.word	0x3ff00000

0800617c <__d2b>:
 800617c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006180:	2101      	movs	r1, #1
 8006182:	4690      	mov	r8, r2
 8006184:	4699      	mov	r9, r3
 8006186:	9e08      	ldr	r6, [sp, #32]
 8006188:	f7ff fc24 	bl	80059d4 <_Balloc>
 800618c:	4604      	mov	r4, r0
 800618e:	b930      	cbnz	r0, 800619e <__d2b+0x22>
 8006190:	4602      	mov	r2, r0
 8006192:	f240 310f 	movw	r1, #783	@ 0x30f
 8006196:	4b23      	ldr	r3, [pc, #140]	@ (8006224 <__d2b+0xa8>)
 8006198:	4823      	ldr	r0, [pc, #140]	@ (8006228 <__d2b+0xac>)
 800619a:	f7fe fca3 	bl	8004ae4 <__assert_func>
 800619e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061a6:	b10d      	cbz	r5, 80061ac <__d2b+0x30>
 80061a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	f1b8 0300 	subs.w	r3, r8, #0
 80061b2:	d024      	beq.n	80061fe <__d2b+0x82>
 80061b4:	4668      	mov	r0, sp
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	f7ff fd1d 	bl	8005bf6 <__lo0bits>
 80061bc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80061c0:	b1d8      	cbz	r0, 80061fa <__d2b+0x7e>
 80061c2:	f1c0 0320 	rsb	r3, r0, #32
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	430b      	orrs	r3, r1
 80061cc:	40c2      	lsrs	r2, r0
 80061ce:	6163      	str	r3, [r4, #20]
 80061d0:	9201      	str	r2, [sp, #4]
 80061d2:	9b01      	ldr	r3, [sp, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf0c      	ite	eq
 80061d8:	2201      	moveq	r2, #1
 80061da:	2202      	movne	r2, #2
 80061dc:	61a3      	str	r3, [r4, #24]
 80061de:	6122      	str	r2, [r4, #16]
 80061e0:	b1ad      	cbz	r5, 800620e <__d2b+0x92>
 80061e2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80061e6:	4405      	add	r5, r0
 80061e8:	6035      	str	r5, [r6, #0]
 80061ea:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80061ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f0:	6018      	str	r0, [r3, #0]
 80061f2:	4620      	mov	r0, r4
 80061f4:	b002      	add	sp, #8
 80061f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80061fa:	6161      	str	r1, [r4, #20]
 80061fc:	e7e9      	b.n	80061d2 <__d2b+0x56>
 80061fe:	a801      	add	r0, sp, #4
 8006200:	f7ff fcf9 	bl	8005bf6 <__lo0bits>
 8006204:	9b01      	ldr	r3, [sp, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	6163      	str	r3, [r4, #20]
 800620a:	3020      	adds	r0, #32
 800620c:	e7e7      	b.n	80061de <__d2b+0x62>
 800620e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006212:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006216:	6030      	str	r0, [r6, #0]
 8006218:	6918      	ldr	r0, [r3, #16]
 800621a:	f7ff fccd 	bl	8005bb8 <__hi0bits>
 800621e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006222:	e7e4      	b.n	80061ee <__d2b+0x72>
 8006224:	080083c7 	.word	0x080083c7
 8006228:	080083d8 	.word	0x080083d8

0800622c <__ratio>:
 800622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	b085      	sub	sp, #20
 8006232:	e9cd 1000 	strd	r1, r0, [sp]
 8006236:	a902      	add	r1, sp, #8
 8006238:	f7ff ff58 	bl	80060ec <__b2d>
 800623c:	468b      	mov	fp, r1
 800623e:	4606      	mov	r6, r0
 8006240:	460f      	mov	r7, r1
 8006242:	9800      	ldr	r0, [sp, #0]
 8006244:	a903      	add	r1, sp, #12
 8006246:	f7ff ff51 	bl	80060ec <__b2d>
 800624a:	460d      	mov	r5, r1
 800624c:	9b01      	ldr	r3, [sp, #4]
 800624e:	4689      	mov	r9, r1
 8006250:	6919      	ldr	r1, [r3, #16]
 8006252:	9b00      	ldr	r3, [sp, #0]
 8006254:	4604      	mov	r4, r0
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4630      	mov	r0, r6
 800625a:	1ac9      	subs	r1, r1, r3
 800625c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfcd      	iteet	gt
 800626a:	463a      	movgt	r2, r7
 800626c:	462a      	movle	r2, r5
 800626e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006272:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006276:	bfd8      	it	le
 8006278:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800627c:	464b      	mov	r3, r9
 800627e:	4622      	mov	r2, r4
 8006280:	4659      	mov	r1, fp
 8006282:	f7fa fa53 	bl	800072c <__aeabi_ddiv>
 8006286:	b005      	add	sp, #20
 8006288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800628c <__copybits>:
 800628c:	3901      	subs	r1, #1
 800628e:	b570      	push	{r4, r5, r6, lr}
 8006290:	1149      	asrs	r1, r1, #5
 8006292:	6914      	ldr	r4, [r2, #16]
 8006294:	3101      	adds	r1, #1
 8006296:	f102 0314 	add.w	r3, r2, #20
 800629a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800629e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062a2:	1f05      	subs	r5, r0, #4
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d30c      	bcc.n	80062c2 <__copybits+0x36>
 80062a8:	1aa3      	subs	r3, r4, r2
 80062aa:	3b11      	subs	r3, #17
 80062ac:	f023 0303 	bic.w	r3, r3, #3
 80062b0:	3211      	adds	r2, #17
 80062b2:	42a2      	cmp	r2, r4
 80062b4:	bf88      	it	hi
 80062b6:	2300      	movhi	r3, #0
 80062b8:	4418      	add	r0, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	4288      	cmp	r0, r1
 80062be:	d305      	bcc.n	80062cc <__copybits+0x40>
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80062c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80062ca:	e7eb      	b.n	80062a4 <__copybits+0x18>
 80062cc:	f840 3b04 	str.w	r3, [r0], #4
 80062d0:	e7f4      	b.n	80062bc <__copybits+0x30>

080062d2 <__any_on>:
 80062d2:	f100 0214 	add.w	r2, r0, #20
 80062d6:	6900      	ldr	r0, [r0, #16]
 80062d8:	114b      	asrs	r3, r1, #5
 80062da:	4298      	cmp	r0, r3
 80062dc:	b510      	push	{r4, lr}
 80062de:	db11      	blt.n	8006304 <__any_on+0x32>
 80062e0:	dd0a      	ble.n	80062f8 <__any_on+0x26>
 80062e2:	f011 011f 	ands.w	r1, r1, #31
 80062e6:	d007      	beq.n	80062f8 <__any_on+0x26>
 80062e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062ec:	fa24 f001 	lsr.w	r0, r4, r1
 80062f0:	fa00 f101 	lsl.w	r1, r0, r1
 80062f4:	428c      	cmp	r4, r1
 80062f6:	d10b      	bne.n	8006310 <__any_on+0x3e>
 80062f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d803      	bhi.n	8006308 <__any_on+0x36>
 8006300:	2000      	movs	r0, #0
 8006302:	bd10      	pop	{r4, pc}
 8006304:	4603      	mov	r3, r0
 8006306:	e7f7      	b.n	80062f8 <__any_on+0x26>
 8006308:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800630c:	2900      	cmp	r1, #0
 800630e:	d0f5      	beq.n	80062fc <__any_on+0x2a>
 8006310:	2001      	movs	r0, #1
 8006312:	e7f6      	b.n	8006302 <__any_on+0x30>

08006314 <sulp>:
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	460f      	mov	r7, r1
 800631a:	4690      	mov	r8, r2
 800631c:	f7ff fec6 	bl	80060ac <__ulp>
 8006320:	4604      	mov	r4, r0
 8006322:	460d      	mov	r5, r1
 8006324:	f1b8 0f00 	cmp.w	r8, #0
 8006328:	d011      	beq.n	800634e <sulp+0x3a>
 800632a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800632e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd0b      	ble.n	800634e <sulp+0x3a>
 8006336:	2400      	movs	r4, #0
 8006338:	051b      	lsls	r3, r3, #20
 800633a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800633e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006342:	4622      	mov	r2, r4
 8006344:	462b      	mov	r3, r5
 8006346:	f7fa f8c7 	bl	80004d8 <__aeabi_dmul>
 800634a:	4604      	mov	r4, r0
 800634c:	460d      	mov	r5, r1
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006358 <_strtod_l>:
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	b09f      	sub	sp, #124	@ 0x7c
 800635e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006360:	2200      	movs	r2, #0
 8006362:	460c      	mov	r4, r1
 8006364:	921a      	str	r2, [sp, #104]	@ 0x68
 8006366:	f04f 0a00 	mov.w	sl, #0
 800636a:	f04f 0b00 	mov.w	fp, #0
 800636e:	460a      	mov	r2, r1
 8006370:	9005      	str	r0, [sp, #20]
 8006372:	9219      	str	r2, [sp, #100]	@ 0x64
 8006374:	7811      	ldrb	r1, [r2, #0]
 8006376:	292b      	cmp	r1, #43	@ 0x2b
 8006378:	d048      	beq.n	800640c <_strtod_l+0xb4>
 800637a:	d836      	bhi.n	80063ea <_strtod_l+0x92>
 800637c:	290d      	cmp	r1, #13
 800637e:	d830      	bhi.n	80063e2 <_strtod_l+0x8a>
 8006380:	2908      	cmp	r1, #8
 8006382:	d830      	bhi.n	80063e6 <_strtod_l+0x8e>
 8006384:	2900      	cmp	r1, #0
 8006386:	d039      	beq.n	80063fc <_strtod_l+0xa4>
 8006388:	2200      	movs	r2, #0
 800638a:	920e      	str	r2, [sp, #56]	@ 0x38
 800638c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800638e:	782a      	ldrb	r2, [r5, #0]
 8006390:	2a30      	cmp	r2, #48	@ 0x30
 8006392:	f040 80b0 	bne.w	80064f6 <_strtod_l+0x19e>
 8006396:	786a      	ldrb	r2, [r5, #1]
 8006398:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800639c:	2a58      	cmp	r2, #88	@ 0x58
 800639e:	d16c      	bne.n	800647a <_strtod_l+0x122>
 80063a0:	9302      	str	r3, [sp, #8]
 80063a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063a4:	4a8f      	ldr	r2, [pc, #572]	@ (80065e4 <_strtod_l+0x28c>)
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	ab1a      	add	r3, sp, #104	@ 0x68
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	9805      	ldr	r0, [sp, #20]
 80063ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80063b0:	a919      	add	r1, sp, #100	@ 0x64
 80063b2:	f001 f911 	bl	80075d8 <__gethex>
 80063b6:	f010 060f 	ands.w	r6, r0, #15
 80063ba:	4604      	mov	r4, r0
 80063bc:	d005      	beq.n	80063ca <_strtod_l+0x72>
 80063be:	2e06      	cmp	r6, #6
 80063c0:	d126      	bne.n	8006410 <_strtod_l+0xb8>
 80063c2:	2300      	movs	r3, #0
 80063c4:	3501      	adds	r5, #1
 80063c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80063c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80063ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 8582 	bne.w	8006ed6 <_strtod_l+0xb7e>
 80063d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063d4:	b1bb      	cbz	r3, 8006406 <_strtod_l+0xae>
 80063d6:	4650      	mov	r0, sl
 80063d8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80063dc:	b01f      	add	sp, #124	@ 0x7c
 80063de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e2:	2920      	cmp	r1, #32
 80063e4:	d1d0      	bne.n	8006388 <_strtod_l+0x30>
 80063e6:	3201      	adds	r2, #1
 80063e8:	e7c3      	b.n	8006372 <_strtod_l+0x1a>
 80063ea:	292d      	cmp	r1, #45	@ 0x2d
 80063ec:	d1cc      	bne.n	8006388 <_strtod_l+0x30>
 80063ee:	2101      	movs	r1, #1
 80063f0:	910e      	str	r1, [sp, #56]	@ 0x38
 80063f2:	1c51      	adds	r1, r2, #1
 80063f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80063f6:	7852      	ldrb	r2, [r2, #1]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d1c7      	bne.n	800638c <_strtod_l+0x34>
 80063fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063fe:	9419      	str	r4, [sp, #100]	@ 0x64
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 8566 	bne.w	8006ed2 <_strtod_l+0xb7a>
 8006406:	4650      	mov	r0, sl
 8006408:	4659      	mov	r1, fp
 800640a:	e7e7      	b.n	80063dc <_strtod_l+0x84>
 800640c:	2100      	movs	r1, #0
 800640e:	e7ef      	b.n	80063f0 <_strtod_l+0x98>
 8006410:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006412:	b13a      	cbz	r2, 8006424 <_strtod_l+0xcc>
 8006414:	2135      	movs	r1, #53	@ 0x35
 8006416:	a81c      	add	r0, sp, #112	@ 0x70
 8006418:	f7ff ff38 	bl	800628c <__copybits>
 800641c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800641e:	9805      	ldr	r0, [sp, #20]
 8006420:	f7ff fb18 	bl	8005a54 <_Bfree>
 8006424:	3e01      	subs	r6, #1
 8006426:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006428:	2e04      	cmp	r6, #4
 800642a:	d806      	bhi.n	800643a <_strtod_l+0xe2>
 800642c:	e8df f006 	tbb	[pc, r6]
 8006430:	201d0314 	.word	0x201d0314
 8006434:	14          	.byte	0x14
 8006435:	00          	.byte	0x00
 8006436:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800643a:	05e1      	lsls	r1, r4, #23
 800643c:	bf48      	it	mi
 800643e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006442:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006446:	0d1b      	lsrs	r3, r3, #20
 8006448:	051b      	lsls	r3, r3, #20
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1bd      	bne.n	80063ca <_strtod_l+0x72>
 800644e:	f7fe fb09 	bl	8004a64 <__errno>
 8006452:	2322      	movs	r3, #34	@ 0x22
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	e7b8      	b.n	80063ca <_strtod_l+0x72>
 8006458:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800645c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006460:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006464:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006468:	e7e7      	b.n	800643a <_strtod_l+0xe2>
 800646a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80065e8 <_strtod_l+0x290>
 800646e:	e7e4      	b.n	800643a <_strtod_l+0xe2>
 8006470:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006474:	f04f 3aff 	mov.w	sl, #4294967295
 8006478:	e7df      	b.n	800643a <_strtod_l+0xe2>
 800647a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	2b30      	cmp	r3, #48	@ 0x30
 8006484:	d0f9      	beq.n	800647a <_strtod_l+0x122>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d09f      	beq.n	80063ca <_strtod_l+0x72>
 800648a:	2301      	movs	r3, #1
 800648c:	2700      	movs	r7, #0
 800648e:	220a      	movs	r2, #10
 8006490:	46b9      	mov	r9, r7
 8006492:	9308      	str	r3, [sp, #32]
 8006494:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006496:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006498:	930c      	str	r3, [sp, #48]	@ 0x30
 800649a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800649c:	7805      	ldrb	r5, [r0, #0]
 800649e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80064a2:	b2d9      	uxtb	r1, r3
 80064a4:	2909      	cmp	r1, #9
 80064a6:	d928      	bls.n	80064fa <_strtod_l+0x1a2>
 80064a8:	2201      	movs	r2, #1
 80064aa:	4950      	ldr	r1, [pc, #320]	@ (80065ec <_strtod_l+0x294>)
 80064ac:	f000 ffda 	bl	8007464 <strncmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d032      	beq.n	800651a <_strtod_l+0x1c2>
 80064b4:	2000      	movs	r0, #0
 80064b6:	462a      	mov	r2, r5
 80064b8:	4603      	mov	r3, r0
 80064ba:	464d      	mov	r5, r9
 80064bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80064be:	2a65      	cmp	r2, #101	@ 0x65
 80064c0:	d001      	beq.n	80064c6 <_strtod_l+0x16e>
 80064c2:	2a45      	cmp	r2, #69	@ 0x45
 80064c4:	d114      	bne.n	80064f0 <_strtod_l+0x198>
 80064c6:	b91d      	cbnz	r5, 80064d0 <_strtod_l+0x178>
 80064c8:	9a08      	ldr	r2, [sp, #32]
 80064ca:	4302      	orrs	r2, r0
 80064cc:	d096      	beq.n	80063fc <_strtod_l+0xa4>
 80064ce:	2500      	movs	r5, #0
 80064d0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80064d2:	1c62      	adds	r2, r4, #1
 80064d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80064d6:	7862      	ldrb	r2, [r4, #1]
 80064d8:	2a2b      	cmp	r2, #43	@ 0x2b
 80064da:	d07a      	beq.n	80065d2 <_strtod_l+0x27a>
 80064dc:	2a2d      	cmp	r2, #45	@ 0x2d
 80064de:	d07e      	beq.n	80065de <_strtod_l+0x286>
 80064e0:	f04f 0c00 	mov.w	ip, #0
 80064e4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80064e8:	2909      	cmp	r1, #9
 80064ea:	f240 8085 	bls.w	80065f8 <_strtod_l+0x2a0>
 80064ee:	9419      	str	r4, [sp, #100]	@ 0x64
 80064f0:	f04f 0800 	mov.w	r8, #0
 80064f4:	e0a5      	b.n	8006642 <_strtod_l+0x2ea>
 80064f6:	2300      	movs	r3, #0
 80064f8:	e7c8      	b.n	800648c <_strtod_l+0x134>
 80064fa:	f1b9 0f08 	cmp.w	r9, #8
 80064fe:	bfd8      	it	le
 8006500:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006502:	f100 0001 	add.w	r0, r0, #1
 8006506:	bfd6      	itet	le
 8006508:	fb02 3301 	mlale	r3, r2, r1, r3
 800650c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006510:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006512:	f109 0901 	add.w	r9, r9, #1
 8006516:	9019      	str	r0, [sp, #100]	@ 0x64
 8006518:	e7bf      	b.n	800649a <_strtod_l+0x142>
 800651a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006520:	785a      	ldrb	r2, [r3, #1]
 8006522:	f1b9 0f00 	cmp.w	r9, #0
 8006526:	d03b      	beq.n	80065a0 <_strtod_l+0x248>
 8006528:	464d      	mov	r5, r9
 800652a:	900a      	str	r0, [sp, #40]	@ 0x28
 800652c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006530:	2b09      	cmp	r3, #9
 8006532:	d912      	bls.n	800655a <_strtod_l+0x202>
 8006534:	2301      	movs	r3, #1
 8006536:	e7c2      	b.n	80064be <_strtod_l+0x166>
 8006538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800653a:	3001      	adds	r0, #1
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006540:	785a      	ldrb	r2, [r3, #1]
 8006542:	2a30      	cmp	r2, #48	@ 0x30
 8006544:	d0f8      	beq.n	8006538 <_strtod_l+0x1e0>
 8006546:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800654a:	2b08      	cmp	r3, #8
 800654c:	f200 84c8 	bhi.w	8006ee0 <_strtod_l+0xb88>
 8006550:	900a      	str	r0, [sp, #40]	@ 0x28
 8006552:	2000      	movs	r0, #0
 8006554:	4605      	mov	r5, r0
 8006556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006558:	930c      	str	r3, [sp, #48]	@ 0x30
 800655a:	3a30      	subs	r2, #48	@ 0x30
 800655c:	f100 0301 	add.w	r3, r0, #1
 8006560:	d018      	beq.n	8006594 <_strtod_l+0x23c>
 8006562:	462e      	mov	r6, r5
 8006564:	f04f 0e0a 	mov.w	lr, #10
 8006568:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800656a:	4419      	add	r1, r3
 800656c:	910a      	str	r1, [sp, #40]	@ 0x28
 800656e:	1c71      	adds	r1, r6, #1
 8006570:	eba1 0c05 	sub.w	ip, r1, r5
 8006574:	4563      	cmp	r3, ip
 8006576:	dc15      	bgt.n	80065a4 <_strtod_l+0x24c>
 8006578:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800657c:	182b      	adds	r3, r5, r0
 800657e:	2b08      	cmp	r3, #8
 8006580:	f105 0501 	add.w	r5, r5, #1
 8006584:	4405      	add	r5, r0
 8006586:	dc1a      	bgt.n	80065be <_strtod_l+0x266>
 8006588:	230a      	movs	r3, #10
 800658a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800658c:	fb03 2301 	mla	r3, r3, r1, r2
 8006590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006592:	2300      	movs	r3, #0
 8006594:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006596:	4618      	mov	r0, r3
 8006598:	1c51      	adds	r1, r2, #1
 800659a:	9119      	str	r1, [sp, #100]	@ 0x64
 800659c:	7852      	ldrb	r2, [r2, #1]
 800659e:	e7c5      	b.n	800652c <_strtod_l+0x1d4>
 80065a0:	4648      	mov	r0, r9
 80065a2:	e7ce      	b.n	8006542 <_strtod_l+0x1ea>
 80065a4:	2e08      	cmp	r6, #8
 80065a6:	dc05      	bgt.n	80065b4 <_strtod_l+0x25c>
 80065a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80065aa:	fb0e f606 	mul.w	r6, lr, r6
 80065ae:	960b      	str	r6, [sp, #44]	@ 0x2c
 80065b0:	460e      	mov	r6, r1
 80065b2:	e7dc      	b.n	800656e <_strtod_l+0x216>
 80065b4:	2910      	cmp	r1, #16
 80065b6:	bfd8      	it	le
 80065b8:	fb0e f707 	mulle.w	r7, lr, r7
 80065bc:	e7f8      	b.n	80065b0 <_strtod_l+0x258>
 80065be:	2b0f      	cmp	r3, #15
 80065c0:	bfdc      	itt	le
 80065c2:	230a      	movle	r3, #10
 80065c4:	fb03 2707 	mlale	r7, r3, r7, r2
 80065c8:	e7e3      	b.n	8006592 <_strtod_l+0x23a>
 80065ca:	2300      	movs	r3, #0
 80065cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ce:	2301      	movs	r3, #1
 80065d0:	e77a      	b.n	80064c8 <_strtod_l+0x170>
 80065d2:	f04f 0c00 	mov.w	ip, #0
 80065d6:	1ca2      	adds	r2, r4, #2
 80065d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80065da:	78a2      	ldrb	r2, [r4, #2]
 80065dc:	e782      	b.n	80064e4 <_strtod_l+0x18c>
 80065de:	f04f 0c01 	mov.w	ip, #1
 80065e2:	e7f8      	b.n	80065d6 <_strtod_l+0x27e>
 80065e4:	080085bc 	.word	0x080085bc
 80065e8:	7ff00000 	.word	0x7ff00000
 80065ec:	08008431 	.word	0x08008431
 80065f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065f2:	1c51      	adds	r1, r2, #1
 80065f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80065f6:	7852      	ldrb	r2, [r2, #1]
 80065f8:	2a30      	cmp	r2, #48	@ 0x30
 80065fa:	d0f9      	beq.n	80065f0 <_strtod_l+0x298>
 80065fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006600:	2908      	cmp	r1, #8
 8006602:	f63f af75 	bhi.w	80064f0 <_strtod_l+0x198>
 8006606:	f04f 080a 	mov.w	r8, #10
 800660a:	3a30      	subs	r2, #48	@ 0x30
 800660c:	9209      	str	r2, [sp, #36]	@ 0x24
 800660e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006610:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006612:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006614:	1c56      	adds	r6, r2, #1
 8006616:	9619      	str	r6, [sp, #100]	@ 0x64
 8006618:	7852      	ldrb	r2, [r2, #1]
 800661a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800661e:	f1be 0f09 	cmp.w	lr, #9
 8006622:	d939      	bls.n	8006698 <_strtod_l+0x340>
 8006624:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006626:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800662a:	1a76      	subs	r6, r6, r1
 800662c:	2e08      	cmp	r6, #8
 800662e:	dc03      	bgt.n	8006638 <_strtod_l+0x2e0>
 8006630:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006632:	4588      	cmp	r8, r1
 8006634:	bfa8      	it	ge
 8006636:	4688      	movge	r8, r1
 8006638:	f1bc 0f00 	cmp.w	ip, #0
 800663c:	d001      	beq.n	8006642 <_strtod_l+0x2ea>
 800663e:	f1c8 0800 	rsb	r8, r8, #0
 8006642:	2d00      	cmp	r5, #0
 8006644:	d14e      	bne.n	80066e4 <_strtod_l+0x38c>
 8006646:	9908      	ldr	r1, [sp, #32]
 8006648:	4308      	orrs	r0, r1
 800664a:	f47f aebe 	bne.w	80063ca <_strtod_l+0x72>
 800664e:	2b00      	cmp	r3, #0
 8006650:	f47f aed4 	bne.w	80063fc <_strtod_l+0xa4>
 8006654:	2a69      	cmp	r2, #105	@ 0x69
 8006656:	d028      	beq.n	80066aa <_strtod_l+0x352>
 8006658:	dc25      	bgt.n	80066a6 <_strtod_l+0x34e>
 800665a:	2a49      	cmp	r2, #73	@ 0x49
 800665c:	d025      	beq.n	80066aa <_strtod_l+0x352>
 800665e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006660:	f47f aecc 	bne.w	80063fc <_strtod_l+0xa4>
 8006664:	4999      	ldr	r1, [pc, #612]	@ (80068cc <_strtod_l+0x574>)
 8006666:	a819      	add	r0, sp, #100	@ 0x64
 8006668:	f001 f9d8 	bl	8007a1c <__match>
 800666c:	2800      	cmp	r0, #0
 800666e:	f43f aec5 	beq.w	80063fc <_strtod_l+0xa4>
 8006672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b28      	cmp	r3, #40	@ 0x28
 8006678:	d12e      	bne.n	80066d8 <_strtod_l+0x380>
 800667a:	4995      	ldr	r1, [pc, #596]	@ (80068d0 <_strtod_l+0x578>)
 800667c:	aa1c      	add	r2, sp, #112	@ 0x70
 800667e:	a819      	add	r0, sp, #100	@ 0x64
 8006680:	f001 f9e0 	bl	8007a44 <__hexnan>
 8006684:	2805      	cmp	r0, #5
 8006686:	d127      	bne.n	80066d8 <_strtod_l+0x380>
 8006688:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800668a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800668e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006692:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006696:	e698      	b.n	80063ca <_strtod_l+0x72>
 8006698:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800669a:	fb08 2101 	mla	r1, r8, r1, r2
 800669e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80066a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80066a4:	e7b5      	b.n	8006612 <_strtod_l+0x2ba>
 80066a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80066a8:	e7da      	b.n	8006660 <_strtod_l+0x308>
 80066aa:	498a      	ldr	r1, [pc, #552]	@ (80068d4 <_strtod_l+0x57c>)
 80066ac:	a819      	add	r0, sp, #100	@ 0x64
 80066ae:	f001 f9b5 	bl	8007a1c <__match>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f43f aea2 	beq.w	80063fc <_strtod_l+0xa4>
 80066b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066ba:	4987      	ldr	r1, [pc, #540]	@ (80068d8 <_strtod_l+0x580>)
 80066bc:	3b01      	subs	r3, #1
 80066be:	a819      	add	r0, sp, #100	@ 0x64
 80066c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80066c2:	f001 f9ab 	bl	8007a1c <__match>
 80066c6:	b910      	cbnz	r0, 80066ce <_strtod_l+0x376>
 80066c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066ca:	3301      	adds	r3, #1
 80066cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80066ce:	f04f 0a00 	mov.w	sl, #0
 80066d2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80068dc <_strtod_l+0x584>
 80066d6:	e678      	b.n	80063ca <_strtod_l+0x72>
 80066d8:	4881      	ldr	r0, [pc, #516]	@ (80068e0 <_strtod_l+0x588>)
 80066da:	f000 fef3 	bl	80074c4 <nan>
 80066de:	4682      	mov	sl, r0
 80066e0:	468b      	mov	fp, r1
 80066e2:	e672      	b.n	80063ca <_strtod_l+0x72>
 80066e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066e6:	f1b9 0f00 	cmp.w	r9, #0
 80066ea:	bf08      	it	eq
 80066ec:	46a9      	moveq	r9, r5
 80066ee:	eba8 0303 	sub.w	r3, r8, r3
 80066f2:	2d10      	cmp	r5, #16
 80066f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80066f6:	462c      	mov	r4, r5
 80066f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066fa:	bfa8      	it	ge
 80066fc:	2410      	movge	r4, #16
 80066fe:	f7f9 fe71 	bl	80003e4 <__aeabi_ui2d>
 8006702:	2d09      	cmp	r5, #9
 8006704:	4682      	mov	sl, r0
 8006706:	468b      	mov	fp, r1
 8006708:	dc11      	bgt.n	800672e <_strtod_l+0x3d6>
 800670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	f43f ae5c 	beq.w	80063ca <_strtod_l+0x72>
 8006712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006714:	dd76      	ble.n	8006804 <_strtod_l+0x4ac>
 8006716:	2b16      	cmp	r3, #22
 8006718:	dc5d      	bgt.n	80067d6 <_strtod_l+0x47e>
 800671a:	4972      	ldr	r1, [pc, #456]	@ (80068e4 <_strtod_l+0x58c>)
 800671c:	4652      	mov	r2, sl
 800671e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006722:	465b      	mov	r3, fp
 8006724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006728:	f7f9 fed6 	bl	80004d8 <__aeabi_dmul>
 800672c:	e7d7      	b.n	80066de <_strtod_l+0x386>
 800672e:	4b6d      	ldr	r3, [pc, #436]	@ (80068e4 <_strtod_l+0x58c>)
 8006730:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006734:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006738:	f7f9 fece 	bl	80004d8 <__aeabi_dmul>
 800673c:	4682      	mov	sl, r0
 800673e:	4638      	mov	r0, r7
 8006740:	468b      	mov	fp, r1
 8006742:	f7f9 fe4f 	bl	80003e4 <__aeabi_ui2d>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	f7f9 fd0d 	bl	800016c <__adddf3>
 8006752:	2d0f      	cmp	r5, #15
 8006754:	4682      	mov	sl, r0
 8006756:	468b      	mov	fp, r1
 8006758:	ddd7      	ble.n	800670a <_strtod_l+0x3b2>
 800675a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675c:	1b2c      	subs	r4, r5, r4
 800675e:	441c      	add	r4, r3
 8006760:	2c00      	cmp	r4, #0
 8006762:	f340 8093 	ble.w	800688c <_strtod_l+0x534>
 8006766:	f014 030f 	ands.w	r3, r4, #15
 800676a:	d00a      	beq.n	8006782 <_strtod_l+0x42a>
 800676c:	495d      	ldr	r1, [pc, #372]	@ (80068e4 <_strtod_l+0x58c>)
 800676e:	4652      	mov	r2, sl
 8006770:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006778:	465b      	mov	r3, fp
 800677a:	f7f9 fead 	bl	80004d8 <__aeabi_dmul>
 800677e:	4682      	mov	sl, r0
 8006780:	468b      	mov	fp, r1
 8006782:	f034 040f 	bics.w	r4, r4, #15
 8006786:	d073      	beq.n	8006870 <_strtod_l+0x518>
 8006788:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800678c:	dd49      	ble.n	8006822 <_strtod_l+0x4ca>
 800678e:	2400      	movs	r4, #0
 8006790:	46a0      	mov	r8, r4
 8006792:	46a1      	mov	r9, r4
 8006794:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006796:	2322      	movs	r3, #34	@ 0x22
 8006798:	f04f 0a00 	mov.w	sl, #0
 800679c:	9a05      	ldr	r2, [sp, #20]
 800679e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80068dc <_strtod_l+0x584>
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f43f ae0f 	beq.w	80063ca <_strtod_l+0x72>
 80067ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067ae:	9805      	ldr	r0, [sp, #20]
 80067b0:	f7ff f950 	bl	8005a54 <_Bfree>
 80067b4:	4649      	mov	r1, r9
 80067b6:	9805      	ldr	r0, [sp, #20]
 80067b8:	f7ff f94c 	bl	8005a54 <_Bfree>
 80067bc:	4641      	mov	r1, r8
 80067be:	9805      	ldr	r0, [sp, #20]
 80067c0:	f7ff f948 	bl	8005a54 <_Bfree>
 80067c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067c6:	9805      	ldr	r0, [sp, #20]
 80067c8:	f7ff f944 	bl	8005a54 <_Bfree>
 80067cc:	4621      	mov	r1, r4
 80067ce:	9805      	ldr	r0, [sp, #20]
 80067d0:	f7ff f940 	bl	8005a54 <_Bfree>
 80067d4:	e5f9      	b.n	80063ca <_strtod_l+0x72>
 80067d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80067dc:	4293      	cmp	r3, r2
 80067de:	dbbc      	blt.n	800675a <_strtod_l+0x402>
 80067e0:	4c40      	ldr	r4, [pc, #256]	@ (80068e4 <_strtod_l+0x58c>)
 80067e2:	f1c5 050f 	rsb	r5, r5, #15
 80067e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80067ea:	4652      	mov	r2, sl
 80067ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067f0:	465b      	mov	r3, fp
 80067f2:	f7f9 fe71 	bl	80004d8 <__aeabi_dmul>
 80067f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f8:	1b5d      	subs	r5, r3, r5
 80067fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80067fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006802:	e791      	b.n	8006728 <_strtod_l+0x3d0>
 8006804:	3316      	adds	r3, #22
 8006806:	dba8      	blt.n	800675a <_strtod_l+0x402>
 8006808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800680a:	4650      	mov	r0, sl
 800680c:	eba3 0808 	sub.w	r8, r3, r8
 8006810:	4b34      	ldr	r3, [pc, #208]	@ (80068e4 <_strtod_l+0x58c>)
 8006812:	4659      	mov	r1, fp
 8006814:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006818:	e9d8 2300 	ldrd	r2, r3, [r8]
 800681c:	f7f9 ff86 	bl	800072c <__aeabi_ddiv>
 8006820:	e75d      	b.n	80066de <_strtod_l+0x386>
 8006822:	2300      	movs	r3, #0
 8006824:	4650      	mov	r0, sl
 8006826:	4659      	mov	r1, fp
 8006828:	461e      	mov	r6, r3
 800682a:	4f2f      	ldr	r7, [pc, #188]	@ (80068e8 <_strtod_l+0x590>)
 800682c:	1124      	asrs	r4, r4, #4
 800682e:	2c01      	cmp	r4, #1
 8006830:	dc21      	bgt.n	8006876 <_strtod_l+0x51e>
 8006832:	b10b      	cbz	r3, 8006838 <_strtod_l+0x4e0>
 8006834:	4682      	mov	sl, r0
 8006836:	468b      	mov	fp, r1
 8006838:	492b      	ldr	r1, [pc, #172]	@ (80068e8 <_strtod_l+0x590>)
 800683a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800683e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006842:	4652      	mov	r2, sl
 8006844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006848:	465b      	mov	r3, fp
 800684a:	f7f9 fe45 	bl	80004d8 <__aeabi_dmul>
 800684e:	4b23      	ldr	r3, [pc, #140]	@ (80068dc <_strtod_l+0x584>)
 8006850:	460a      	mov	r2, r1
 8006852:	400b      	ands	r3, r1
 8006854:	4925      	ldr	r1, [pc, #148]	@ (80068ec <_strtod_l+0x594>)
 8006856:	4682      	mov	sl, r0
 8006858:	428b      	cmp	r3, r1
 800685a:	d898      	bhi.n	800678e <_strtod_l+0x436>
 800685c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006860:	428b      	cmp	r3, r1
 8006862:	bf86      	itte	hi
 8006864:	f04f 3aff 	movhi.w	sl, #4294967295
 8006868:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80068f0 <_strtod_l+0x598>
 800686c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006870:	2300      	movs	r3, #0
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	e076      	b.n	8006964 <_strtod_l+0x60c>
 8006876:	07e2      	lsls	r2, r4, #31
 8006878:	d504      	bpl.n	8006884 <_strtod_l+0x52c>
 800687a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687e:	f7f9 fe2b 	bl	80004d8 <__aeabi_dmul>
 8006882:	2301      	movs	r3, #1
 8006884:	3601      	adds	r6, #1
 8006886:	1064      	asrs	r4, r4, #1
 8006888:	3708      	adds	r7, #8
 800688a:	e7d0      	b.n	800682e <_strtod_l+0x4d6>
 800688c:	d0f0      	beq.n	8006870 <_strtod_l+0x518>
 800688e:	4264      	negs	r4, r4
 8006890:	f014 020f 	ands.w	r2, r4, #15
 8006894:	d00a      	beq.n	80068ac <_strtod_l+0x554>
 8006896:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <_strtod_l+0x58c>)
 8006898:	4650      	mov	r0, sl
 800689a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800689e:	4659      	mov	r1, fp
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 ff42 	bl	800072c <__aeabi_ddiv>
 80068a8:	4682      	mov	sl, r0
 80068aa:	468b      	mov	fp, r1
 80068ac:	1124      	asrs	r4, r4, #4
 80068ae:	d0df      	beq.n	8006870 <_strtod_l+0x518>
 80068b0:	2c1f      	cmp	r4, #31
 80068b2:	dd1f      	ble.n	80068f4 <_strtod_l+0x59c>
 80068b4:	2400      	movs	r4, #0
 80068b6:	46a0      	mov	r8, r4
 80068b8:	46a1      	mov	r9, r4
 80068ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068bc:	2322      	movs	r3, #34	@ 0x22
 80068be:	9a05      	ldr	r2, [sp, #20]
 80068c0:	f04f 0a00 	mov.w	sl, #0
 80068c4:	f04f 0b00 	mov.w	fp, #0
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e76b      	b.n	80067a4 <_strtod_l+0x44c>
 80068cc:	080082fa 	.word	0x080082fa
 80068d0:	080085a8 	.word	0x080085a8
 80068d4:	080082f2 	.word	0x080082f2
 80068d8:	08008365 	.word	0x08008365
 80068dc:	7ff00000 	.word	0x7ff00000
 80068e0:	08008361 	.word	0x08008361
 80068e4:	080084e0 	.word	0x080084e0
 80068e8:	080084b8 	.word	0x080084b8
 80068ec:	7ca00000 	.word	0x7ca00000
 80068f0:	7fefffff 	.word	0x7fefffff
 80068f4:	f014 0310 	ands.w	r3, r4, #16
 80068f8:	bf18      	it	ne
 80068fa:	236a      	movne	r3, #106	@ 0x6a
 80068fc:	4650      	mov	r0, sl
 80068fe:	9308      	str	r3, [sp, #32]
 8006900:	4659      	mov	r1, fp
 8006902:	2300      	movs	r3, #0
 8006904:	4e77      	ldr	r6, [pc, #476]	@ (8006ae4 <_strtod_l+0x78c>)
 8006906:	07e7      	lsls	r7, r4, #31
 8006908:	d504      	bpl.n	8006914 <_strtod_l+0x5bc>
 800690a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800690e:	f7f9 fde3 	bl	80004d8 <__aeabi_dmul>
 8006912:	2301      	movs	r3, #1
 8006914:	1064      	asrs	r4, r4, #1
 8006916:	f106 0608 	add.w	r6, r6, #8
 800691a:	d1f4      	bne.n	8006906 <_strtod_l+0x5ae>
 800691c:	b10b      	cbz	r3, 8006922 <_strtod_l+0x5ca>
 800691e:	4682      	mov	sl, r0
 8006920:	468b      	mov	fp, r1
 8006922:	9b08      	ldr	r3, [sp, #32]
 8006924:	b1b3      	cbz	r3, 8006954 <_strtod_l+0x5fc>
 8006926:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800692a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800692e:	2b00      	cmp	r3, #0
 8006930:	4659      	mov	r1, fp
 8006932:	dd0f      	ble.n	8006954 <_strtod_l+0x5fc>
 8006934:	2b1f      	cmp	r3, #31
 8006936:	dd58      	ble.n	80069ea <_strtod_l+0x692>
 8006938:	2b34      	cmp	r3, #52	@ 0x34
 800693a:	bfd8      	it	le
 800693c:	f04f 33ff 	movle.w	r3, #4294967295
 8006940:	f04f 0a00 	mov.w	sl, #0
 8006944:	bfcf      	iteee	gt
 8006946:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800694a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800694e:	4093      	lslle	r3, r2
 8006950:	ea03 0b01 	andle.w	fp, r3, r1
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	4650      	mov	r0, sl
 800695a:	4659      	mov	r1, fp
 800695c:	f7fa f824 	bl	80009a8 <__aeabi_dcmpeq>
 8006960:	2800      	cmp	r0, #0
 8006962:	d1a7      	bne.n	80068b4 <_strtod_l+0x55c>
 8006964:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006966:	464a      	mov	r2, r9
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800696c:	462b      	mov	r3, r5
 800696e:	9805      	ldr	r0, [sp, #20]
 8006970:	f7ff f8d8 	bl	8005b24 <__s2b>
 8006974:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006976:	2800      	cmp	r0, #0
 8006978:	f43f af09 	beq.w	800678e <_strtod_l+0x436>
 800697c:	2400      	movs	r4, #0
 800697e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006982:	2a00      	cmp	r2, #0
 8006984:	eba3 0308 	sub.w	r3, r3, r8
 8006988:	bfa8      	it	ge
 800698a:	2300      	movge	r3, #0
 800698c:	46a0      	mov	r8, r4
 800698e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006990:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006994:	9316      	str	r3, [sp, #88]	@ 0x58
 8006996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006998:	9805      	ldr	r0, [sp, #20]
 800699a:	6859      	ldr	r1, [r3, #4]
 800699c:	f7ff f81a 	bl	80059d4 <_Balloc>
 80069a0:	4681      	mov	r9, r0
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f43f aef7 	beq.w	8006796 <_strtod_l+0x43e>
 80069a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069aa:	300c      	adds	r0, #12
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	f103 010c 	add.w	r1, r3, #12
 80069b2:	3202      	adds	r2, #2
 80069b4:	0092      	lsls	r2, r2, #2
 80069b6:	f000 fd77 	bl	80074a8 <memcpy>
 80069ba:	ab1c      	add	r3, sp, #112	@ 0x70
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	4652      	mov	r2, sl
 80069c4:	465b      	mov	r3, fp
 80069c6:	9805      	ldr	r0, [sp, #20]
 80069c8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80069cc:	f7ff fbd6 	bl	800617c <__d2b>
 80069d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f43f aedf 	beq.w	8006796 <_strtod_l+0x43e>
 80069d8:	2101      	movs	r1, #1
 80069da:	9805      	ldr	r0, [sp, #20]
 80069dc:	f7ff f938 	bl	8005c50 <__i2b>
 80069e0:	4680      	mov	r8, r0
 80069e2:	b948      	cbnz	r0, 80069f8 <_strtod_l+0x6a0>
 80069e4:	f04f 0800 	mov.w	r8, #0
 80069e8:	e6d5      	b.n	8006796 <_strtod_l+0x43e>
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	ea03 0a0a 	and.w	sl, r3, sl
 80069f6:	e7ad      	b.n	8006954 <_strtod_l+0x5fc>
 80069f8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80069fa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	bfab      	itete	ge
 8006a00:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006a02:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006a04:	18ef      	addge	r7, r5, r3
 8006a06:	1b5e      	sublt	r6, r3, r5
 8006a08:	9b08      	ldr	r3, [sp, #32]
 8006a0a:	bfa8      	it	ge
 8006a0c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006a0e:	eba5 0503 	sub.w	r5, r5, r3
 8006a12:	4415      	add	r5, r2
 8006a14:	4b34      	ldr	r3, [pc, #208]	@ (8006ae8 <_strtod_l+0x790>)
 8006a16:	f105 35ff 	add.w	r5, r5, #4294967295
 8006a1a:	bfb8      	it	lt
 8006a1c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006a24:	da50      	bge.n	8006ac8 <_strtod_l+0x770>
 8006a26:	1b5b      	subs	r3, r3, r5
 8006a28:	2b1f      	cmp	r3, #31
 8006a2a:	f04f 0101 	mov.w	r1, #1
 8006a2e:	eba2 0203 	sub.w	r2, r2, r3
 8006a32:	dc3d      	bgt.n	8006ab0 <_strtod_l+0x758>
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a3e:	18bd      	adds	r5, r7, r2
 8006a40:	9b08      	ldr	r3, [sp, #32]
 8006a42:	42af      	cmp	r7, r5
 8006a44:	4416      	add	r6, r2
 8006a46:	441e      	add	r6, r3
 8006a48:	463b      	mov	r3, r7
 8006a4a:	bfa8      	it	ge
 8006a4c:	462b      	movge	r3, r5
 8006a4e:	42b3      	cmp	r3, r6
 8006a50:	bfa8      	it	ge
 8006a52:	4633      	movge	r3, r6
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bfc2      	ittt	gt
 8006a58:	1aed      	subgt	r5, r5, r3
 8006a5a:	1af6      	subgt	r6, r6, r3
 8006a5c:	1aff      	subgt	r7, r7, r3
 8006a5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	dd16      	ble.n	8006a92 <_strtod_l+0x73a>
 8006a64:	4641      	mov	r1, r8
 8006a66:	461a      	mov	r2, r3
 8006a68:	9805      	ldr	r0, [sp, #20]
 8006a6a:	f7ff f9a9 	bl	8005dc0 <__pow5mult>
 8006a6e:	4680      	mov	r8, r0
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0b7      	beq.n	80069e4 <_strtod_l+0x68c>
 8006a74:	4601      	mov	r1, r0
 8006a76:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a78:	9805      	ldr	r0, [sp, #20]
 8006a7a:	f7ff f8ff 	bl	8005c7c <__multiply>
 8006a7e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f43f ae88 	beq.w	8006796 <_strtod_l+0x43e>
 8006a86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a88:	9805      	ldr	r0, [sp, #20]
 8006a8a:	f7fe ffe3 	bl	8005a54 <_Bfree>
 8006a8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a90:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	dc1d      	bgt.n	8006ad2 <_strtod_l+0x77a>
 8006a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dd27      	ble.n	8006aec <_strtod_l+0x794>
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006aa0:	9805      	ldr	r0, [sp, #20]
 8006aa2:	f7ff f98d 	bl	8005dc0 <__pow5mult>
 8006aa6:	4681      	mov	r9, r0
 8006aa8:	bb00      	cbnz	r0, 8006aec <_strtod_l+0x794>
 8006aaa:	f04f 0900 	mov.w	r9, #0
 8006aae:	e672      	b.n	8006796 <_strtod_l+0x43e>
 8006ab0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006ab4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006ab8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006abc:	35e2      	adds	r5, #226	@ 0xe2
 8006abe:	fa01 f305 	lsl.w	r3, r1, r5
 8006ac2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ac4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006ac6:	e7ba      	b.n	8006a3e <_strtod_l+0x6e6>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9310      	str	r3, [sp, #64]	@ 0x40
 8006acc:	2301      	movs	r3, #1
 8006ace:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ad0:	e7b5      	b.n	8006a3e <_strtod_l+0x6e6>
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ad6:	9805      	ldr	r0, [sp, #20]
 8006ad8:	f7ff f9cc 	bl	8005e74 <__lshift>
 8006adc:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d1d9      	bne.n	8006a96 <_strtod_l+0x73e>
 8006ae2:	e658      	b.n	8006796 <_strtod_l+0x43e>
 8006ae4:	080085d0 	.word	0x080085d0
 8006ae8:	fffffc02 	.word	0xfffffc02
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	dd07      	ble.n	8006b00 <_strtod_l+0x7a8>
 8006af0:	4649      	mov	r1, r9
 8006af2:	4632      	mov	r2, r6
 8006af4:	9805      	ldr	r0, [sp, #20]
 8006af6:	f7ff f9bd 	bl	8005e74 <__lshift>
 8006afa:	4681      	mov	r9, r0
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d0d4      	beq.n	8006aaa <_strtod_l+0x752>
 8006b00:	2f00      	cmp	r7, #0
 8006b02:	dd08      	ble.n	8006b16 <_strtod_l+0x7be>
 8006b04:	4641      	mov	r1, r8
 8006b06:	463a      	mov	r2, r7
 8006b08:	9805      	ldr	r0, [sp, #20]
 8006b0a:	f7ff f9b3 	bl	8005e74 <__lshift>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f43f ae40 	beq.w	8006796 <_strtod_l+0x43e>
 8006b16:	464a      	mov	r2, r9
 8006b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b1a:	9805      	ldr	r0, [sp, #20]
 8006b1c:	f7ff fa32 	bl	8005f84 <__mdiff>
 8006b20:	4604      	mov	r4, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f43f ae37 	beq.w	8006796 <_strtod_l+0x43e>
 8006b28:	68c3      	ldr	r3, [r0, #12]
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60c3      	str	r3, [r0, #12]
 8006b32:	f7ff fa0b 	bl	8005f4c <__mcmp>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	da3d      	bge.n	8006bb6 <_strtod_l+0x85e>
 8006b3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b3c:	ea53 030a 	orrs.w	r3, r3, sl
 8006b40:	d163      	bne.n	8006c0a <_strtod_l+0x8b2>
 8006b42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d15f      	bne.n	8006c0a <_strtod_l+0x8b2>
 8006b4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b4e:	0d1b      	lsrs	r3, r3, #20
 8006b50:	051b      	lsls	r3, r3, #20
 8006b52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b56:	d958      	bls.n	8006c0a <_strtod_l+0x8b2>
 8006b58:	6963      	ldr	r3, [r4, #20]
 8006b5a:	b913      	cbnz	r3, 8006b62 <_strtod_l+0x80a>
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	dd53      	ble.n	8006c0a <_strtod_l+0x8b2>
 8006b62:	4621      	mov	r1, r4
 8006b64:	2201      	movs	r2, #1
 8006b66:	9805      	ldr	r0, [sp, #20]
 8006b68:	f7ff f984 	bl	8005e74 <__lshift>
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	4604      	mov	r4, r0
 8006b70:	f7ff f9ec 	bl	8005f4c <__mcmp>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	dd48      	ble.n	8006c0a <_strtod_l+0x8b2>
 8006b78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b7c:	9a08      	ldr	r2, [sp, #32]
 8006b7e:	0d1b      	lsrs	r3, r3, #20
 8006b80:	051b      	lsls	r3, r3, #20
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d062      	beq.n	8006c4c <_strtod_l+0x8f4>
 8006b86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b8a:	d85f      	bhi.n	8006c4c <_strtod_l+0x8f4>
 8006b8c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006b90:	f67f ae94 	bls.w	80068bc <_strtod_l+0x564>
 8006b94:	4650      	mov	r0, sl
 8006b96:	4659      	mov	r1, fp
 8006b98:	4ba3      	ldr	r3, [pc, #652]	@ (8006e28 <_strtod_l+0xad0>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f7f9 fc9c 	bl	80004d8 <__aeabi_dmul>
 8006ba0:	4ba2      	ldr	r3, [pc, #648]	@ (8006e2c <_strtod_l+0xad4>)
 8006ba2:	4682      	mov	sl, r0
 8006ba4:	400b      	ands	r3, r1
 8006ba6:	468b      	mov	fp, r1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f47f adff 	bne.w	80067ac <_strtod_l+0x454>
 8006bae:	2322      	movs	r3, #34	@ 0x22
 8006bb0:	9a05      	ldr	r2, [sp, #20]
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	e5fa      	b.n	80067ac <_strtod_l+0x454>
 8006bb6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006bba:	d165      	bne.n	8006c88 <_strtod_l+0x930>
 8006bbc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006bbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bc2:	b35a      	cbz	r2, 8006c1c <_strtod_l+0x8c4>
 8006bc4:	4a9a      	ldr	r2, [pc, #616]	@ (8006e30 <_strtod_l+0xad8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d12b      	bne.n	8006c22 <_strtod_l+0x8ca>
 8006bca:	9b08      	ldr	r3, [sp, #32]
 8006bcc:	4651      	mov	r1, sl
 8006bce:	b303      	cbz	r3, 8006c12 <_strtod_l+0x8ba>
 8006bd0:	465a      	mov	r2, fp
 8006bd2:	4b96      	ldr	r3, [pc, #600]	@ (8006e2c <_strtod_l+0xad4>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295
 8006bde:	d81b      	bhi.n	8006c18 <_strtod_l+0x8c0>
 8006be0:	0d1b      	lsrs	r3, r3, #20
 8006be2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	4299      	cmp	r1, r3
 8006bec:	d119      	bne.n	8006c22 <_strtod_l+0x8ca>
 8006bee:	4b91      	ldr	r3, [pc, #580]	@ (8006e34 <_strtod_l+0xadc>)
 8006bf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d102      	bne.n	8006bfc <_strtod_l+0x8a4>
 8006bf6:	3101      	adds	r1, #1
 8006bf8:	f43f adcd 	beq.w	8006796 <_strtod_l+0x43e>
 8006bfc:	f04f 0a00 	mov.w	sl, #0
 8006c00:	4b8a      	ldr	r3, [pc, #552]	@ (8006e2c <_strtod_l+0xad4>)
 8006c02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c04:	401a      	ands	r2, r3
 8006c06:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1c1      	bne.n	8006b94 <_strtod_l+0x83c>
 8006c10:	e5cc      	b.n	80067ac <_strtod_l+0x454>
 8006c12:	f04f 33ff 	mov.w	r3, #4294967295
 8006c16:	e7e8      	b.n	8006bea <_strtod_l+0x892>
 8006c18:	4613      	mov	r3, r2
 8006c1a:	e7e6      	b.n	8006bea <_strtod_l+0x892>
 8006c1c:	ea53 030a 	orrs.w	r3, r3, sl
 8006c20:	d0aa      	beq.n	8006b78 <_strtod_l+0x820>
 8006c22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c24:	b1db      	cbz	r3, 8006c5e <_strtod_l+0x906>
 8006c26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c28:	4213      	tst	r3, r2
 8006c2a:	d0ee      	beq.n	8006c0a <_strtod_l+0x8b2>
 8006c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c2e:	4650      	mov	r0, sl
 8006c30:	4659      	mov	r1, fp
 8006c32:	9a08      	ldr	r2, [sp, #32]
 8006c34:	b1bb      	cbz	r3, 8006c66 <_strtod_l+0x90e>
 8006c36:	f7ff fb6d 	bl	8006314 <sulp>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c42:	f7f9 fa93 	bl	800016c <__adddf3>
 8006c46:	4682      	mov	sl, r0
 8006c48:	468b      	mov	fp, r1
 8006c4a:	e7de      	b.n	8006c0a <_strtod_l+0x8b2>
 8006c4c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006c50:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006c54:	f04f 3aff 	mov.w	sl, #4294967295
 8006c58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006c5c:	e7d5      	b.n	8006c0a <_strtod_l+0x8b2>
 8006c5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c60:	ea13 0f0a 	tst.w	r3, sl
 8006c64:	e7e1      	b.n	8006c2a <_strtod_l+0x8d2>
 8006c66:	f7ff fb55 	bl	8006314 <sulp>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c72:	f7f9 fa79 	bl	8000168 <__aeabi_dsub>
 8006c76:	2200      	movs	r2, #0
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4682      	mov	sl, r0
 8006c7c:	468b      	mov	fp, r1
 8006c7e:	f7f9 fe93 	bl	80009a8 <__aeabi_dcmpeq>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d0c1      	beq.n	8006c0a <_strtod_l+0x8b2>
 8006c86:	e619      	b.n	80068bc <_strtod_l+0x564>
 8006c88:	4641      	mov	r1, r8
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7ff face 	bl	800622c <__ratio>
 8006c90:	2200      	movs	r2, #0
 8006c92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	f7f9 fe99 	bl	80009d0 <__aeabi_dcmple>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d06d      	beq.n	8006d7e <_strtod_l+0xa26>
 8006ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d178      	bne.n	8006d9a <_strtod_l+0xa42>
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	d156      	bne.n	8006d5c <_strtod_l+0xa04>
 8006cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d158      	bne.n	8006d6a <_strtod_l+0xa12>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	4b5e      	ldr	r3, [pc, #376]	@ (8006e38 <_strtod_l+0xae0>)
 8006cc0:	f7f9 fe7c 	bl	80009bc <__aeabi_dcmplt>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d157      	bne.n	8006d78 <_strtod_l+0xa20>
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4b5b      	ldr	r3, [pc, #364]	@ (8006e3c <_strtod_l+0xae4>)
 8006cd0:	f7f9 fc02 	bl	80004d8 <__aeabi_dmul>
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006cdc:	9606      	str	r6, [sp, #24]
 8006cde:	9307      	str	r3, [sp, #28]
 8006ce0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ce4:	4d51      	ldr	r5, [pc, #324]	@ (8006e2c <_strtod_l+0xad4>)
 8006ce6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cec:	401d      	ands	r5, r3
 8006cee:	4b54      	ldr	r3, [pc, #336]	@ (8006e40 <_strtod_l+0xae8>)
 8006cf0:	429d      	cmp	r5, r3
 8006cf2:	f040 80ab 	bne.w	8006e4c <_strtod_l+0xaf4>
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006cfe:	4659      	mov	r1, fp
 8006d00:	f7ff f9d4 	bl	80060ac <__ulp>
 8006d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d08:	f7f9 fbe6 	bl	80004d8 <__aeabi_dmul>
 8006d0c:	4652      	mov	r2, sl
 8006d0e:	465b      	mov	r3, fp
 8006d10:	f7f9 fa2c 	bl	800016c <__adddf3>
 8006d14:	460b      	mov	r3, r1
 8006d16:	4945      	ldr	r1, [pc, #276]	@ (8006e2c <_strtod_l+0xad4>)
 8006d18:	4a4a      	ldr	r2, [pc, #296]	@ (8006e44 <_strtod_l+0xaec>)
 8006d1a:	4019      	ands	r1, r3
 8006d1c:	4291      	cmp	r1, r2
 8006d1e:	4682      	mov	sl, r0
 8006d20:	d942      	bls.n	8006da8 <_strtod_l+0xa50>
 8006d22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d24:	4b43      	ldr	r3, [pc, #268]	@ (8006e34 <_strtod_l+0xadc>)
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d103      	bne.n	8006d32 <_strtod_l+0x9da>
 8006d2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f43f ad32 	beq.w	8006796 <_strtod_l+0x43e>
 8006d32:	f04f 3aff 	mov.w	sl, #4294967295
 8006d36:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006e34 <_strtod_l+0xadc>
 8006d3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d3c:	9805      	ldr	r0, [sp, #20]
 8006d3e:	f7fe fe89 	bl	8005a54 <_Bfree>
 8006d42:	4649      	mov	r1, r9
 8006d44:	9805      	ldr	r0, [sp, #20]
 8006d46:	f7fe fe85 	bl	8005a54 <_Bfree>
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	9805      	ldr	r0, [sp, #20]
 8006d4e:	f7fe fe81 	bl	8005a54 <_Bfree>
 8006d52:	4621      	mov	r1, r4
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	f7fe fe7d 	bl	8005a54 <_Bfree>
 8006d5a:	e61c      	b.n	8006996 <_strtod_l+0x63e>
 8006d5c:	f1ba 0f01 	cmp.w	sl, #1
 8006d60:	d103      	bne.n	8006d6a <_strtod_l+0xa12>
 8006d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f43f ada9 	beq.w	80068bc <_strtod_l+0x564>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	4b36      	ldr	r3, [pc, #216]	@ (8006e48 <_strtod_l+0xaf0>)
 8006d6e:	2600      	movs	r6, #0
 8006d70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d74:	4f30      	ldr	r7, [pc, #192]	@ (8006e38 <_strtod_l+0xae0>)
 8006d76:	e7b3      	b.n	8006ce0 <_strtod_l+0x988>
 8006d78:	2600      	movs	r6, #0
 8006d7a:	4f30      	ldr	r7, [pc, #192]	@ (8006e3c <_strtod_l+0xae4>)
 8006d7c:	e7ac      	b.n	8006cd8 <_strtod_l+0x980>
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4639      	mov	r1, r7
 8006d82:	4b2e      	ldr	r3, [pc, #184]	@ (8006e3c <_strtod_l+0xae4>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	f7f9 fba7 	bl	80004d8 <__aeabi_dmul>
 8006d8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	460f      	mov	r7, r1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0a1      	beq.n	8006cd8 <_strtod_l+0x980>
 8006d94:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006d98:	e7a2      	b.n	8006ce0 <_strtod_l+0x988>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4b26      	ldr	r3, [pc, #152]	@ (8006e38 <_strtod_l+0xae0>)
 8006d9e:	4616      	mov	r6, r2
 8006da0:	461f      	mov	r7, r3
 8006da2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006da6:	e79b      	b.n	8006ce0 <_strtod_l+0x988>
 8006da8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1c1      	bne.n	8006d3a <_strtod_l+0x9e2>
 8006db6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dba:	0d1b      	lsrs	r3, r3, #20
 8006dbc:	051b      	lsls	r3, r3, #20
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	d1bb      	bne.n	8006d3a <_strtod_l+0x9e2>
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	f7fa f9a3 	bl	8001110 <__aeabi_d2lz>
 8006dca:	f7f9 fb57 	bl	800047c <__aeabi_l2d>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	f7f9 f9c7 	bl	8000168 <__aeabi_dsub>
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006de2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006de6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006de8:	ea46 060a 	orr.w	r6, r6, sl
 8006dec:	431e      	orrs	r6, r3
 8006dee:	d06a      	beq.n	8006ec6 <_strtod_l+0xb6e>
 8006df0:	a309      	add	r3, pc, #36	@ (adr r3, 8006e18 <_strtod_l+0xac0>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fde1 	bl	80009bc <__aeabi_dcmplt>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f47f acd6 	bne.w	80067ac <_strtod_l+0x454>
 8006e00:	a307      	add	r3, pc, #28	@ (adr r3, 8006e20 <_strtod_l+0xac8>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e0a:	f7f9 fdf5 	bl	80009f8 <__aeabi_dcmpgt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d093      	beq.n	8006d3a <_strtod_l+0x9e2>
 8006e12:	e4cb      	b.n	80067ac <_strtod_l+0x454>
 8006e14:	f3af 8000 	nop.w
 8006e18:	94a03595 	.word	0x94a03595
 8006e1c:	3fdfffff 	.word	0x3fdfffff
 8006e20:	35afe535 	.word	0x35afe535
 8006e24:	3fe00000 	.word	0x3fe00000
 8006e28:	39500000 	.word	0x39500000
 8006e2c:	7ff00000 	.word	0x7ff00000
 8006e30:	000fffff 	.word	0x000fffff
 8006e34:	7fefffff 	.word	0x7fefffff
 8006e38:	3ff00000 	.word	0x3ff00000
 8006e3c:	3fe00000 	.word	0x3fe00000
 8006e40:	7fe00000 	.word	0x7fe00000
 8006e44:	7c9fffff 	.word	0x7c9fffff
 8006e48:	bff00000 	.word	0xbff00000
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	b323      	cbz	r3, 8006e9a <_strtod_l+0xb42>
 8006e50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006e54:	d821      	bhi.n	8006e9a <_strtod_l+0xb42>
 8006e56:	a328      	add	r3, pc, #160	@ (adr r3, 8006ef8 <_strtod_l+0xba0>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fdb6 	bl	80009d0 <__aeabi_dcmple>
 8006e64:	b1a0      	cbz	r0, 8006e90 <_strtod_l+0xb38>
 8006e66:	4639      	mov	r1, r7
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7f9 fe0d 	bl	8000a88 <__aeabi_d2uiz>
 8006e6e:	2801      	cmp	r0, #1
 8006e70:	bf38      	it	cc
 8006e72:	2001      	movcc	r0, #1
 8006e74:	f7f9 fab6 	bl	80003e4 <__aeabi_ui2d>
 8006e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	b9fb      	cbnz	r3, 8006ec0 <_strtod_l+0xb68>
 8006e80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e84:	9014      	str	r0, [sp, #80]	@ 0x50
 8006e86:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006e8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006e96:	1b5b      	subs	r3, r3, r5
 8006e98:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006ea2:	f7ff f903 	bl	80060ac <__ulp>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	f7f9 fb13 	bl	80004d8 <__aeabi_dmul>
 8006eb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006eb6:	f7f9 f959 	bl	800016c <__adddf3>
 8006eba:	4682      	mov	sl, r0
 8006ebc:	468b      	mov	fp, r1
 8006ebe:	e775      	b.n	8006dac <_strtod_l+0xa54>
 8006ec0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006ec4:	e7e0      	b.n	8006e88 <_strtod_l+0xb30>
 8006ec6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006f00 <_strtod_l+0xba8>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 fd76 	bl	80009bc <__aeabi_dcmplt>
 8006ed0:	e79d      	b.n	8006e0e <_strtod_l+0xab6>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ed8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	f7ff ba79 	b.w	80063d2 <_strtod_l+0x7a>
 8006ee0:	2a65      	cmp	r2, #101	@ 0x65
 8006ee2:	f43f ab72 	beq.w	80065ca <_strtod_l+0x272>
 8006ee6:	2a45      	cmp	r2, #69	@ 0x45
 8006ee8:	f43f ab6f 	beq.w	80065ca <_strtod_l+0x272>
 8006eec:	2301      	movs	r3, #1
 8006eee:	f7ff bbaa 	b.w	8006646 <_strtod_l+0x2ee>
 8006ef2:	bf00      	nop
 8006ef4:	f3af 8000 	nop.w
 8006ef8:	ffc00000 	.word	0xffc00000
 8006efc:	41dfffff 	.word	0x41dfffff
 8006f00:	94a03595 	.word	0x94a03595
 8006f04:	3fcfffff 	.word	0x3fcfffff

08006f08 <_strtod_r>:
 8006f08:	4b01      	ldr	r3, [pc, #4]	@ (8006f10 <_strtod_r+0x8>)
 8006f0a:	f7ff ba25 	b.w	8006358 <_strtod_l>
 8006f0e:	bf00      	nop
 8006f10:	20000070 	.word	0x20000070

08006f14 <_strtol_l.isra.0>:
 8006f14:	2b24      	cmp	r3, #36	@ 0x24
 8006f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f1a:	4686      	mov	lr, r0
 8006f1c:	4690      	mov	r8, r2
 8006f1e:	d801      	bhi.n	8006f24 <_strtol_l.isra.0+0x10>
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d106      	bne.n	8006f32 <_strtol_l.isra.0+0x1e>
 8006f24:	f7fd fd9e 	bl	8004a64 <__errno>
 8006f28:	2316      	movs	r3, #22
 8006f2a:	6003      	str	r3, [r0, #0]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f32:	460d      	mov	r5, r1
 8006f34:	4833      	ldr	r0, [pc, #204]	@ (8007004 <_strtol_l.isra.0+0xf0>)
 8006f36:	462a      	mov	r2, r5
 8006f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f3c:	5d06      	ldrb	r6, [r0, r4]
 8006f3e:	f016 0608 	ands.w	r6, r6, #8
 8006f42:	d1f8      	bne.n	8006f36 <_strtol_l.isra.0+0x22>
 8006f44:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f46:	d110      	bne.n	8006f6a <_strtol_l.isra.0+0x56>
 8006f48:	2601      	movs	r6, #1
 8006f4a:	782c      	ldrb	r4, [r5, #0]
 8006f4c:	1c95      	adds	r5, r2, #2
 8006f4e:	f033 0210 	bics.w	r2, r3, #16
 8006f52:	d115      	bne.n	8006f80 <_strtol_l.isra.0+0x6c>
 8006f54:	2c30      	cmp	r4, #48	@ 0x30
 8006f56:	d10d      	bne.n	8006f74 <_strtol_l.isra.0+0x60>
 8006f58:	782a      	ldrb	r2, [r5, #0]
 8006f5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f5e:	2a58      	cmp	r2, #88	@ 0x58
 8006f60:	d108      	bne.n	8006f74 <_strtol_l.isra.0+0x60>
 8006f62:	786c      	ldrb	r4, [r5, #1]
 8006f64:	3502      	adds	r5, #2
 8006f66:	2310      	movs	r3, #16
 8006f68:	e00a      	b.n	8006f80 <_strtol_l.isra.0+0x6c>
 8006f6a:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f6c:	bf04      	itt	eq
 8006f6e:	782c      	ldrbeq	r4, [r5, #0]
 8006f70:	1c95      	addeq	r5, r2, #2
 8006f72:	e7ec      	b.n	8006f4e <_strtol_l.isra.0+0x3a>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1f6      	bne.n	8006f66 <_strtol_l.isra.0+0x52>
 8006f78:	2c30      	cmp	r4, #48	@ 0x30
 8006f7a:	bf14      	ite	ne
 8006f7c:	230a      	movne	r3, #10
 8006f7e:	2308      	moveq	r3, #8
 8006f80:	2200      	movs	r2, #0
 8006f82:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006f86:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f8a:	fbbc f9f3 	udiv	r9, ip, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006f98:	2f09      	cmp	r7, #9
 8006f9a:	d80f      	bhi.n	8006fbc <_strtol_l.isra.0+0xa8>
 8006f9c:	463c      	mov	r4, r7
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	dd1b      	ble.n	8006fda <_strtol_l.isra.0+0xc6>
 8006fa2:	1c57      	adds	r7, r2, #1
 8006fa4:	d007      	beq.n	8006fb6 <_strtol_l.isra.0+0xa2>
 8006fa6:	4581      	cmp	r9, r0
 8006fa8:	d314      	bcc.n	8006fd4 <_strtol_l.isra.0+0xc0>
 8006faa:	d101      	bne.n	8006fb0 <_strtol_l.isra.0+0x9c>
 8006fac:	45a2      	cmp	sl, r4
 8006fae:	db11      	blt.n	8006fd4 <_strtol_l.isra.0+0xc0>
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	fb00 4003 	mla	r0, r0, r3, r4
 8006fb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fba:	e7eb      	b.n	8006f94 <_strtol_l.isra.0+0x80>
 8006fbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006fc0:	2f19      	cmp	r7, #25
 8006fc2:	d801      	bhi.n	8006fc8 <_strtol_l.isra.0+0xb4>
 8006fc4:	3c37      	subs	r4, #55	@ 0x37
 8006fc6:	e7ea      	b.n	8006f9e <_strtol_l.isra.0+0x8a>
 8006fc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006fcc:	2f19      	cmp	r7, #25
 8006fce:	d804      	bhi.n	8006fda <_strtol_l.isra.0+0xc6>
 8006fd0:	3c57      	subs	r4, #87	@ 0x57
 8006fd2:	e7e4      	b.n	8006f9e <_strtol_l.isra.0+0x8a>
 8006fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd8:	e7ed      	b.n	8006fb6 <_strtol_l.isra.0+0xa2>
 8006fda:	1c53      	adds	r3, r2, #1
 8006fdc:	d108      	bne.n	8006ff0 <_strtol_l.isra.0+0xdc>
 8006fde:	2322      	movs	r3, #34	@ 0x22
 8006fe0:	4660      	mov	r0, ip
 8006fe2:	f8ce 3000 	str.w	r3, [lr]
 8006fe6:	f1b8 0f00 	cmp.w	r8, #0
 8006fea:	d0a0      	beq.n	8006f2e <_strtol_l.isra.0+0x1a>
 8006fec:	1e69      	subs	r1, r5, #1
 8006fee:	e006      	b.n	8006ffe <_strtol_l.isra.0+0xea>
 8006ff0:	b106      	cbz	r6, 8006ff4 <_strtol_l.isra.0+0xe0>
 8006ff2:	4240      	negs	r0, r0
 8006ff4:	f1b8 0f00 	cmp.w	r8, #0
 8006ff8:	d099      	beq.n	8006f2e <_strtol_l.isra.0+0x1a>
 8006ffa:	2a00      	cmp	r2, #0
 8006ffc:	d1f6      	bne.n	8006fec <_strtol_l.isra.0+0xd8>
 8006ffe:	f8c8 1000 	str.w	r1, [r8]
 8007002:	e794      	b.n	8006f2e <_strtol_l.isra.0+0x1a>
 8007004:	080085f9 	.word	0x080085f9

08007008 <_strtol_r>:
 8007008:	f7ff bf84 	b.w	8006f14 <_strtol_l.isra.0>

0800700c <__ssputs_r>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	461f      	mov	r7, r3
 8007012:	688e      	ldr	r6, [r1, #8]
 8007014:	4682      	mov	sl, r0
 8007016:	42be      	cmp	r6, r7
 8007018:	460c      	mov	r4, r1
 800701a:	4690      	mov	r8, r2
 800701c:	680b      	ldr	r3, [r1, #0]
 800701e:	d82d      	bhi.n	800707c <__ssputs_r+0x70>
 8007020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007024:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007028:	d026      	beq.n	8007078 <__ssputs_r+0x6c>
 800702a:	6965      	ldr	r5, [r4, #20]
 800702c:	6909      	ldr	r1, [r1, #16]
 800702e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007032:	eba3 0901 	sub.w	r9, r3, r1
 8007036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800703a:	1c7b      	adds	r3, r7, #1
 800703c:	444b      	add	r3, r9
 800703e:	106d      	asrs	r5, r5, #1
 8007040:	429d      	cmp	r5, r3
 8007042:	bf38      	it	cc
 8007044:	461d      	movcc	r5, r3
 8007046:	0553      	lsls	r3, r2, #21
 8007048:	d527      	bpl.n	800709a <__ssputs_r+0x8e>
 800704a:	4629      	mov	r1, r5
 800704c:	f7fe fc36 	bl	80058bc <_malloc_r>
 8007050:	4606      	mov	r6, r0
 8007052:	b360      	cbz	r0, 80070ae <__ssputs_r+0xa2>
 8007054:	464a      	mov	r2, r9
 8007056:	6921      	ldr	r1, [r4, #16]
 8007058:	f000 fa26 	bl	80074a8 <memcpy>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	6126      	str	r6, [r4, #16]
 800706a:	444e      	add	r6, r9
 800706c:	6026      	str	r6, [r4, #0]
 800706e:	463e      	mov	r6, r7
 8007070:	6165      	str	r5, [r4, #20]
 8007072:	eba5 0509 	sub.w	r5, r5, r9
 8007076:	60a5      	str	r5, [r4, #8]
 8007078:	42be      	cmp	r6, r7
 800707a:	d900      	bls.n	800707e <__ssputs_r+0x72>
 800707c:	463e      	mov	r6, r7
 800707e:	4632      	mov	r2, r6
 8007080:	4641      	mov	r1, r8
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	f000 f9d4 	bl	8007430 <memmove>
 8007088:	2000      	movs	r0, #0
 800708a:	68a3      	ldr	r3, [r4, #8]
 800708c:	1b9b      	subs	r3, r3, r6
 800708e:	60a3      	str	r3, [r4, #8]
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	4433      	add	r3, r6
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	462a      	mov	r2, r5
 800709c:	f000 fd7f 	bl	8007b9e <_realloc_r>
 80070a0:	4606      	mov	r6, r0
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d1e0      	bne.n	8007068 <__ssputs_r+0x5c>
 80070a6:	4650      	mov	r0, sl
 80070a8:	6921      	ldr	r1, [r4, #16]
 80070aa:	f7fe fb95 	bl	80057d8 <_free_r>
 80070ae:	230c      	movs	r3, #12
 80070b0:	f8ca 3000 	str.w	r3, [sl]
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	e7e9      	b.n	8007096 <__ssputs_r+0x8a>
	...

080070c4 <_svfiprintf_r>:
 80070c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c8:	4698      	mov	r8, r3
 80070ca:	898b      	ldrh	r3, [r1, #12]
 80070cc:	4607      	mov	r7, r0
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	460d      	mov	r5, r1
 80070d2:	4614      	mov	r4, r2
 80070d4:	b09d      	sub	sp, #116	@ 0x74
 80070d6:	d510      	bpl.n	80070fa <_svfiprintf_r+0x36>
 80070d8:	690b      	ldr	r3, [r1, #16]
 80070da:	b973      	cbnz	r3, 80070fa <_svfiprintf_r+0x36>
 80070dc:	2140      	movs	r1, #64	@ 0x40
 80070de:	f7fe fbed 	bl	80058bc <_malloc_r>
 80070e2:	6028      	str	r0, [r5, #0]
 80070e4:	6128      	str	r0, [r5, #16]
 80070e6:	b930      	cbnz	r0, 80070f6 <_svfiprintf_r+0x32>
 80070e8:	230c      	movs	r3, #12
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	b01d      	add	sp, #116	@ 0x74
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	2340      	movs	r3, #64	@ 0x40
 80070f8:	616b      	str	r3, [r5, #20]
 80070fa:	2300      	movs	r3, #0
 80070fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fe:	2320      	movs	r3, #32
 8007100:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007104:	2330      	movs	r3, #48	@ 0x30
 8007106:	f04f 0901 	mov.w	r9, #1
 800710a:	f8cd 800c 	str.w	r8, [sp, #12]
 800710e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80072a8 <_svfiprintf_r+0x1e4>
 8007112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007116:	4623      	mov	r3, r4
 8007118:	469a      	mov	sl, r3
 800711a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800711e:	b10a      	cbz	r2, 8007124 <_svfiprintf_r+0x60>
 8007120:	2a25      	cmp	r2, #37	@ 0x25
 8007122:	d1f9      	bne.n	8007118 <_svfiprintf_r+0x54>
 8007124:	ebba 0b04 	subs.w	fp, sl, r4
 8007128:	d00b      	beq.n	8007142 <_svfiprintf_r+0x7e>
 800712a:	465b      	mov	r3, fp
 800712c:	4622      	mov	r2, r4
 800712e:	4629      	mov	r1, r5
 8007130:	4638      	mov	r0, r7
 8007132:	f7ff ff6b 	bl	800700c <__ssputs_r>
 8007136:	3001      	adds	r0, #1
 8007138:	f000 80a7 	beq.w	800728a <_svfiprintf_r+0x1c6>
 800713c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800713e:	445a      	add	r2, fp
 8007140:	9209      	str	r2, [sp, #36]	@ 0x24
 8007142:	f89a 3000 	ldrb.w	r3, [sl]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 809f 	beq.w	800728a <_svfiprintf_r+0x1c6>
 800714c:	2300      	movs	r3, #0
 800714e:	f04f 32ff 	mov.w	r2, #4294967295
 8007152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007156:	f10a 0a01 	add.w	sl, sl, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	9307      	str	r3, [sp, #28]
 800715e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007162:	931a      	str	r3, [sp, #104]	@ 0x68
 8007164:	4654      	mov	r4, sl
 8007166:	2205      	movs	r2, #5
 8007168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716c:	484e      	ldr	r0, [pc, #312]	@ (80072a8 <_svfiprintf_r+0x1e4>)
 800716e:	f7fd fca6 	bl	8004abe <memchr>
 8007172:	9a04      	ldr	r2, [sp, #16]
 8007174:	b9d8      	cbnz	r0, 80071ae <_svfiprintf_r+0xea>
 8007176:	06d0      	lsls	r0, r2, #27
 8007178:	bf44      	itt	mi
 800717a:	2320      	movmi	r3, #32
 800717c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007180:	0711      	lsls	r1, r2, #28
 8007182:	bf44      	itt	mi
 8007184:	232b      	movmi	r3, #43	@ 0x2b
 8007186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800718a:	f89a 3000 	ldrb.w	r3, [sl]
 800718e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007190:	d015      	beq.n	80071be <_svfiprintf_r+0xfa>
 8007192:	4654      	mov	r4, sl
 8007194:	2000      	movs	r0, #0
 8007196:	f04f 0c0a 	mov.w	ip, #10
 800719a:	9a07      	ldr	r2, [sp, #28]
 800719c:	4621      	mov	r1, r4
 800719e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a2:	3b30      	subs	r3, #48	@ 0x30
 80071a4:	2b09      	cmp	r3, #9
 80071a6:	d94b      	bls.n	8007240 <_svfiprintf_r+0x17c>
 80071a8:	b1b0      	cbz	r0, 80071d8 <_svfiprintf_r+0x114>
 80071aa:	9207      	str	r2, [sp, #28]
 80071ac:	e014      	b.n	80071d8 <_svfiprintf_r+0x114>
 80071ae:	eba0 0308 	sub.w	r3, r0, r8
 80071b2:	fa09 f303 	lsl.w	r3, r9, r3
 80071b6:	4313      	orrs	r3, r2
 80071b8:	46a2      	mov	sl, r4
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	e7d2      	b.n	8007164 <_svfiprintf_r+0xa0>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	1d19      	adds	r1, r3, #4
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	9103      	str	r1, [sp, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bfbb      	ittet	lt
 80071ca:	425b      	neglt	r3, r3
 80071cc:	f042 0202 	orrlt.w	r2, r2, #2
 80071d0:	9307      	strge	r3, [sp, #28]
 80071d2:	9307      	strlt	r3, [sp, #28]
 80071d4:	bfb8      	it	lt
 80071d6:	9204      	strlt	r2, [sp, #16]
 80071d8:	7823      	ldrb	r3, [r4, #0]
 80071da:	2b2e      	cmp	r3, #46	@ 0x2e
 80071dc:	d10a      	bne.n	80071f4 <_svfiprintf_r+0x130>
 80071de:	7863      	ldrb	r3, [r4, #1]
 80071e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80071e2:	d132      	bne.n	800724a <_svfiprintf_r+0x186>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	3402      	adds	r4, #2
 80071e8:	1d1a      	adds	r2, r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	9203      	str	r2, [sp, #12]
 80071ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071f2:	9305      	str	r3, [sp, #20]
 80071f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80072ac <_svfiprintf_r+0x1e8>
 80071f8:	2203      	movs	r2, #3
 80071fa:	4650      	mov	r0, sl
 80071fc:	7821      	ldrb	r1, [r4, #0]
 80071fe:	f7fd fc5e 	bl	8004abe <memchr>
 8007202:	b138      	cbz	r0, 8007214 <_svfiprintf_r+0x150>
 8007204:	2240      	movs	r2, #64	@ 0x40
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	eba0 000a 	sub.w	r0, r0, sl
 800720c:	4082      	lsls	r2, r0
 800720e:	4313      	orrs	r3, r2
 8007210:	3401      	adds	r4, #1
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007218:	2206      	movs	r2, #6
 800721a:	4825      	ldr	r0, [pc, #148]	@ (80072b0 <_svfiprintf_r+0x1ec>)
 800721c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007220:	f7fd fc4d 	bl	8004abe <memchr>
 8007224:	2800      	cmp	r0, #0
 8007226:	d036      	beq.n	8007296 <_svfiprintf_r+0x1d2>
 8007228:	4b22      	ldr	r3, [pc, #136]	@ (80072b4 <_svfiprintf_r+0x1f0>)
 800722a:	bb1b      	cbnz	r3, 8007274 <_svfiprintf_r+0x1b0>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	3307      	adds	r3, #7
 8007230:	f023 0307 	bic.w	r3, r3, #7
 8007234:	3308      	adds	r3, #8
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723a:	4433      	add	r3, r6
 800723c:	9309      	str	r3, [sp, #36]	@ 0x24
 800723e:	e76a      	b.n	8007116 <_svfiprintf_r+0x52>
 8007240:	460c      	mov	r4, r1
 8007242:	2001      	movs	r0, #1
 8007244:	fb0c 3202 	mla	r2, ip, r2, r3
 8007248:	e7a8      	b.n	800719c <_svfiprintf_r+0xd8>
 800724a:	2300      	movs	r3, #0
 800724c:	f04f 0c0a 	mov.w	ip, #10
 8007250:	4619      	mov	r1, r3
 8007252:	3401      	adds	r4, #1
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	4620      	mov	r0, r4
 8007258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725c:	3a30      	subs	r2, #48	@ 0x30
 800725e:	2a09      	cmp	r2, #9
 8007260:	d903      	bls.n	800726a <_svfiprintf_r+0x1a6>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0c6      	beq.n	80071f4 <_svfiprintf_r+0x130>
 8007266:	9105      	str	r1, [sp, #20]
 8007268:	e7c4      	b.n	80071f4 <_svfiprintf_r+0x130>
 800726a:	4604      	mov	r4, r0
 800726c:	2301      	movs	r3, #1
 800726e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007272:	e7f0      	b.n	8007256 <_svfiprintf_r+0x192>
 8007274:	ab03      	add	r3, sp, #12
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	462a      	mov	r2, r5
 800727a:	4638      	mov	r0, r7
 800727c:	4b0e      	ldr	r3, [pc, #56]	@ (80072b8 <_svfiprintf_r+0x1f4>)
 800727e:	a904      	add	r1, sp, #16
 8007280:	f7fc fcb0 	bl	8003be4 <_printf_float>
 8007284:	1c42      	adds	r2, r0, #1
 8007286:	4606      	mov	r6, r0
 8007288:	d1d6      	bne.n	8007238 <_svfiprintf_r+0x174>
 800728a:	89ab      	ldrh	r3, [r5, #12]
 800728c:	065b      	lsls	r3, r3, #25
 800728e:	f53f af2d 	bmi.w	80070ec <_svfiprintf_r+0x28>
 8007292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007294:	e72c      	b.n	80070f0 <_svfiprintf_r+0x2c>
 8007296:	ab03      	add	r3, sp, #12
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	462a      	mov	r2, r5
 800729c:	4638      	mov	r0, r7
 800729e:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <_svfiprintf_r+0x1f4>)
 80072a0:	a904      	add	r1, sp, #16
 80072a2:	f7fc ff3d 	bl	8004120 <_printf_i>
 80072a6:	e7ed      	b.n	8007284 <_svfiprintf_r+0x1c0>
 80072a8:	08008433 	.word	0x08008433
 80072ac:	08008439 	.word	0x08008439
 80072b0:	0800843d 	.word	0x0800843d
 80072b4:	08003be5 	.word	0x08003be5
 80072b8:	0800700d 	.word	0x0800700d

080072bc <__sflush_r>:
 80072bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	0716      	lsls	r6, r2, #28
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	d454      	bmi.n	8007374 <__sflush_r+0xb8>
 80072ca:	684b      	ldr	r3, [r1, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dc02      	bgt.n	80072d6 <__sflush_r+0x1a>
 80072d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dd48      	ble.n	8007368 <__sflush_r+0xac>
 80072d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072d8:	2e00      	cmp	r6, #0
 80072da:	d045      	beq.n	8007368 <__sflush_r+0xac>
 80072dc:	2300      	movs	r3, #0
 80072de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072e2:	682f      	ldr	r7, [r5, #0]
 80072e4:	6a21      	ldr	r1, [r4, #32]
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	d030      	beq.n	800734c <__sflush_r+0x90>
 80072ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	0759      	lsls	r1, r3, #29
 80072f0:	d505      	bpl.n	80072fe <__sflush_r+0x42>
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	1ad2      	subs	r2, r2, r3
 80072f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072f8:	b10b      	cbz	r3, 80072fe <__sflush_r+0x42>
 80072fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072fc:	1ad2      	subs	r2, r2, r3
 80072fe:	2300      	movs	r3, #0
 8007300:	4628      	mov	r0, r5
 8007302:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007304:	6a21      	ldr	r1, [r4, #32]
 8007306:	47b0      	blx	r6
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	d106      	bne.n	800731c <__sflush_r+0x60>
 800730e:	6829      	ldr	r1, [r5, #0]
 8007310:	291d      	cmp	r1, #29
 8007312:	d82b      	bhi.n	800736c <__sflush_r+0xb0>
 8007314:	4a28      	ldr	r2, [pc, #160]	@ (80073b8 <__sflush_r+0xfc>)
 8007316:	40ca      	lsrs	r2, r1
 8007318:	07d6      	lsls	r6, r2, #31
 800731a:	d527      	bpl.n	800736c <__sflush_r+0xb0>
 800731c:	2200      	movs	r2, #0
 800731e:	6062      	str	r2, [r4, #4]
 8007320:	6922      	ldr	r2, [r4, #16]
 8007322:	04d9      	lsls	r1, r3, #19
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	d504      	bpl.n	8007332 <__sflush_r+0x76>
 8007328:	1c42      	adds	r2, r0, #1
 800732a:	d101      	bne.n	8007330 <__sflush_r+0x74>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b903      	cbnz	r3, 8007332 <__sflush_r+0x76>
 8007330:	6560      	str	r0, [r4, #84]	@ 0x54
 8007332:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007334:	602f      	str	r7, [r5, #0]
 8007336:	b1b9      	cbz	r1, 8007368 <__sflush_r+0xac>
 8007338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800733c:	4299      	cmp	r1, r3
 800733e:	d002      	beq.n	8007346 <__sflush_r+0x8a>
 8007340:	4628      	mov	r0, r5
 8007342:	f7fe fa49 	bl	80057d8 <_free_r>
 8007346:	2300      	movs	r3, #0
 8007348:	6363      	str	r3, [r4, #52]	@ 0x34
 800734a:	e00d      	b.n	8007368 <__sflush_r+0xac>
 800734c:	2301      	movs	r3, #1
 800734e:	4628      	mov	r0, r5
 8007350:	47b0      	blx	r6
 8007352:	4602      	mov	r2, r0
 8007354:	1c50      	adds	r0, r2, #1
 8007356:	d1c9      	bne.n	80072ec <__sflush_r+0x30>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0c6      	beq.n	80072ec <__sflush_r+0x30>
 800735e:	2b1d      	cmp	r3, #29
 8007360:	d001      	beq.n	8007366 <__sflush_r+0xaa>
 8007362:	2b16      	cmp	r3, #22
 8007364:	d11d      	bne.n	80073a2 <__sflush_r+0xe6>
 8007366:	602f      	str	r7, [r5, #0]
 8007368:	2000      	movs	r0, #0
 800736a:	e021      	b.n	80073b0 <__sflush_r+0xf4>
 800736c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007370:	b21b      	sxth	r3, r3
 8007372:	e01a      	b.n	80073aa <__sflush_r+0xee>
 8007374:	690f      	ldr	r7, [r1, #16]
 8007376:	2f00      	cmp	r7, #0
 8007378:	d0f6      	beq.n	8007368 <__sflush_r+0xac>
 800737a:	0793      	lsls	r3, r2, #30
 800737c:	bf18      	it	ne
 800737e:	2300      	movne	r3, #0
 8007380:	680e      	ldr	r6, [r1, #0]
 8007382:	bf08      	it	eq
 8007384:	694b      	ldreq	r3, [r1, #20]
 8007386:	1bf6      	subs	r6, r6, r7
 8007388:	600f      	str	r7, [r1, #0]
 800738a:	608b      	str	r3, [r1, #8]
 800738c:	2e00      	cmp	r6, #0
 800738e:	ddeb      	ble.n	8007368 <__sflush_r+0xac>
 8007390:	4633      	mov	r3, r6
 8007392:	463a      	mov	r2, r7
 8007394:	4628      	mov	r0, r5
 8007396:	6a21      	ldr	r1, [r4, #32]
 8007398:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800739c:	47e0      	blx	ip
 800739e:	2800      	cmp	r0, #0
 80073a0:	dc07      	bgt.n	80073b2 <__sflush_r+0xf6>
 80073a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073aa:	f04f 30ff 	mov.w	r0, #4294967295
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b2:	4407      	add	r7, r0
 80073b4:	1a36      	subs	r6, r6, r0
 80073b6:	e7e9      	b.n	800738c <__sflush_r+0xd0>
 80073b8:	20400001 	.word	0x20400001

080073bc <_fflush_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	690b      	ldr	r3, [r1, #16]
 80073c0:	4605      	mov	r5, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	b913      	cbnz	r3, 80073cc <_fflush_r+0x10>
 80073c6:	2500      	movs	r5, #0
 80073c8:	4628      	mov	r0, r5
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	b118      	cbz	r0, 80073d6 <_fflush_r+0x1a>
 80073ce:	6a03      	ldr	r3, [r0, #32]
 80073d0:	b90b      	cbnz	r3, 80073d6 <_fflush_r+0x1a>
 80073d2:	f7fd fa59 	bl	8004888 <__sinit>
 80073d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f3      	beq.n	80073c6 <_fflush_r+0xa>
 80073de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073e0:	07d0      	lsls	r0, r2, #31
 80073e2:	d404      	bmi.n	80073ee <_fflush_r+0x32>
 80073e4:	0599      	lsls	r1, r3, #22
 80073e6:	d402      	bmi.n	80073ee <_fflush_r+0x32>
 80073e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ea:	f7fd fb66 	bl	8004aba <__retarget_lock_acquire_recursive>
 80073ee:	4628      	mov	r0, r5
 80073f0:	4621      	mov	r1, r4
 80073f2:	f7ff ff63 	bl	80072bc <__sflush_r>
 80073f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073f8:	4605      	mov	r5, r0
 80073fa:	07da      	lsls	r2, r3, #31
 80073fc:	d4e4      	bmi.n	80073c8 <_fflush_r+0xc>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	059b      	lsls	r3, r3, #22
 8007402:	d4e1      	bmi.n	80073c8 <_fflush_r+0xc>
 8007404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007406:	f7fd fb59 	bl	8004abc <__retarget_lock_release_recursive>
 800740a:	e7dd      	b.n	80073c8 <_fflush_r+0xc>

0800740c <fiprintf>:
 800740c:	b40e      	push	{r1, r2, r3}
 800740e:	b503      	push	{r0, r1, lr}
 8007410:	4601      	mov	r1, r0
 8007412:	ab03      	add	r3, sp, #12
 8007414:	4805      	ldr	r0, [pc, #20]	@ (800742c <fiprintf+0x20>)
 8007416:	f853 2b04 	ldr.w	r2, [r3], #4
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	f000 fc21 	bl	8007c64 <_vfiprintf_r>
 8007422:	b002      	add	sp, #8
 8007424:	f85d eb04 	ldr.w	lr, [sp], #4
 8007428:	b003      	add	sp, #12
 800742a:	4770      	bx	lr
 800742c:	20000020 	.word	0x20000020

08007430 <memmove>:
 8007430:	4288      	cmp	r0, r1
 8007432:	b510      	push	{r4, lr}
 8007434:	eb01 0402 	add.w	r4, r1, r2
 8007438:	d902      	bls.n	8007440 <memmove+0x10>
 800743a:	4284      	cmp	r4, r0
 800743c:	4623      	mov	r3, r4
 800743e:	d807      	bhi.n	8007450 <memmove+0x20>
 8007440:	1e43      	subs	r3, r0, #1
 8007442:	42a1      	cmp	r1, r4
 8007444:	d008      	beq.n	8007458 <memmove+0x28>
 8007446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800744e:	e7f8      	b.n	8007442 <memmove+0x12>
 8007450:	4601      	mov	r1, r0
 8007452:	4402      	add	r2, r0
 8007454:	428a      	cmp	r2, r1
 8007456:	d100      	bne.n	800745a <memmove+0x2a>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800745e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007462:	e7f7      	b.n	8007454 <memmove+0x24>

08007464 <strncmp>:
 8007464:	b510      	push	{r4, lr}
 8007466:	b16a      	cbz	r2, 8007484 <strncmp+0x20>
 8007468:	3901      	subs	r1, #1
 800746a:	1884      	adds	r4, r0, r2
 800746c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007470:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007474:	429a      	cmp	r2, r3
 8007476:	d103      	bne.n	8007480 <strncmp+0x1c>
 8007478:	42a0      	cmp	r0, r4
 800747a:	d001      	beq.n	8007480 <strncmp+0x1c>
 800747c:	2a00      	cmp	r2, #0
 800747e:	d1f5      	bne.n	800746c <strncmp+0x8>
 8007480:	1ad0      	subs	r0, r2, r3
 8007482:	bd10      	pop	{r4, pc}
 8007484:	4610      	mov	r0, r2
 8007486:	e7fc      	b.n	8007482 <strncmp+0x1e>

08007488 <_sbrk_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	2300      	movs	r3, #0
 800748c:	4d05      	ldr	r5, [pc, #20]	@ (80074a4 <_sbrk_r+0x1c>)
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fa fe10 	bl	80020b8 <_sbrk>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_sbrk_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_sbrk_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20000420 	.word	0x20000420

080074a8 <memcpy>:
 80074a8:	440a      	add	r2, r1
 80074aa:	4291      	cmp	r1, r2
 80074ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b0:	d100      	bne.n	80074b4 <memcpy+0xc>
 80074b2:	4770      	bx	lr
 80074b4:	b510      	push	{r4, lr}
 80074b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ba:	4291      	cmp	r1, r2
 80074bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074c0:	d1f9      	bne.n	80074b6 <memcpy+0xe>
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <nan>:
 80074c4:	2000      	movs	r0, #0
 80074c6:	4901      	ldr	r1, [pc, #4]	@ (80074cc <nan+0x8>)
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	7ff80000 	.word	0x7ff80000

080074d0 <abort>:
 80074d0:	2006      	movs	r0, #6
 80074d2:	b508      	push	{r3, lr}
 80074d4:	f000 fd9a 	bl	800800c <raise>
 80074d8:	2001      	movs	r0, #1
 80074da:	f7fa fd78 	bl	8001fce <_exit>

080074de <_calloc_r>:
 80074de:	b570      	push	{r4, r5, r6, lr}
 80074e0:	fba1 5402 	umull	r5, r4, r1, r2
 80074e4:	b934      	cbnz	r4, 80074f4 <_calloc_r+0x16>
 80074e6:	4629      	mov	r1, r5
 80074e8:	f7fe f9e8 	bl	80058bc <_malloc_r>
 80074ec:	4606      	mov	r6, r0
 80074ee:	b928      	cbnz	r0, 80074fc <_calloc_r+0x1e>
 80074f0:	4630      	mov	r0, r6
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	220c      	movs	r2, #12
 80074f6:	2600      	movs	r6, #0
 80074f8:	6002      	str	r2, [r0, #0]
 80074fa:	e7f9      	b.n	80074f0 <_calloc_r+0x12>
 80074fc:	462a      	mov	r2, r5
 80074fe:	4621      	mov	r1, r4
 8007500:	f7fd fa5d 	bl	80049be <memset>
 8007504:	e7f4      	b.n	80074f0 <_calloc_r+0x12>

08007506 <rshift>:
 8007506:	6903      	ldr	r3, [r0, #16]
 8007508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800750c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007510:	f100 0414 	add.w	r4, r0, #20
 8007514:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007518:	dd46      	ble.n	80075a8 <rshift+0xa2>
 800751a:	f011 011f 	ands.w	r1, r1, #31
 800751e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007522:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007526:	d10c      	bne.n	8007542 <rshift+0x3c>
 8007528:	4629      	mov	r1, r5
 800752a:	f100 0710 	add.w	r7, r0, #16
 800752e:	42b1      	cmp	r1, r6
 8007530:	d335      	bcc.n	800759e <rshift+0x98>
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	1eea      	subs	r2, r5, #3
 8007538:	4296      	cmp	r6, r2
 800753a:	bf38      	it	cc
 800753c:	2300      	movcc	r3, #0
 800753e:	4423      	add	r3, r4
 8007540:	e015      	b.n	800756e <rshift+0x68>
 8007542:	46a1      	mov	r9, r4
 8007544:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007548:	f1c1 0820 	rsb	r8, r1, #32
 800754c:	40cf      	lsrs	r7, r1
 800754e:	f105 0e04 	add.w	lr, r5, #4
 8007552:	4576      	cmp	r6, lr
 8007554:	46f4      	mov	ip, lr
 8007556:	d816      	bhi.n	8007586 <rshift+0x80>
 8007558:	1a9a      	subs	r2, r3, r2
 800755a:	0092      	lsls	r2, r2, #2
 800755c:	3a04      	subs	r2, #4
 800755e:	3501      	adds	r5, #1
 8007560:	42ae      	cmp	r6, r5
 8007562:	bf38      	it	cc
 8007564:	2200      	movcc	r2, #0
 8007566:	18a3      	adds	r3, r4, r2
 8007568:	50a7      	str	r7, [r4, r2]
 800756a:	b107      	cbz	r7, 800756e <rshift+0x68>
 800756c:	3304      	adds	r3, #4
 800756e:	42a3      	cmp	r3, r4
 8007570:	eba3 0204 	sub.w	r2, r3, r4
 8007574:	bf08      	it	eq
 8007576:	2300      	moveq	r3, #0
 8007578:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800757c:	6102      	str	r2, [r0, #16]
 800757e:	bf08      	it	eq
 8007580:	6143      	streq	r3, [r0, #20]
 8007582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007586:	f8dc c000 	ldr.w	ip, [ip]
 800758a:	fa0c fc08 	lsl.w	ip, ip, r8
 800758e:	ea4c 0707 	orr.w	r7, ip, r7
 8007592:	f849 7b04 	str.w	r7, [r9], #4
 8007596:	f85e 7b04 	ldr.w	r7, [lr], #4
 800759a:	40cf      	lsrs	r7, r1
 800759c:	e7d9      	b.n	8007552 <rshift+0x4c>
 800759e:	f851 cb04 	ldr.w	ip, [r1], #4
 80075a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80075a6:	e7c2      	b.n	800752e <rshift+0x28>
 80075a8:	4623      	mov	r3, r4
 80075aa:	e7e0      	b.n	800756e <rshift+0x68>

080075ac <__hexdig_fun>:
 80075ac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80075b0:	2b09      	cmp	r3, #9
 80075b2:	d802      	bhi.n	80075ba <__hexdig_fun+0xe>
 80075b4:	3820      	subs	r0, #32
 80075b6:	b2c0      	uxtb	r0, r0
 80075b8:	4770      	bx	lr
 80075ba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d801      	bhi.n	80075c6 <__hexdig_fun+0x1a>
 80075c2:	3847      	subs	r0, #71	@ 0x47
 80075c4:	e7f7      	b.n	80075b6 <__hexdig_fun+0xa>
 80075c6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d801      	bhi.n	80075d2 <__hexdig_fun+0x26>
 80075ce:	3827      	subs	r0, #39	@ 0x27
 80075d0:	e7f1      	b.n	80075b6 <__hexdig_fun+0xa>
 80075d2:	2000      	movs	r0, #0
 80075d4:	4770      	bx	lr
	...

080075d8 <__gethex>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	468a      	mov	sl, r1
 80075de:	4690      	mov	r8, r2
 80075e0:	b085      	sub	sp, #20
 80075e2:	9302      	str	r3, [sp, #8]
 80075e4:	680b      	ldr	r3, [r1, #0]
 80075e6:	9001      	str	r0, [sp, #4]
 80075e8:	1c9c      	adds	r4, r3, #2
 80075ea:	46a1      	mov	r9, r4
 80075ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80075f0:	2830      	cmp	r0, #48	@ 0x30
 80075f2:	d0fa      	beq.n	80075ea <__gethex+0x12>
 80075f4:	eba9 0303 	sub.w	r3, r9, r3
 80075f8:	f1a3 0b02 	sub.w	fp, r3, #2
 80075fc:	f7ff ffd6 	bl	80075ac <__hexdig_fun>
 8007600:	4605      	mov	r5, r0
 8007602:	2800      	cmp	r0, #0
 8007604:	d168      	bne.n	80076d8 <__gethex+0x100>
 8007606:	2201      	movs	r2, #1
 8007608:	4648      	mov	r0, r9
 800760a:	499f      	ldr	r1, [pc, #636]	@ (8007888 <__gethex+0x2b0>)
 800760c:	f7ff ff2a 	bl	8007464 <strncmp>
 8007610:	4607      	mov	r7, r0
 8007612:	2800      	cmp	r0, #0
 8007614:	d167      	bne.n	80076e6 <__gethex+0x10e>
 8007616:	f899 0001 	ldrb.w	r0, [r9, #1]
 800761a:	4626      	mov	r6, r4
 800761c:	f7ff ffc6 	bl	80075ac <__hexdig_fun>
 8007620:	2800      	cmp	r0, #0
 8007622:	d062      	beq.n	80076ea <__gethex+0x112>
 8007624:	4623      	mov	r3, r4
 8007626:	7818      	ldrb	r0, [r3, #0]
 8007628:	4699      	mov	r9, r3
 800762a:	2830      	cmp	r0, #48	@ 0x30
 800762c:	f103 0301 	add.w	r3, r3, #1
 8007630:	d0f9      	beq.n	8007626 <__gethex+0x4e>
 8007632:	f7ff ffbb 	bl	80075ac <__hexdig_fun>
 8007636:	fab0 f580 	clz	r5, r0
 800763a:	f04f 0b01 	mov.w	fp, #1
 800763e:	096d      	lsrs	r5, r5, #5
 8007640:	464a      	mov	r2, r9
 8007642:	4616      	mov	r6, r2
 8007644:	7830      	ldrb	r0, [r6, #0]
 8007646:	3201      	adds	r2, #1
 8007648:	f7ff ffb0 	bl	80075ac <__hexdig_fun>
 800764c:	2800      	cmp	r0, #0
 800764e:	d1f8      	bne.n	8007642 <__gethex+0x6a>
 8007650:	2201      	movs	r2, #1
 8007652:	4630      	mov	r0, r6
 8007654:	498c      	ldr	r1, [pc, #560]	@ (8007888 <__gethex+0x2b0>)
 8007656:	f7ff ff05 	bl	8007464 <strncmp>
 800765a:	2800      	cmp	r0, #0
 800765c:	d13f      	bne.n	80076de <__gethex+0x106>
 800765e:	b944      	cbnz	r4, 8007672 <__gethex+0x9a>
 8007660:	1c74      	adds	r4, r6, #1
 8007662:	4622      	mov	r2, r4
 8007664:	4616      	mov	r6, r2
 8007666:	7830      	ldrb	r0, [r6, #0]
 8007668:	3201      	adds	r2, #1
 800766a:	f7ff ff9f 	bl	80075ac <__hexdig_fun>
 800766e:	2800      	cmp	r0, #0
 8007670:	d1f8      	bne.n	8007664 <__gethex+0x8c>
 8007672:	1ba4      	subs	r4, r4, r6
 8007674:	00a7      	lsls	r7, r4, #2
 8007676:	7833      	ldrb	r3, [r6, #0]
 8007678:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800767c:	2b50      	cmp	r3, #80	@ 0x50
 800767e:	d13e      	bne.n	80076fe <__gethex+0x126>
 8007680:	7873      	ldrb	r3, [r6, #1]
 8007682:	2b2b      	cmp	r3, #43	@ 0x2b
 8007684:	d033      	beq.n	80076ee <__gethex+0x116>
 8007686:	2b2d      	cmp	r3, #45	@ 0x2d
 8007688:	d034      	beq.n	80076f4 <__gethex+0x11c>
 800768a:	2400      	movs	r4, #0
 800768c:	1c71      	adds	r1, r6, #1
 800768e:	7808      	ldrb	r0, [r1, #0]
 8007690:	f7ff ff8c 	bl	80075ac <__hexdig_fun>
 8007694:	1e43      	subs	r3, r0, #1
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b18      	cmp	r3, #24
 800769a:	d830      	bhi.n	80076fe <__gethex+0x126>
 800769c:	f1a0 0210 	sub.w	r2, r0, #16
 80076a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076a4:	f7ff ff82 	bl	80075ac <__hexdig_fun>
 80076a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80076ac:	fa5f fc8c 	uxtb.w	ip, ip
 80076b0:	f1bc 0f18 	cmp.w	ip, #24
 80076b4:	f04f 030a 	mov.w	r3, #10
 80076b8:	d91e      	bls.n	80076f8 <__gethex+0x120>
 80076ba:	b104      	cbz	r4, 80076be <__gethex+0xe6>
 80076bc:	4252      	negs	r2, r2
 80076be:	4417      	add	r7, r2
 80076c0:	f8ca 1000 	str.w	r1, [sl]
 80076c4:	b1ed      	cbz	r5, 8007702 <__gethex+0x12a>
 80076c6:	f1bb 0f00 	cmp.w	fp, #0
 80076ca:	bf0c      	ite	eq
 80076cc:	2506      	moveq	r5, #6
 80076ce:	2500      	movne	r5, #0
 80076d0:	4628      	mov	r0, r5
 80076d2:	b005      	add	sp, #20
 80076d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d8:	2500      	movs	r5, #0
 80076da:	462c      	mov	r4, r5
 80076dc:	e7b0      	b.n	8007640 <__gethex+0x68>
 80076de:	2c00      	cmp	r4, #0
 80076e0:	d1c7      	bne.n	8007672 <__gethex+0x9a>
 80076e2:	4627      	mov	r7, r4
 80076e4:	e7c7      	b.n	8007676 <__gethex+0x9e>
 80076e6:	464e      	mov	r6, r9
 80076e8:	462f      	mov	r7, r5
 80076ea:	2501      	movs	r5, #1
 80076ec:	e7c3      	b.n	8007676 <__gethex+0x9e>
 80076ee:	2400      	movs	r4, #0
 80076f0:	1cb1      	adds	r1, r6, #2
 80076f2:	e7cc      	b.n	800768e <__gethex+0xb6>
 80076f4:	2401      	movs	r4, #1
 80076f6:	e7fb      	b.n	80076f0 <__gethex+0x118>
 80076f8:	fb03 0002 	mla	r0, r3, r2, r0
 80076fc:	e7ce      	b.n	800769c <__gethex+0xc4>
 80076fe:	4631      	mov	r1, r6
 8007700:	e7de      	b.n	80076c0 <__gethex+0xe8>
 8007702:	4629      	mov	r1, r5
 8007704:	eba6 0309 	sub.w	r3, r6, r9
 8007708:	3b01      	subs	r3, #1
 800770a:	2b07      	cmp	r3, #7
 800770c:	dc0a      	bgt.n	8007724 <__gethex+0x14c>
 800770e:	9801      	ldr	r0, [sp, #4]
 8007710:	f7fe f960 	bl	80059d4 <_Balloc>
 8007714:	4604      	mov	r4, r0
 8007716:	b940      	cbnz	r0, 800772a <__gethex+0x152>
 8007718:	4602      	mov	r2, r0
 800771a:	21e4      	movs	r1, #228	@ 0xe4
 800771c:	4b5b      	ldr	r3, [pc, #364]	@ (800788c <__gethex+0x2b4>)
 800771e:	485c      	ldr	r0, [pc, #368]	@ (8007890 <__gethex+0x2b8>)
 8007720:	f7fd f9e0 	bl	8004ae4 <__assert_func>
 8007724:	3101      	adds	r1, #1
 8007726:	105b      	asrs	r3, r3, #1
 8007728:	e7ef      	b.n	800770a <__gethex+0x132>
 800772a:	2300      	movs	r3, #0
 800772c:	f100 0a14 	add.w	sl, r0, #20
 8007730:	4655      	mov	r5, sl
 8007732:	469b      	mov	fp, r3
 8007734:	45b1      	cmp	r9, r6
 8007736:	d337      	bcc.n	80077a8 <__gethex+0x1d0>
 8007738:	f845 bb04 	str.w	fp, [r5], #4
 800773c:	eba5 050a 	sub.w	r5, r5, sl
 8007740:	10ad      	asrs	r5, r5, #2
 8007742:	6125      	str	r5, [r4, #16]
 8007744:	4658      	mov	r0, fp
 8007746:	f7fe fa37 	bl	8005bb8 <__hi0bits>
 800774a:	016d      	lsls	r5, r5, #5
 800774c:	f8d8 6000 	ldr.w	r6, [r8]
 8007750:	1a2d      	subs	r5, r5, r0
 8007752:	42b5      	cmp	r5, r6
 8007754:	dd54      	ble.n	8007800 <__gethex+0x228>
 8007756:	1bad      	subs	r5, r5, r6
 8007758:	4629      	mov	r1, r5
 800775a:	4620      	mov	r0, r4
 800775c:	f7fe fdb9 	bl	80062d2 <__any_on>
 8007760:	4681      	mov	r9, r0
 8007762:	b178      	cbz	r0, 8007784 <__gethex+0x1ac>
 8007764:	f04f 0901 	mov.w	r9, #1
 8007768:	1e6b      	subs	r3, r5, #1
 800776a:	1159      	asrs	r1, r3, #5
 800776c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007770:	f003 021f 	and.w	r2, r3, #31
 8007774:	fa09 f202 	lsl.w	r2, r9, r2
 8007778:	420a      	tst	r2, r1
 800777a:	d003      	beq.n	8007784 <__gethex+0x1ac>
 800777c:	454b      	cmp	r3, r9
 800777e:	dc36      	bgt.n	80077ee <__gethex+0x216>
 8007780:	f04f 0902 	mov.w	r9, #2
 8007784:	4629      	mov	r1, r5
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff febd 	bl	8007506 <rshift>
 800778c:	442f      	add	r7, r5
 800778e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007792:	42bb      	cmp	r3, r7
 8007794:	da42      	bge.n	800781c <__gethex+0x244>
 8007796:	4621      	mov	r1, r4
 8007798:	9801      	ldr	r0, [sp, #4]
 800779a:	f7fe f95b 	bl	8005a54 <_Bfree>
 800779e:	2300      	movs	r3, #0
 80077a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077a2:	25a3      	movs	r5, #163	@ 0xa3
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	e793      	b.n	80076d0 <__gethex+0xf8>
 80077a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80077ac:	2a2e      	cmp	r2, #46	@ 0x2e
 80077ae:	d012      	beq.n	80077d6 <__gethex+0x1fe>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d104      	bne.n	80077be <__gethex+0x1e6>
 80077b4:	f845 bb04 	str.w	fp, [r5], #4
 80077b8:	f04f 0b00 	mov.w	fp, #0
 80077bc:	465b      	mov	r3, fp
 80077be:	7830      	ldrb	r0, [r6, #0]
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	f7ff fef3 	bl	80075ac <__hexdig_fun>
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	f000 000f 	and.w	r0, r0, #15
 80077cc:	4098      	lsls	r0, r3
 80077ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80077d2:	3304      	adds	r3, #4
 80077d4:	e7ae      	b.n	8007734 <__gethex+0x15c>
 80077d6:	45b1      	cmp	r9, r6
 80077d8:	d8ea      	bhi.n	80077b0 <__gethex+0x1d8>
 80077da:	2201      	movs	r2, #1
 80077dc:	4630      	mov	r0, r6
 80077de:	492a      	ldr	r1, [pc, #168]	@ (8007888 <__gethex+0x2b0>)
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	f7ff fe3f 	bl	8007464 <strncmp>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d1e1      	bne.n	80077b0 <__gethex+0x1d8>
 80077ec:	e7a2      	b.n	8007734 <__gethex+0x15c>
 80077ee:	4620      	mov	r0, r4
 80077f0:	1ea9      	subs	r1, r5, #2
 80077f2:	f7fe fd6e 	bl	80062d2 <__any_on>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d0c2      	beq.n	8007780 <__gethex+0x1a8>
 80077fa:	f04f 0903 	mov.w	r9, #3
 80077fe:	e7c1      	b.n	8007784 <__gethex+0x1ac>
 8007800:	da09      	bge.n	8007816 <__gethex+0x23e>
 8007802:	1b75      	subs	r5, r6, r5
 8007804:	4621      	mov	r1, r4
 8007806:	462a      	mov	r2, r5
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	f7fe fb33 	bl	8005e74 <__lshift>
 800780e:	4604      	mov	r4, r0
 8007810:	1b7f      	subs	r7, r7, r5
 8007812:	f100 0a14 	add.w	sl, r0, #20
 8007816:	f04f 0900 	mov.w	r9, #0
 800781a:	e7b8      	b.n	800778e <__gethex+0x1b6>
 800781c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007820:	42bd      	cmp	r5, r7
 8007822:	dd6f      	ble.n	8007904 <__gethex+0x32c>
 8007824:	1bed      	subs	r5, r5, r7
 8007826:	42ae      	cmp	r6, r5
 8007828:	dc34      	bgt.n	8007894 <__gethex+0x2bc>
 800782a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d022      	beq.n	8007878 <__gethex+0x2a0>
 8007832:	2b03      	cmp	r3, #3
 8007834:	d024      	beq.n	8007880 <__gethex+0x2a8>
 8007836:	2b01      	cmp	r3, #1
 8007838:	d115      	bne.n	8007866 <__gethex+0x28e>
 800783a:	42ae      	cmp	r6, r5
 800783c:	d113      	bne.n	8007866 <__gethex+0x28e>
 800783e:	2e01      	cmp	r6, #1
 8007840:	d10b      	bne.n	800785a <__gethex+0x282>
 8007842:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007846:	9a02      	ldr	r2, [sp, #8]
 8007848:	2562      	movs	r5, #98	@ 0x62
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	2301      	movs	r3, #1
 800784e:	6123      	str	r3, [r4, #16]
 8007850:	f8ca 3000 	str.w	r3, [sl]
 8007854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007856:	601c      	str	r4, [r3, #0]
 8007858:	e73a      	b.n	80076d0 <__gethex+0xf8>
 800785a:	4620      	mov	r0, r4
 800785c:	1e71      	subs	r1, r6, #1
 800785e:	f7fe fd38 	bl	80062d2 <__any_on>
 8007862:	2800      	cmp	r0, #0
 8007864:	d1ed      	bne.n	8007842 <__gethex+0x26a>
 8007866:	4621      	mov	r1, r4
 8007868:	9801      	ldr	r0, [sp, #4]
 800786a:	f7fe f8f3 	bl	8005a54 <_Bfree>
 800786e:	2300      	movs	r3, #0
 8007870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007872:	2550      	movs	r5, #80	@ 0x50
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e72b      	b.n	80076d0 <__gethex+0xf8>
 8007878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f3      	bne.n	8007866 <__gethex+0x28e>
 800787e:	e7e0      	b.n	8007842 <__gethex+0x26a>
 8007880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1dd      	bne.n	8007842 <__gethex+0x26a>
 8007886:	e7ee      	b.n	8007866 <__gethex+0x28e>
 8007888:	08008431 	.word	0x08008431
 800788c:	080083c7 	.word	0x080083c7
 8007890:	0800844c 	.word	0x0800844c
 8007894:	1e6f      	subs	r7, r5, #1
 8007896:	f1b9 0f00 	cmp.w	r9, #0
 800789a:	d130      	bne.n	80078fe <__gethex+0x326>
 800789c:	b127      	cbz	r7, 80078a8 <__gethex+0x2d0>
 800789e:	4639      	mov	r1, r7
 80078a0:	4620      	mov	r0, r4
 80078a2:	f7fe fd16 	bl	80062d2 <__any_on>
 80078a6:	4681      	mov	r9, r0
 80078a8:	2301      	movs	r3, #1
 80078aa:	4629      	mov	r1, r5
 80078ac:	1b76      	subs	r6, r6, r5
 80078ae:	2502      	movs	r5, #2
 80078b0:	117a      	asrs	r2, r7, #5
 80078b2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80078b6:	f007 071f 	and.w	r7, r7, #31
 80078ba:	40bb      	lsls	r3, r7
 80078bc:	4213      	tst	r3, r2
 80078be:	4620      	mov	r0, r4
 80078c0:	bf18      	it	ne
 80078c2:	f049 0902 	orrne.w	r9, r9, #2
 80078c6:	f7ff fe1e 	bl	8007506 <rshift>
 80078ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80078ce:	f1b9 0f00 	cmp.w	r9, #0
 80078d2:	d047      	beq.n	8007964 <__gethex+0x38c>
 80078d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d015      	beq.n	8007908 <__gethex+0x330>
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d017      	beq.n	8007910 <__gethex+0x338>
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d109      	bne.n	80078f8 <__gethex+0x320>
 80078e4:	f019 0f02 	tst.w	r9, #2
 80078e8:	d006      	beq.n	80078f8 <__gethex+0x320>
 80078ea:	f8da 3000 	ldr.w	r3, [sl]
 80078ee:	ea49 0903 	orr.w	r9, r9, r3
 80078f2:	f019 0f01 	tst.w	r9, #1
 80078f6:	d10e      	bne.n	8007916 <__gethex+0x33e>
 80078f8:	f045 0510 	orr.w	r5, r5, #16
 80078fc:	e032      	b.n	8007964 <__gethex+0x38c>
 80078fe:	f04f 0901 	mov.w	r9, #1
 8007902:	e7d1      	b.n	80078a8 <__gethex+0x2d0>
 8007904:	2501      	movs	r5, #1
 8007906:	e7e2      	b.n	80078ce <__gethex+0x2f6>
 8007908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800790a:	f1c3 0301 	rsb	r3, r3, #1
 800790e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <__gethex+0x320>
 8007916:	f04f 0c00 	mov.w	ip, #0
 800791a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800791e:	f104 0314 	add.w	r3, r4, #20
 8007922:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007926:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800792a:	4618      	mov	r0, r3
 800792c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007930:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007934:	d01b      	beq.n	800796e <__gethex+0x396>
 8007936:	3201      	adds	r2, #1
 8007938:	6002      	str	r2, [r0, #0]
 800793a:	2d02      	cmp	r5, #2
 800793c:	f104 0314 	add.w	r3, r4, #20
 8007940:	d13c      	bne.n	80079bc <__gethex+0x3e4>
 8007942:	f8d8 2000 	ldr.w	r2, [r8]
 8007946:	3a01      	subs	r2, #1
 8007948:	42b2      	cmp	r2, r6
 800794a:	d109      	bne.n	8007960 <__gethex+0x388>
 800794c:	2201      	movs	r2, #1
 800794e:	1171      	asrs	r1, r6, #5
 8007950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007954:	f006 061f 	and.w	r6, r6, #31
 8007958:	fa02 f606 	lsl.w	r6, r2, r6
 800795c:	421e      	tst	r6, r3
 800795e:	d13a      	bne.n	80079d6 <__gethex+0x3fe>
 8007960:	f045 0520 	orr.w	r5, r5, #32
 8007964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007966:	601c      	str	r4, [r3, #0]
 8007968:	9b02      	ldr	r3, [sp, #8]
 800796a:	601f      	str	r7, [r3, #0]
 800796c:	e6b0      	b.n	80076d0 <__gethex+0xf8>
 800796e:	4299      	cmp	r1, r3
 8007970:	f843 cc04 	str.w	ip, [r3, #-4]
 8007974:	d8d9      	bhi.n	800792a <__gethex+0x352>
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	459b      	cmp	fp, r3
 800797a:	db17      	blt.n	80079ac <__gethex+0x3d4>
 800797c:	6861      	ldr	r1, [r4, #4]
 800797e:	9801      	ldr	r0, [sp, #4]
 8007980:	3101      	adds	r1, #1
 8007982:	f7fe f827 	bl	80059d4 <_Balloc>
 8007986:	4681      	mov	r9, r0
 8007988:	b918      	cbnz	r0, 8007992 <__gethex+0x3ba>
 800798a:	4602      	mov	r2, r0
 800798c:	2184      	movs	r1, #132	@ 0x84
 800798e:	4b19      	ldr	r3, [pc, #100]	@ (80079f4 <__gethex+0x41c>)
 8007990:	e6c5      	b.n	800771e <__gethex+0x146>
 8007992:	6922      	ldr	r2, [r4, #16]
 8007994:	f104 010c 	add.w	r1, r4, #12
 8007998:	3202      	adds	r2, #2
 800799a:	0092      	lsls	r2, r2, #2
 800799c:	300c      	adds	r0, #12
 800799e:	f7ff fd83 	bl	80074a8 <memcpy>
 80079a2:	4621      	mov	r1, r4
 80079a4:	9801      	ldr	r0, [sp, #4]
 80079a6:	f7fe f855 	bl	8005a54 <_Bfree>
 80079aa:	464c      	mov	r4, r9
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	6122      	str	r2, [r4, #16]
 80079b2:	2201      	movs	r2, #1
 80079b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079b8:	615a      	str	r2, [r3, #20]
 80079ba:	e7be      	b.n	800793a <__gethex+0x362>
 80079bc:	6922      	ldr	r2, [r4, #16]
 80079be:	455a      	cmp	r2, fp
 80079c0:	dd0b      	ble.n	80079da <__gethex+0x402>
 80079c2:	2101      	movs	r1, #1
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7ff fd9e 	bl	8007506 <rshift>
 80079ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079ce:	3701      	adds	r7, #1
 80079d0:	42bb      	cmp	r3, r7
 80079d2:	f6ff aee0 	blt.w	8007796 <__gethex+0x1be>
 80079d6:	2501      	movs	r5, #1
 80079d8:	e7c2      	b.n	8007960 <__gethex+0x388>
 80079da:	f016 061f 	ands.w	r6, r6, #31
 80079de:	d0fa      	beq.n	80079d6 <__gethex+0x3fe>
 80079e0:	4453      	add	r3, sl
 80079e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80079e6:	f7fe f8e7 	bl	8005bb8 <__hi0bits>
 80079ea:	f1c6 0620 	rsb	r6, r6, #32
 80079ee:	42b0      	cmp	r0, r6
 80079f0:	dbe7      	blt.n	80079c2 <__gethex+0x3ea>
 80079f2:	e7f0      	b.n	80079d6 <__gethex+0x3fe>
 80079f4:	080083c7 	.word	0x080083c7

080079f8 <L_shift>:
 80079f8:	f1c2 0208 	rsb	r2, r2, #8
 80079fc:	0092      	lsls	r2, r2, #2
 80079fe:	b570      	push	{r4, r5, r6, lr}
 8007a00:	f1c2 0620 	rsb	r6, r2, #32
 8007a04:	6843      	ldr	r3, [r0, #4]
 8007a06:	6804      	ldr	r4, [r0, #0]
 8007a08:	fa03 f506 	lsl.w	r5, r3, r6
 8007a0c:	432c      	orrs	r4, r5
 8007a0e:	40d3      	lsrs	r3, r2
 8007a10:	6004      	str	r4, [r0, #0]
 8007a12:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a16:	4288      	cmp	r0, r1
 8007a18:	d3f4      	bcc.n	8007a04 <L_shift+0xc>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}

08007a1c <__match>:
 8007a1c:	b530      	push	{r4, r5, lr}
 8007a1e:	6803      	ldr	r3, [r0, #0]
 8007a20:	3301      	adds	r3, #1
 8007a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a26:	b914      	cbnz	r4, 8007a2e <__match+0x12>
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	bd30      	pop	{r4, r5, pc}
 8007a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007a36:	2d19      	cmp	r5, #25
 8007a38:	bf98      	it	ls
 8007a3a:	3220      	addls	r2, #32
 8007a3c:	42a2      	cmp	r2, r4
 8007a3e:	d0f0      	beq.n	8007a22 <__match+0x6>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e7f3      	b.n	8007a2c <__match+0x10>

08007a44 <__hexnan>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	2500      	movs	r5, #0
 8007a4a:	680b      	ldr	r3, [r1, #0]
 8007a4c:	4682      	mov	sl, r0
 8007a4e:	115e      	asrs	r6, r3, #5
 8007a50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a54:	f013 031f 	ands.w	r3, r3, #31
 8007a58:	bf18      	it	ne
 8007a5a:	3604      	addne	r6, #4
 8007a5c:	1f37      	subs	r7, r6, #4
 8007a5e:	4690      	mov	r8, r2
 8007a60:	46b9      	mov	r9, r7
 8007a62:	463c      	mov	r4, r7
 8007a64:	46ab      	mov	fp, r5
 8007a66:	b087      	sub	sp, #28
 8007a68:	6801      	ldr	r1, [r0, #0]
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a70:	9502      	str	r5, [sp, #8]
 8007a72:	784a      	ldrb	r2, [r1, #1]
 8007a74:	1c4b      	adds	r3, r1, #1
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	b342      	cbz	r2, 8007acc <__hexnan+0x88>
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	9105      	str	r1, [sp, #20]
 8007a7e:	9204      	str	r2, [sp, #16]
 8007a80:	f7ff fd94 	bl	80075ac <__hexdig_fun>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d151      	bne.n	8007b2c <__hexnan+0xe8>
 8007a88:	9a04      	ldr	r2, [sp, #16]
 8007a8a:	9905      	ldr	r1, [sp, #20]
 8007a8c:	2a20      	cmp	r2, #32
 8007a8e:	d818      	bhi.n	8007ac2 <__hexnan+0x7e>
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	459b      	cmp	fp, r3
 8007a94:	dd13      	ble.n	8007abe <__hexnan+0x7a>
 8007a96:	454c      	cmp	r4, r9
 8007a98:	d206      	bcs.n	8007aa8 <__hexnan+0x64>
 8007a9a:	2d07      	cmp	r5, #7
 8007a9c:	dc04      	bgt.n	8007aa8 <__hexnan+0x64>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7ff ffa8 	bl	80079f8 <L_shift>
 8007aa8:	4544      	cmp	r4, r8
 8007aaa:	d952      	bls.n	8007b52 <__hexnan+0x10e>
 8007aac:	2300      	movs	r3, #0
 8007aae:	f1a4 0904 	sub.w	r9, r4, #4
 8007ab2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	464c      	mov	r4, r9
 8007aba:	f8cd b008 	str.w	fp, [sp, #8]
 8007abe:	9903      	ldr	r1, [sp, #12]
 8007ac0:	e7d7      	b.n	8007a72 <__hexnan+0x2e>
 8007ac2:	2a29      	cmp	r2, #41	@ 0x29
 8007ac4:	d157      	bne.n	8007b76 <__hexnan+0x132>
 8007ac6:	3102      	adds	r1, #2
 8007ac8:	f8ca 1000 	str.w	r1, [sl]
 8007acc:	f1bb 0f00 	cmp.w	fp, #0
 8007ad0:	d051      	beq.n	8007b76 <__hexnan+0x132>
 8007ad2:	454c      	cmp	r4, r9
 8007ad4:	d206      	bcs.n	8007ae4 <__hexnan+0xa0>
 8007ad6:	2d07      	cmp	r5, #7
 8007ad8:	dc04      	bgt.n	8007ae4 <__hexnan+0xa0>
 8007ada:	462a      	mov	r2, r5
 8007adc:	4649      	mov	r1, r9
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff ff8a 	bl	80079f8 <L_shift>
 8007ae4:	4544      	cmp	r4, r8
 8007ae6:	d936      	bls.n	8007b56 <__hexnan+0x112>
 8007ae8:	4623      	mov	r3, r4
 8007aea:	f1a8 0204 	sub.w	r2, r8, #4
 8007aee:	f853 1b04 	ldr.w	r1, [r3], #4
 8007af2:	429f      	cmp	r7, r3
 8007af4:	f842 1f04 	str.w	r1, [r2, #4]!
 8007af8:	d2f9      	bcs.n	8007aee <__hexnan+0xaa>
 8007afa:	1b3b      	subs	r3, r7, r4
 8007afc:	f023 0303 	bic.w	r3, r3, #3
 8007b00:	3304      	adds	r3, #4
 8007b02:	3401      	adds	r4, #1
 8007b04:	3e03      	subs	r6, #3
 8007b06:	42b4      	cmp	r4, r6
 8007b08:	bf88      	it	hi
 8007b0a:	2304      	movhi	r3, #4
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4443      	add	r3, r8
 8007b10:	f843 2b04 	str.w	r2, [r3], #4
 8007b14:	429f      	cmp	r7, r3
 8007b16:	d2fb      	bcs.n	8007b10 <__hexnan+0xcc>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	b91b      	cbnz	r3, 8007b24 <__hexnan+0xe0>
 8007b1c:	4547      	cmp	r7, r8
 8007b1e:	d128      	bne.n	8007b72 <__hexnan+0x12e>
 8007b20:	2301      	movs	r3, #1
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	2005      	movs	r0, #5
 8007b26:	b007      	add	sp, #28
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	2d08      	cmp	r5, #8
 8007b30:	f10b 0b01 	add.w	fp, fp, #1
 8007b34:	dd06      	ble.n	8007b44 <__hexnan+0x100>
 8007b36:	4544      	cmp	r4, r8
 8007b38:	d9c1      	bls.n	8007abe <__hexnan+0x7a>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2501      	movs	r5, #1
 8007b3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b42:	3c04      	subs	r4, #4
 8007b44:	6822      	ldr	r2, [r4, #0]
 8007b46:	f000 000f 	and.w	r0, r0, #15
 8007b4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b4e:	6020      	str	r0, [r4, #0]
 8007b50:	e7b5      	b.n	8007abe <__hexnan+0x7a>
 8007b52:	2508      	movs	r5, #8
 8007b54:	e7b3      	b.n	8007abe <__hexnan+0x7a>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0dd      	beq.n	8007b18 <__hexnan+0xd4>
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	f1c3 0320 	rsb	r3, r3, #32
 8007b64:	40da      	lsrs	r2, r3
 8007b66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007b70:	e7d2      	b.n	8007b18 <__hexnan+0xd4>
 8007b72:	3f04      	subs	r7, #4
 8007b74:	e7d0      	b.n	8007b18 <__hexnan+0xd4>
 8007b76:	2004      	movs	r0, #4
 8007b78:	e7d5      	b.n	8007b26 <__hexnan+0xe2>

08007b7a <__ascii_mbtowc>:
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	b901      	cbnz	r1, 8007b80 <__ascii_mbtowc+0x6>
 8007b7e:	a901      	add	r1, sp, #4
 8007b80:	b142      	cbz	r2, 8007b94 <__ascii_mbtowc+0x1a>
 8007b82:	b14b      	cbz	r3, 8007b98 <__ascii_mbtowc+0x1e>
 8007b84:	7813      	ldrb	r3, [r2, #0]
 8007b86:	600b      	str	r3, [r1, #0]
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	1e10      	subs	r0, r2, #0
 8007b8c:	bf18      	it	ne
 8007b8e:	2001      	movne	r0, #1
 8007b90:	b002      	add	sp, #8
 8007b92:	4770      	bx	lr
 8007b94:	4610      	mov	r0, r2
 8007b96:	e7fb      	b.n	8007b90 <__ascii_mbtowc+0x16>
 8007b98:	f06f 0001 	mvn.w	r0, #1
 8007b9c:	e7f8      	b.n	8007b90 <__ascii_mbtowc+0x16>

08007b9e <_realloc_r>:
 8007b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	b921      	cbnz	r1, 8007bb4 <_realloc_r+0x16>
 8007baa:	4611      	mov	r1, r2
 8007bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb0:	f7fd be84 	b.w	80058bc <_malloc_r>
 8007bb4:	b92a      	cbnz	r2, 8007bc2 <_realloc_r+0x24>
 8007bb6:	f7fd fe0f 	bl	80057d8 <_free_r>
 8007bba:	4625      	mov	r5, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc2:	f000 fa3f 	bl	8008044 <_malloc_usable_size_r>
 8007bc6:	4284      	cmp	r4, r0
 8007bc8:	4606      	mov	r6, r0
 8007bca:	d802      	bhi.n	8007bd2 <_realloc_r+0x34>
 8007bcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bd0:	d8f4      	bhi.n	8007bbc <_realloc_r+0x1e>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7fd fe71 	bl	80058bc <_malloc_r>
 8007bda:	4680      	mov	r8, r0
 8007bdc:	b908      	cbnz	r0, 8007be2 <_realloc_r+0x44>
 8007bde:	4645      	mov	r5, r8
 8007be0:	e7ec      	b.n	8007bbc <_realloc_r+0x1e>
 8007be2:	42b4      	cmp	r4, r6
 8007be4:	4622      	mov	r2, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	bf28      	it	cs
 8007bea:	4632      	movcs	r2, r6
 8007bec:	f7ff fc5c 	bl	80074a8 <memcpy>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7fd fdf0 	bl	80057d8 <_free_r>
 8007bf8:	e7f1      	b.n	8007bde <_realloc_r+0x40>

08007bfa <__ascii_wctomb>:
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	b141      	cbz	r1, 8007c12 <__ascii_wctomb+0x18>
 8007c00:	2aff      	cmp	r2, #255	@ 0xff
 8007c02:	d904      	bls.n	8007c0e <__ascii_wctomb+0x14>
 8007c04:	228a      	movs	r2, #138	@ 0x8a
 8007c06:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	4770      	bx	lr
 8007c0e:	2001      	movs	r0, #1
 8007c10:	700a      	strb	r2, [r1, #0]
 8007c12:	4770      	bx	lr

08007c14 <__sfputc_r>:
 8007c14:	6893      	ldr	r3, [r2, #8]
 8007c16:	b410      	push	{r4}
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	6093      	str	r3, [r2, #8]
 8007c1e:	da07      	bge.n	8007c30 <__sfputc_r+0x1c>
 8007c20:	6994      	ldr	r4, [r2, #24]
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	db01      	blt.n	8007c2a <__sfputc_r+0x16>
 8007c26:	290a      	cmp	r1, #10
 8007c28:	d102      	bne.n	8007c30 <__sfputc_r+0x1c>
 8007c2a:	bc10      	pop	{r4}
 8007c2c:	f000 b932 	b.w	8007e94 <__swbuf_r>
 8007c30:	6813      	ldr	r3, [r2, #0]
 8007c32:	1c58      	adds	r0, r3, #1
 8007c34:	6010      	str	r0, [r2, #0]
 8007c36:	7019      	strb	r1, [r3, #0]
 8007c38:	4608      	mov	r0, r1
 8007c3a:	bc10      	pop	{r4}
 8007c3c:	4770      	bx	lr

08007c3e <__sfputs_r>:
 8007c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c40:	4606      	mov	r6, r0
 8007c42:	460f      	mov	r7, r1
 8007c44:	4614      	mov	r4, r2
 8007c46:	18d5      	adds	r5, r2, r3
 8007c48:	42ac      	cmp	r4, r5
 8007c4a:	d101      	bne.n	8007c50 <__sfputs_r+0x12>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e007      	b.n	8007c60 <__sfputs_r+0x22>
 8007c50:	463a      	mov	r2, r7
 8007c52:	4630      	mov	r0, r6
 8007c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c58:	f7ff ffdc 	bl	8007c14 <__sfputc_r>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d1f3      	bne.n	8007c48 <__sfputs_r+0xa>
 8007c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c64 <_vfiprintf_r>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	460d      	mov	r5, r1
 8007c6a:	4614      	mov	r4, r2
 8007c6c:	4698      	mov	r8, r3
 8007c6e:	4606      	mov	r6, r0
 8007c70:	b09d      	sub	sp, #116	@ 0x74
 8007c72:	b118      	cbz	r0, 8007c7c <_vfiprintf_r+0x18>
 8007c74:	6a03      	ldr	r3, [r0, #32]
 8007c76:	b90b      	cbnz	r3, 8007c7c <_vfiprintf_r+0x18>
 8007c78:	f7fc fe06 	bl	8004888 <__sinit>
 8007c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c7e:	07d9      	lsls	r1, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_vfiprintf_r+0x2a>
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_vfiprintf_r+0x2a>
 8007c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c8a:	f7fc ff16 	bl	8004aba <__retarget_lock_acquire_recursive>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	071b      	lsls	r3, r3, #28
 8007c92:	d501      	bpl.n	8007c98 <_vfiprintf_r+0x34>
 8007c94:	692b      	ldr	r3, [r5, #16]
 8007c96:	b99b      	cbnz	r3, 8007cc0 <_vfiprintf_r+0x5c>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 f938 	bl	8007f10 <__swsetup_r>
 8007ca0:	b170      	cbz	r0, 8007cc0 <_vfiprintf_r+0x5c>
 8007ca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ca4:	07dc      	lsls	r4, r3, #31
 8007ca6:	d504      	bpl.n	8007cb2 <_vfiprintf_r+0x4e>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	b01d      	add	sp, #116	@ 0x74
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	0598      	lsls	r0, r3, #22
 8007cb6:	d4f7      	bmi.n	8007ca8 <_vfiprintf_r+0x44>
 8007cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cba:	f7fc feff 	bl	8004abc <__retarget_lock_release_recursive>
 8007cbe:	e7f3      	b.n	8007ca8 <_vfiprintf_r+0x44>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc4:	2320      	movs	r3, #32
 8007cc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cca:	2330      	movs	r3, #48	@ 0x30
 8007ccc:	f04f 0901 	mov.w	r9, #1
 8007cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cd4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e80 <_vfiprintf_r+0x21c>
 8007cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cdc:	4623      	mov	r3, r4
 8007cde:	469a      	mov	sl, r3
 8007ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ce4:	b10a      	cbz	r2, 8007cea <_vfiprintf_r+0x86>
 8007ce6:	2a25      	cmp	r2, #37	@ 0x25
 8007ce8:	d1f9      	bne.n	8007cde <_vfiprintf_r+0x7a>
 8007cea:	ebba 0b04 	subs.w	fp, sl, r4
 8007cee:	d00b      	beq.n	8007d08 <_vfiprintf_r+0xa4>
 8007cf0:	465b      	mov	r3, fp
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7ff ffa1 	bl	8007c3e <__sfputs_r>
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	f000 80a7 	beq.w	8007e50 <_vfiprintf_r+0x1ec>
 8007d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d04:	445a      	add	r2, fp
 8007d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d08:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 809f 	beq.w	8007e50 <_vfiprintf_r+0x1ec>
 8007d12:	2300      	movs	r3, #0
 8007d14:	f04f 32ff 	mov.w	r2, #4294967295
 8007d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d1c:	f10a 0a01 	add.w	sl, sl, #1
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	9307      	str	r3, [sp, #28]
 8007d24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d28:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d2a:	4654      	mov	r4, sl
 8007d2c:	2205      	movs	r2, #5
 8007d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d32:	4853      	ldr	r0, [pc, #332]	@ (8007e80 <_vfiprintf_r+0x21c>)
 8007d34:	f7fc fec3 	bl	8004abe <memchr>
 8007d38:	9a04      	ldr	r2, [sp, #16]
 8007d3a:	b9d8      	cbnz	r0, 8007d74 <_vfiprintf_r+0x110>
 8007d3c:	06d1      	lsls	r1, r2, #27
 8007d3e:	bf44      	itt	mi
 8007d40:	2320      	movmi	r3, #32
 8007d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d46:	0713      	lsls	r3, r2, #28
 8007d48:	bf44      	itt	mi
 8007d4a:	232b      	movmi	r3, #43	@ 0x2b
 8007d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d50:	f89a 3000 	ldrb.w	r3, [sl]
 8007d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d56:	d015      	beq.n	8007d84 <_vfiprintf_r+0x120>
 8007d58:	4654      	mov	r4, sl
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f04f 0c0a 	mov.w	ip, #10
 8007d60:	9a07      	ldr	r2, [sp, #28]
 8007d62:	4621      	mov	r1, r4
 8007d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d68:	3b30      	subs	r3, #48	@ 0x30
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d94b      	bls.n	8007e06 <_vfiprintf_r+0x1a2>
 8007d6e:	b1b0      	cbz	r0, 8007d9e <_vfiprintf_r+0x13a>
 8007d70:	9207      	str	r2, [sp, #28]
 8007d72:	e014      	b.n	8007d9e <_vfiprintf_r+0x13a>
 8007d74:	eba0 0308 	sub.w	r3, r0, r8
 8007d78:	fa09 f303 	lsl.w	r3, r9, r3
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	46a2      	mov	sl, r4
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	e7d2      	b.n	8007d2a <_vfiprintf_r+0xc6>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	1d19      	adds	r1, r3, #4
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	9103      	str	r1, [sp, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	bfbb      	ittet	lt
 8007d90:	425b      	neglt	r3, r3
 8007d92:	f042 0202 	orrlt.w	r2, r2, #2
 8007d96:	9307      	strge	r3, [sp, #28]
 8007d98:	9307      	strlt	r3, [sp, #28]
 8007d9a:	bfb8      	it	lt
 8007d9c:	9204      	strlt	r2, [sp, #16]
 8007d9e:	7823      	ldrb	r3, [r4, #0]
 8007da0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007da2:	d10a      	bne.n	8007dba <_vfiprintf_r+0x156>
 8007da4:	7863      	ldrb	r3, [r4, #1]
 8007da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da8:	d132      	bne.n	8007e10 <_vfiprintf_r+0x1ac>
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	3402      	adds	r4, #2
 8007dae:	1d1a      	adds	r2, r3, #4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	9203      	str	r2, [sp, #12]
 8007db4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e84 <_vfiprintf_r+0x220>
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	7821      	ldrb	r1, [r4, #0]
 8007dc4:	f7fc fe7b 	bl	8004abe <memchr>
 8007dc8:	b138      	cbz	r0, 8007dda <_vfiprintf_r+0x176>
 8007dca:	2240      	movs	r2, #64	@ 0x40
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	eba0 000a 	sub.w	r0, r0, sl
 8007dd2:	4082      	lsls	r2, r0
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	3401      	adds	r4, #1
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dde:	2206      	movs	r2, #6
 8007de0:	4829      	ldr	r0, [pc, #164]	@ (8007e88 <_vfiprintf_r+0x224>)
 8007de2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007de6:	f7fc fe6a 	bl	8004abe <memchr>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d03f      	beq.n	8007e6e <_vfiprintf_r+0x20a>
 8007dee:	4b27      	ldr	r3, [pc, #156]	@ (8007e8c <_vfiprintf_r+0x228>)
 8007df0:	bb1b      	cbnz	r3, 8007e3a <_vfiprintf_r+0x1d6>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	3307      	adds	r3, #7
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	9303      	str	r3, [sp, #12]
 8007dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e00:	443b      	add	r3, r7
 8007e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e04:	e76a      	b.n	8007cdc <_vfiprintf_r+0x78>
 8007e06:	460c      	mov	r4, r1
 8007e08:	2001      	movs	r0, #1
 8007e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e0e:	e7a8      	b.n	8007d62 <_vfiprintf_r+0xfe>
 8007e10:	2300      	movs	r3, #0
 8007e12:	f04f 0c0a 	mov.w	ip, #10
 8007e16:	4619      	mov	r1, r3
 8007e18:	3401      	adds	r4, #1
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e22:	3a30      	subs	r2, #48	@ 0x30
 8007e24:	2a09      	cmp	r2, #9
 8007e26:	d903      	bls.n	8007e30 <_vfiprintf_r+0x1cc>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0c6      	beq.n	8007dba <_vfiprintf_r+0x156>
 8007e2c:	9105      	str	r1, [sp, #20]
 8007e2e:	e7c4      	b.n	8007dba <_vfiprintf_r+0x156>
 8007e30:	4604      	mov	r4, r0
 8007e32:	2301      	movs	r3, #1
 8007e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e38:	e7f0      	b.n	8007e1c <_vfiprintf_r+0x1b8>
 8007e3a:	ab03      	add	r3, sp, #12
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	462a      	mov	r2, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	4b13      	ldr	r3, [pc, #76]	@ (8007e90 <_vfiprintf_r+0x22c>)
 8007e44:	a904      	add	r1, sp, #16
 8007e46:	f7fb fecd 	bl	8003be4 <_printf_float>
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	1c78      	adds	r0, r7, #1
 8007e4e:	d1d6      	bne.n	8007dfe <_vfiprintf_r+0x19a>
 8007e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e52:	07d9      	lsls	r1, r3, #31
 8007e54:	d405      	bmi.n	8007e62 <_vfiprintf_r+0x1fe>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	059a      	lsls	r2, r3, #22
 8007e5a:	d402      	bmi.n	8007e62 <_vfiprintf_r+0x1fe>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e5e:	f7fc fe2d 	bl	8004abc <__retarget_lock_release_recursive>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	065b      	lsls	r3, r3, #25
 8007e66:	f53f af1f 	bmi.w	8007ca8 <_vfiprintf_r+0x44>
 8007e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e6c:	e71e      	b.n	8007cac <_vfiprintf_r+0x48>
 8007e6e:	ab03      	add	r3, sp, #12
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	462a      	mov	r2, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <_vfiprintf_r+0x22c>)
 8007e78:	a904      	add	r1, sp, #16
 8007e7a:	f7fc f951 	bl	8004120 <_printf_i>
 8007e7e:	e7e4      	b.n	8007e4a <_vfiprintf_r+0x1e6>
 8007e80:	08008433 	.word	0x08008433
 8007e84:	08008439 	.word	0x08008439
 8007e88:	0800843d 	.word	0x0800843d
 8007e8c:	08003be5 	.word	0x08003be5
 8007e90:	08007c3f 	.word	0x08007c3f

08007e94 <__swbuf_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	460e      	mov	r6, r1
 8007e98:	4614      	mov	r4, r2
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	b118      	cbz	r0, 8007ea6 <__swbuf_r+0x12>
 8007e9e:	6a03      	ldr	r3, [r0, #32]
 8007ea0:	b90b      	cbnz	r3, 8007ea6 <__swbuf_r+0x12>
 8007ea2:	f7fc fcf1 	bl	8004888 <__sinit>
 8007ea6:	69a3      	ldr	r3, [r4, #24]
 8007ea8:	60a3      	str	r3, [r4, #8]
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	071a      	lsls	r2, r3, #28
 8007eae:	d501      	bpl.n	8007eb4 <__swbuf_r+0x20>
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	b943      	cbnz	r3, 8007ec6 <__swbuf_r+0x32>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f82a 	bl	8007f10 <__swsetup_r>
 8007ebc:	b118      	cbz	r0, 8007ec6 <__swbuf_r+0x32>
 8007ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	b2f6      	uxtb	r6, r6
 8007ecc:	1a98      	subs	r0, r3, r2
 8007ece:	6963      	ldr	r3, [r4, #20]
 8007ed0:	4637      	mov	r7, r6
 8007ed2:	4283      	cmp	r3, r0
 8007ed4:	dc05      	bgt.n	8007ee2 <__swbuf_r+0x4e>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f7ff fa6f 	bl	80073bc <_fflush_r>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d1ed      	bne.n	8007ebe <__swbuf_r+0x2a>
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	60a3      	str	r3, [r4, #8]
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	6022      	str	r2, [r4, #0]
 8007eee:	701e      	strb	r6, [r3, #0]
 8007ef0:	6962      	ldr	r2, [r4, #20]
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d004      	beq.n	8007f02 <__swbuf_r+0x6e>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	07db      	lsls	r3, r3, #31
 8007efc:	d5e1      	bpl.n	8007ec2 <__swbuf_r+0x2e>
 8007efe:	2e0a      	cmp	r6, #10
 8007f00:	d1df      	bne.n	8007ec2 <__swbuf_r+0x2e>
 8007f02:	4621      	mov	r1, r4
 8007f04:	4628      	mov	r0, r5
 8007f06:	f7ff fa59 	bl	80073bc <_fflush_r>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d0d9      	beq.n	8007ec2 <__swbuf_r+0x2e>
 8007f0e:	e7d6      	b.n	8007ebe <__swbuf_r+0x2a>

08007f10 <__swsetup_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4b29      	ldr	r3, [pc, #164]	@ (8007fb8 <__swsetup_r+0xa8>)
 8007f14:	4605      	mov	r5, r0
 8007f16:	6818      	ldr	r0, [r3, #0]
 8007f18:	460c      	mov	r4, r1
 8007f1a:	b118      	cbz	r0, 8007f24 <__swsetup_r+0x14>
 8007f1c:	6a03      	ldr	r3, [r0, #32]
 8007f1e:	b90b      	cbnz	r3, 8007f24 <__swsetup_r+0x14>
 8007f20:	f7fc fcb2 	bl	8004888 <__sinit>
 8007f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f28:	0719      	lsls	r1, r3, #28
 8007f2a:	d422      	bmi.n	8007f72 <__swsetup_r+0x62>
 8007f2c:	06da      	lsls	r2, r3, #27
 8007f2e:	d407      	bmi.n	8007f40 <__swsetup_r+0x30>
 8007f30:	2209      	movs	r2, #9
 8007f32:	602a      	str	r2, [r5, #0]
 8007f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	e033      	b.n	8007fa8 <__swsetup_r+0x98>
 8007f40:	0758      	lsls	r0, r3, #29
 8007f42:	d512      	bpl.n	8007f6a <__swsetup_r+0x5a>
 8007f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f46:	b141      	cbz	r1, 8007f5a <__swsetup_r+0x4a>
 8007f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	d002      	beq.n	8007f56 <__swsetup_r+0x46>
 8007f50:	4628      	mov	r0, r5
 8007f52:	f7fd fc41 	bl	80057d8 <_free_r>
 8007f56:	2300      	movs	r3, #0
 8007f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	2300      	movs	r3, #0
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f043 0308 	orr.w	r3, r3, #8
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	b94b      	cbnz	r3, 8007f8a <__swsetup_r+0x7a>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f80:	d003      	beq.n	8007f8a <__swsetup_r+0x7a>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f000 f88a 	bl	800809e <__smakebuf_r>
 8007f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8e:	f013 0201 	ands.w	r2, r3, #1
 8007f92:	d00a      	beq.n	8007faa <__swsetup_r+0x9a>
 8007f94:	2200      	movs	r2, #0
 8007f96:	60a2      	str	r2, [r4, #8]
 8007f98:	6962      	ldr	r2, [r4, #20]
 8007f9a:	4252      	negs	r2, r2
 8007f9c:	61a2      	str	r2, [r4, #24]
 8007f9e:	6922      	ldr	r2, [r4, #16]
 8007fa0:	b942      	cbnz	r2, 8007fb4 <__swsetup_r+0xa4>
 8007fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fa6:	d1c5      	bne.n	8007f34 <__swsetup_r+0x24>
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	0799      	lsls	r1, r3, #30
 8007fac:	bf58      	it	pl
 8007fae:	6962      	ldrpl	r2, [r4, #20]
 8007fb0:	60a2      	str	r2, [r4, #8]
 8007fb2:	e7f4      	b.n	8007f9e <__swsetup_r+0x8e>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e7f7      	b.n	8007fa8 <__swsetup_r+0x98>
 8007fb8:	20000020 	.word	0x20000020

08007fbc <_raise_r>:
 8007fbc:	291f      	cmp	r1, #31
 8007fbe:	b538      	push	{r3, r4, r5, lr}
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	d904      	bls.n	8007fd0 <_raise_r+0x14>
 8007fc6:	2316      	movs	r3, #22
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fd2:	b112      	cbz	r2, 8007fda <_raise_r+0x1e>
 8007fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fd8:	b94b      	cbnz	r3, 8007fee <_raise_r+0x32>
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 f830 	bl	8008040 <_getpid_r>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fea:	f000 b817 	b.w	800801c <_kill_r>
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d00a      	beq.n	8008008 <_raise_r+0x4c>
 8007ff2:	1c59      	adds	r1, r3, #1
 8007ff4:	d103      	bne.n	8007ffe <_raise_r+0x42>
 8007ff6:	2316      	movs	r3, #22
 8007ff8:	6003      	str	r3, [r0, #0]
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	e7e7      	b.n	8007fce <_raise_r+0x12>
 8007ffe:	2100      	movs	r1, #0
 8008000:	4620      	mov	r0, r4
 8008002:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008006:	4798      	blx	r3
 8008008:	2000      	movs	r0, #0
 800800a:	e7e0      	b.n	8007fce <_raise_r+0x12>

0800800c <raise>:
 800800c:	4b02      	ldr	r3, [pc, #8]	@ (8008018 <raise+0xc>)
 800800e:	4601      	mov	r1, r0
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f7ff bfd3 	b.w	8007fbc <_raise_r>
 8008016:	bf00      	nop
 8008018:	20000020 	.word	0x20000020

0800801c <_kill_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	2300      	movs	r3, #0
 8008020:	4d06      	ldr	r5, [pc, #24]	@ (800803c <_kill_r+0x20>)
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	602b      	str	r3, [r5, #0]
 800802a:	f7f9 ffc0 	bl	8001fae <_kill>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d102      	bne.n	8008038 <_kill_r+0x1c>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b103      	cbz	r3, 8008038 <_kill_r+0x1c>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	20000420 	.word	0x20000420

08008040 <_getpid_r>:
 8008040:	f7f9 bfae 	b.w	8001fa0 <_getpid>

08008044 <_malloc_usable_size_r>:
 8008044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008048:	1f18      	subs	r0, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfbc      	itt	lt
 800804e:	580b      	ldrlt	r3, [r1, r0]
 8008050:	18c0      	addlt	r0, r0, r3
 8008052:	4770      	bx	lr

08008054 <__swhatbuf_r>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	460c      	mov	r4, r1
 8008058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805c:	4615      	mov	r5, r2
 800805e:	2900      	cmp	r1, #0
 8008060:	461e      	mov	r6, r3
 8008062:	b096      	sub	sp, #88	@ 0x58
 8008064:	da0c      	bge.n	8008080 <__swhatbuf_r+0x2c>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	2100      	movs	r1, #0
 800806a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800806e:	bf14      	ite	ne
 8008070:	2340      	movne	r3, #64	@ 0x40
 8008072:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008076:	2000      	movs	r0, #0
 8008078:	6031      	str	r1, [r6, #0]
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	b016      	add	sp, #88	@ 0x58
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	466a      	mov	r2, sp
 8008082:	f000 f849 	bl	8008118 <_fstat_r>
 8008086:	2800      	cmp	r0, #0
 8008088:	dbed      	blt.n	8008066 <__swhatbuf_r+0x12>
 800808a:	9901      	ldr	r1, [sp, #4]
 800808c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008090:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008094:	4259      	negs	r1, r3
 8008096:	4159      	adcs	r1, r3
 8008098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800809c:	e7eb      	b.n	8008076 <__swhatbuf_r+0x22>

0800809e <__smakebuf_r>:
 800809e:	898b      	ldrh	r3, [r1, #12]
 80080a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080a2:	079d      	lsls	r5, r3, #30
 80080a4:	4606      	mov	r6, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	d507      	bpl.n	80080ba <__smakebuf_r+0x1c>
 80080aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	6123      	str	r3, [r4, #16]
 80080b2:	2301      	movs	r3, #1
 80080b4:	6163      	str	r3, [r4, #20]
 80080b6:	b003      	add	sp, #12
 80080b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ba:	466a      	mov	r2, sp
 80080bc:	ab01      	add	r3, sp, #4
 80080be:	f7ff ffc9 	bl	8008054 <__swhatbuf_r>
 80080c2:	9f00      	ldr	r7, [sp, #0]
 80080c4:	4605      	mov	r5, r0
 80080c6:	4639      	mov	r1, r7
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7fd fbf7 	bl	80058bc <_malloc_r>
 80080ce:	b948      	cbnz	r0, 80080e4 <__smakebuf_r+0x46>
 80080d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d4:	059a      	lsls	r2, r3, #22
 80080d6:	d4ee      	bmi.n	80080b6 <__smakebuf_r+0x18>
 80080d8:	f023 0303 	bic.w	r3, r3, #3
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	e7e2      	b.n	80080aa <__smakebuf_r+0xc>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	6020      	str	r0, [r4, #0]
 80080f4:	b15b      	cbz	r3, 800810e <__smakebuf_r+0x70>
 80080f6:	4630      	mov	r0, r6
 80080f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080fc:	f000 f81e 	bl	800813c <_isatty_r>
 8008100:	b128      	cbz	r0, 800810e <__smakebuf_r+0x70>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	f043 0301 	orr.w	r3, r3, #1
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	431d      	orrs	r5, r3
 8008112:	81a5      	strh	r5, [r4, #12]
 8008114:	e7cf      	b.n	80080b6 <__smakebuf_r+0x18>
	...

08008118 <_fstat_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	2300      	movs	r3, #0
 800811c:	4d06      	ldr	r5, [pc, #24]	@ (8008138 <_fstat_r+0x20>)
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	f7f9 ffa1 	bl	800206c <_fstat>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	d102      	bne.n	8008134 <_fstat_r+0x1c>
 800812e:	682b      	ldr	r3, [r5, #0]
 8008130:	b103      	cbz	r3, 8008134 <_fstat_r+0x1c>
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	bf00      	nop
 8008138:	20000420 	.word	0x20000420

0800813c <_isatty_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	2300      	movs	r3, #0
 8008140:	4d05      	ldr	r5, [pc, #20]	@ (8008158 <_isatty_r+0x1c>)
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7f9 ff9f 	bl	800208a <_isatty>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_isatty_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_isatty_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000420 	.word	0x20000420

0800815c <_init>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr

08008168 <_fini>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr
