
joystick_dma_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003cbc  08003cbc  00004cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd0  08003dd0  00005084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003dd0  08003dd0  00005084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003dd0  08003dd0  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dd4  08003dd4  00004dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08003dd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000084  08003e5c  00005084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08003e5c  000053b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009470  00000000  00000000  000050ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e46  00000000  00000000  0000e51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00010368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e3  00000000  00000000  00010c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018884  00000000  00000000  00011363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b35b  00000000  00000000  00029be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089733  00000000  00000000  00034f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc0  00000000  00000000  000be6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c1378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ca4 	.word	0x08003ca4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003ca4 	.word	0x08003ca4

0800014c <LCD16X2_Init>:
/**
 * @brief Initialize the LCD
 * @param displayMode: Display mode (ON/OFF, cursor, blink)
 */
void LCD16X2_Init(uint8_t displayMode)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    /* Enable GPIO clocks */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000156:	4b4b      	ldr	r3, [pc, #300]	@ (8000284 <LCD16X2_Init+0x138>)
 8000158:	699b      	ldr	r3, [r3, #24]
 800015a:	4a4a      	ldr	r2, [pc, #296]	@ (8000284 <LCD16X2_Init+0x138>)
 800015c:	f043 0304 	orr.w	r3, r3, #4
 8000160:	6193      	str	r3, [r2, #24]
 8000162:	4b48      	ldr	r3, [pc, #288]	@ (8000284 <LCD16X2_Init+0x138>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	f003 0304 	and.w	r3, r3, #4
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800016e:	4b45      	ldr	r3, [pc, #276]	@ (8000284 <LCD16X2_Init+0x138>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	4a44      	ldr	r2, [pc, #272]	@ (8000284 <LCD16X2_Init+0x138>)
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	6193      	str	r3, [r2, #24]
 800017a:	4b42      	ldr	r3, [pc, #264]	@ (8000284 <LCD16X2_Init+0x138>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	f003 0308 	and.w	r3, r3, #8
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	68bb      	ldr	r3, [r7, #8]

    /* Configure GPIO pins */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000186:	f107 0310 	add.w	r3, r7, #16
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000194:	2301      	movs	r3, #1
 8000196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000198:	2300      	movs	r3, #0
 800019a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019c:	2302      	movs	r3, #2
 800019e:	61fb      	str	r3, [r7, #28]

    /* RS pin */
    GPIO_InitStruct.Pin = LCD16X2_RS_Pin;
 80001a0:	2320      	movs	r3, #32
 80001a2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_RS_GPIO_Port, &GPIO_InitStruct);
 80001a4:	f107 0310 	add.w	r3, r7, #16
 80001a8:	4619      	mov	r1, r3
 80001aa:	4837      	ldr	r0, [pc, #220]	@ (8000288 <LCD16X2_Init+0x13c>)
 80001ac:	f001 fe32 	bl	8001e14 <HAL_GPIO_Init>

    /* RW pin */
    GPIO_InitStruct.Pin = LCD16X2_RW_Pin;
 80001b0:	2310      	movs	r3, #16
 80001b2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_RW_GPIO_Port, &GPIO_InitStruct);
 80001b4:	f107 0310 	add.w	r3, r7, #16
 80001b8:	4619      	mov	r1, r3
 80001ba:	4833      	ldr	r0, [pc, #204]	@ (8000288 <LCD16X2_Init+0x13c>)
 80001bc:	f001 fe2a 	bl	8001e14 <HAL_GPIO_Init>

    /* EN pin */
    GPIO_InitStruct.Pin = LCD16X2_EN_Pin;
 80001c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_EN_GPIO_Port, &GPIO_InitStruct);
 80001c6:	f107 0310 	add.w	r3, r7, #16
 80001ca:	4619      	mov	r1, r3
 80001cc:	482e      	ldr	r0, [pc, #184]	@ (8000288 <LCD16X2_Init+0x13c>)
 80001ce:	f001 fe21 	bl	8001e14 <HAL_GPIO_Init>

    /* Data pins */
    GPIO_InitStruct.Pin = LCD16X2_D4_Pin;
 80001d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80001d6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D4_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	482b      	ldr	r0, [pc, #172]	@ (800028c <LCD16X2_Init+0x140>)
 80001e0:	f001 fe18 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD16X2_D5_Pin;
 80001e4:	2380      	movs	r3, #128	@ 0x80
 80001e6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D5_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4827      	ldr	r0, [pc, #156]	@ (800028c <LCD16X2_Init+0x140>)
 80001f0:	f001 fe10 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD16X2_D6_Pin;
 80001f4:	2340      	movs	r3, #64	@ 0x40
 80001f6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D6_GPIO_Port, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4823      	ldr	r0, [pc, #140]	@ (800028c <LCD16X2_Init+0x140>)
 8000200:	f001 fe08 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD16X2_D7_Pin;
 8000204:	2320      	movs	r3, #32
 8000206:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD16X2_D7_GPIO_Port, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	481f      	ldr	r0, [pc, #124]	@ (800028c <LCD16X2_Init+0x140>)
 8000210:	f001 fe00 	bl	8001e14 <HAL_GPIO_Init>

    /* Initialize LCD in 4-bit mode */
    HAL_Delay(50);  /* Wait for LCD to power up */
 8000214:	2032      	movs	r0, #50	@ 0x32
 8000216:	f000 ff11 	bl	800103c <HAL_Delay>

    /* Set RW low for write operations */
    HAL_GPIO_WritePin(LCD16X2_RW_GPIO_Port, LCD16X2_RW_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2110      	movs	r1, #16
 800021e:	481a      	ldr	r0, [pc, #104]	@ (8000288 <LCD16X2_Init+0x13c>)
 8000220:	f001 ff7c 	bl	800211c <HAL_GPIO_WritePin>

    /* Set RS low for command */
    HAL_GPIO_WritePin(LCD16X2_RS_GPIO_Port, LCD16X2_RS_Pin, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2120      	movs	r1, #32
 8000228:	4817      	ldr	r0, [pc, #92]	@ (8000288 <LCD16X2_Init+0x13c>)
 800022a:	f001 ff77 	bl	800211c <HAL_GPIO_WritePin>

    /* Send reset sequence for 4-bit mode */
    LCD16X2_Write4Bits(0x03);
 800022e:	2003      	movs	r0, #3
 8000230:	f000 f918 	bl	8000464 <LCD16X2_Write4Bits>
    HAL_Delay(5);
 8000234:	2005      	movs	r0, #5
 8000236:	f000 ff01 	bl	800103c <HAL_Delay>
    LCD16X2_Write4Bits(0x03);
 800023a:	2003      	movs	r0, #3
 800023c:	f000 f912 	bl	8000464 <LCD16X2_Write4Bits>
    HAL_Delay(1);
 8000240:	2001      	movs	r0, #1
 8000242:	f000 fefb 	bl	800103c <HAL_Delay>
    LCD16X2_Write4Bits(0x03);
 8000246:	2003      	movs	r0, #3
 8000248:	f000 f90c 	bl	8000464 <LCD16X2_Write4Bits>
    HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fef5 	bl	800103c <HAL_Delay>
    LCD16X2_Write4Bits(0x02);  /* Set to 4-bit mode */
 8000252:	2002      	movs	r0, #2
 8000254:	f000 f906 	bl	8000464 <LCD16X2_Write4Bits>
    HAL_Delay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 feef 	bl	800103c <HAL_Delay>

    /* Set function: 4-bit mode, 2 lines, 5x8 dots */
    LCD16X2_WriteCommand(LCD16X2_FUNCTION_SET | LCD16X2_4BIT_MODE | LCD16X2_2LINE | LCD16X2_5x8DOTS);
 800025e:	2028      	movs	r0, #40	@ 0x28
 8000260:	f000 f8b6 	bl	80003d0 <LCD16X2_WriteCommand>

    /* Display control */
    LCD16X2_WriteCommand(LCD16X2_DISPLAY_CONTROL | displayMode);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	b2db      	uxtb	r3, r3
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f8af 	bl	80003d0 <LCD16X2_WriteCommand>

    /* Clear display */
    LCD16X2_ClrScr();
 8000272:	f000 f80d 	bl	8000290 <LCD16X2_ClrScr>

    /* Entry mode set */
    LCD16X2_WriteCommand(LCD16X2_ENTRY_MODE_SET | LCD16X2_ENTRY_LEFT | LCD16X2_ENTRY_SHIFT_DEC);
 8000276:	2006      	movs	r0, #6
 8000278:	f000 f8aa 	bl	80003d0 <LCD16X2_WriteCommand>
}
 800027c:	bf00      	nop
 800027e:	3720      	adds	r7, #32
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40021000 	.word	0x40021000
 8000288:	40010c00 	.word	0x40010c00
 800028c:	40010800 	.word	0x40010800

08000290 <LCD16X2_ClrScr>:

/**
 * @brief Clear the display
 */
void LCD16X2_ClrScr(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    LCD16X2_WriteCommand(LCD16X2_CLEAR_DISPLAY);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 f89b 	bl	80003d0 <LCD16X2_WriteCommand>
    HAL_Delay(2);  /* Clear display command needs longer delay */
 800029a:	2002      	movs	r0, #2
 800029c:	f000 fece 	bl	800103c <HAL_Delay>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <LCD16X2_GotoXY>:
 * @brief Set cursor position
 * @param x: Column position (0-15)
 * @param y: Row position (0-1)
 */
void LCD16X2_GotoXY(uint8_t x, uint8_t y)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	460a      	mov	r2, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
    uint8_t address;

    /* Calculate DDRAM address: first line starts at 0x00, second line at 0x40 */
    address = (y == 0) ? (0x00 + x) : (0x40 + x);
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <LCD16X2_GotoXY+0x1e>
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	3340      	adds	r3, #64	@ 0x40
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	e000      	b.n	80002c4 <LCD16X2_GotoXY+0x20>
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	73fb      	strb	r3, [r7, #15]

    LCD16X2_WriteCommand(LCD16X2_SET_DDRAM_ADDR | address);
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f87e 	bl	80003d0 <LCD16X2_WriteCommand>
}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <LCD16X2_PutChar>:
/**
 * @brief Write a character to the LCD
 * @param c: Character to write
 */
void LCD16X2_PutChar(char c)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    LCD16X2_WriteData((uint8_t)c);
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f885 	bl	80003f8 <LCD16X2_WriteData>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <LCD16X2_Puts>:
/**
 * @brief Write a string to the LCD
 * @param s: String to write
 */
void LCD16X2_Puts(const char *s)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b082      	sub	sp, #8
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
    while(*s)
 80002fe:	e006      	b.n	800030e <LCD16X2_Puts+0x18>
    {
        LCD16X2_PutChar(*s++);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	1c5a      	adds	r2, r3, #1
 8000304:	607a      	str	r2, [r7, #4]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ffe7 	bl	80002dc <LCD16X2_PutChar>
    while(*s)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1f4      	bne.n	8000300 <LCD16X2_Puts+0xa>
    }
}
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <LCD16X2_CreateCustomChar>:
 * @brief Create a custom character
 * @param location: Character code (0-7)
 * @param charmap: Character bitmap (8 bytes)
 */
void LCD16X2_CreateCustomChar(uint8_t location, uint8_t *charmap)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    /* Set CGRAM address */
    LCD16X2_WriteCommand(LCD16X2_SET_CGRAM_ADDR | ((location & 0x7) << 3));
 800032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	b25b      	sxtb	r3, r3
 8000334:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000338:	b25b      	sxtb	r3, r3
 800033a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800033e:	b25b      	sxtb	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f844 	bl	80003d0 <LCD16X2_WriteCommand>

    /* Write character pattern */
    for(i = 0; i < 8; i++)
 8000348:	2300      	movs	r3, #0
 800034a:	73fb      	strb	r3, [r7, #15]
 800034c:	e009      	b.n	8000362 <LCD16X2_CreateCustomChar+0x42>
    {
        LCD16X2_WriteData(charmap[i]);
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	683a      	ldr	r2, [r7, #0]
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f84e 	bl	80003f8 <LCD16X2_WriteData>
    for(i = 0; i < 8; i++)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	3301      	adds	r3, #1
 8000360:	73fb      	strb	r3, [r7, #15]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	2b07      	cmp	r3, #7
 8000366:	d9f2      	bls.n	800034e <LCD16X2_CreateCustomChar+0x2e>
    }

    /* Return to DDRAM address */
    LCD16X2_WriteCommand(LCD16X2_SET_DDRAM_ADDR);
 8000368:	2080      	movs	r0, #128	@ 0x80
 800036a:	f000 f831 	bl	80003d0 <LCD16X2_WriteCommand>
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <LCD16X2_PutCustomChar>:
 * @param x: Column position (0-15)
 * @param y: Row position (0-1)
 * @param location: Character code (0-7)
 */
void LCD16X2_PutCustomChar(uint8_t x, uint8_t y, uint8_t location)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	b082      	sub	sp, #8
 800037a:	af00      	add	r7, sp, #0
 800037c:	4603      	mov	r3, r0
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	460b      	mov	r3, r1
 8000382:	71bb      	strb	r3, [r7, #6]
 8000384:	4613      	mov	r3, r2
 8000386:	717b      	strb	r3, [r7, #5]
    LCD16X2_GotoXY(x, y);
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff88 	bl	80002a4 <LCD16X2_GotoXY>
    LCD16X2_WriteData(location);
 8000394:	797b      	ldrb	r3, [r7, #5]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f82e 	bl	80003f8 <LCD16X2_WriteData>
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <LCD16X2_Write>:
/**
 * @brief Write a byte to the LCD
 * @param data: Byte to write
 */
static void LCD16X2_Write(uint8_t data)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
    LCD16X2_Write4Bits(data >> 4);    /* High nibble */
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	091b      	lsrs	r3, r3, #4
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f855 	bl	8000464 <LCD16X2_Write4Bits>
    LCD16X2_Write4Bits(data & 0x0F);  /* Low nibble */
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f84e 	bl	8000464 <LCD16X2_Write4Bits>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <LCD16X2_WriteCommand>:
/**
 * @brief Write a command to the LCD
 * @param cmd: Command to write
 */
static void LCD16X2_WriteCommand(uint8_t cmd)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
    /* Set RS low for command */
    HAL_GPIO_WritePin(LCD16X2_RS_GPIO_Port, LCD16X2_RS_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2120      	movs	r1, #32
 80003de:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <LCD16X2_WriteCommand+0x24>)
 80003e0:	f001 fe9c 	bl	800211c <HAL_GPIO_WritePin>
    LCD16X2_Write(cmd);
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ffdc 	bl	80003a4 <LCD16X2_Write>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <LCD16X2_WriteData>:
/**
 * @brief Write data to the LCD
 * @param data: Data to write
 */
static void LCD16X2_WriteData(uint8_t data)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
    /* Set RS high for data */
    HAL_GPIO_WritePin(LCD16X2_RS_GPIO_Port, LCD16X2_RS_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2120      	movs	r1, #32
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <LCD16X2_WriteData+0x24>)
 8000408:	f001 fe88 	bl	800211c <HAL_GPIO_WritePin>
    LCD16X2_Write(data);
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ffc8 	bl	80003a4 <LCD16X2_Write>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010c00 	.word	0x40010c00

08000420 <LCD16X2_Pulse_E>:

/**
 * @brief Generate enable pulse
 */
static void LCD16X2_Pulse_E(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD16X2_EN_GPIO_Port, LCD16X2_EN_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800042a:	480d      	ldr	r0, [pc, #52]	@ (8000460 <LCD16X2_Pulse_E+0x40>)
 800042c:	f001 fe76 	bl	800211c <HAL_GPIO_WritePin>
    LCD16X2_Delay_us(1);
 8000430:	2001      	movs	r0, #1
 8000432:	f000 f84f 	bl	80004d4 <LCD16X2_Delay_us>
    HAL_GPIO_WritePin(LCD16X2_EN_GPIO_Port, LCD16X2_EN_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800043c:	4808      	ldr	r0, [pc, #32]	@ (8000460 <LCD16X2_Pulse_E+0x40>)
 800043e:	f001 fe6d 	bl	800211c <HAL_GPIO_WritePin>
    LCD16X2_Delay_us(1);
 8000442:	2001      	movs	r0, #1
 8000444:	f000 f846 	bl	80004d4 <LCD16X2_Delay_us>
    HAL_GPIO_WritePin(LCD16X2_EN_GPIO_Port, LCD16X2_EN_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800044e:	4804      	ldr	r0, [pc, #16]	@ (8000460 <LCD16X2_Pulse_E+0x40>)
 8000450:	f001 fe64 	bl	800211c <HAL_GPIO_WritePin>
    LCD16X2_Delay_us(100);  /* Command execution time */
 8000454:	2064      	movs	r0, #100	@ 0x64
 8000456:	f000 f83d 	bl	80004d4 <LCD16X2_Delay_us>
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010c00 	.word	0x40010c00

08000464 <LCD16X2_Write4Bits>:
/**
 * @brief Write 4 bits to the LCD
 * @param nibble: 4 bits to write
 */
static void LCD16X2_Write4Bits(uint8_t nibble)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
    /* Set data pins */
    HAL_GPIO_WritePin(LCD16X2_D4_GPIO_Port, LCD16X2_D4_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800047c:	4814      	ldr	r0, [pc, #80]	@ (80004d0 <LCD16X2_Write4Bits+0x6c>)
 800047e:	f001 fe4d 	bl	800211c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16X2_D5_GPIO_Port, LCD16X2_D5_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	105b      	asrs	r3, r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	b2db      	uxtb	r3, r3
 800048e:	461a      	mov	r2, r3
 8000490:	2180      	movs	r1, #128	@ 0x80
 8000492:	480f      	ldr	r0, [pc, #60]	@ (80004d0 <LCD16X2_Write4Bits+0x6c>)
 8000494:	f001 fe42 	bl	800211c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16X2_D6_GPIO_Port, LCD16X2_D6_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	109b      	asrs	r3, r3, #2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	2140      	movs	r1, #64	@ 0x40
 80004a8:	4809      	ldr	r0, [pc, #36]	@ (80004d0 <LCD16X2_Write4Bits+0x6c>)
 80004aa:	f001 fe37 	bl	800211c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16X2_D7_GPIO_Port, LCD16X2_D7_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	10db      	asrs	r3, r3, #3
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	2120      	movs	r1, #32
 80004be:	4804      	ldr	r0, [pc, #16]	@ (80004d0 <LCD16X2_Write4Bits+0x6c>)
 80004c0:	f001 fe2c 	bl	800211c <HAL_GPIO_WritePin>

    /* Pulse enable */
    LCD16X2_Pulse_E();
 80004c4:	f7ff ffac 	bl	8000420 <LCD16X2_Pulse_E>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40010800 	.word	0x40010800

080004d4 <LCD16X2_Delay_us>:
/**
 * @brief Microsecond delay
 * @param us: Delay in microseconds
 */
static void LCD16X2_Delay_us(uint32_t us)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    /* Simple delay loop - adjust according to your system clock */
    uint32_t i;
    for(i = 0; i < (us * 8); i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e003      	b.n	80004ea <LCD16X2_Delay_us+0x16>
    {
        __NOP();
 80004e2:	bf00      	nop
    for(i = 0; i < (us * 8); i++)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3f6      	bcc.n	80004e2 <LCD16X2_Delay_us+0xe>
    }
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fd37 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f9c1 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fab9 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000512:	f000 fa99 	bl	8000a48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000516:	f000 fa6d 	bl	80009f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800051a:	f000 fa0f 	bl	800093c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //! display!
  LCD16X2_Init(LCD16X2_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
 800051e:	2004      	movs	r0, #4
 8000520:	f7ff fe14 	bl	800014c <LCD16X2_Init>
  LCD16X2_GotoXY(0, 0);
 8000524:	2100      	movs	r1, #0
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff febc 	bl	80002a4 <LCD16X2_GotoXY>
  LCD16X2_CreateCustomChar(0, dot);
 800052c:	4994      	ldr	r1, [pc, #592]	@ (8000780 <main+0x280>)
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff fef6 	bl	8000320 <LCD16X2_CreateCustomChar>
  LCD16X2_CreateCustomChar(1, obstacle);
 8000534:	4993      	ldr	r1, [pc, #588]	@ (8000784 <main+0x284>)
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff fef2 	bl	8000320 <LCD16X2_CreateCustomChar>
  LCD16X2_CreateCustomChar(3, smileyFace);
 800053c:	4992      	ldr	r1, [pc, #584]	@ (8000788 <main+0x288>)
 800053e:	2003      	movs	r0, #3
 8000540:	f7ff feee 	bl	8000320 <LCD16X2_CreateCustomChar>
  // initial
  	for(int i = 0; i < NR_OF_OBSTACLES; i++){
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	@ 0x24
 8000548:	e0a7      	b.n	800069a <main+0x19a>
  		int rv = rand()%16;
 800054a:	f002 fbc5 	bl	8002cd8 <rand>
 800054e:	4603      	mov	r3, r0
 8000550:	425a      	negs	r2, r3
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	f002 020f 	and.w	r2, r2, #15
 800055a:	bf58      	it	pl
 800055c:	4253      	negpl	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
  		int parimpar = rand()%2;
 8000560:	f002 fbba 	bl	8002cd8 <rand>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	bfb8      	it	lt
 800056e:	425b      	neglt	r3, r3
 8000570:	603b      	str	r3, [r7, #0]
  		//int doitrei = (parimpar==0) ? 2 : 3;
  		xobs[i] = rv;
 8000572:	4986      	ldr	r1, [pc, #536]	@ (800078c <main+0x28c>)
 8000574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		yobs[i] = parimpar;
 800057c:	4984      	ldr	r1, [pc, #528]	@ (8000790 <main+0x290>)
 800057e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		MAP[xobs[i]][yobs[i]]=1;
 8000586:	4a81      	ldr	r2, [pc, #516]	@ (800078c <main+0x28c>)
 8000588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	4980      	ldr	r1, [pc, #512]	@ (8000790 <main+0x290>)
 8000590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000596:	497f      	ldr	r1, [pc, #508]	@ (8000794 <main+0x294>)
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	4413      	add	r3, r2
 800059c:	2201      	movs	r2, #1
 800059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		index[i]=xobs[i];
 80005a2:	4a7a      	ldr	r2, [pc, #488]	@ (800078c <main+0x28c>)
 80005a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005aa:	497b      	ldr	r1, [pc, #492]	@ (8000798 <main+0x298>)
 80005ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		//
  		for(int j = 0; j < MAP_HORIZONTAL; j++){
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	e06a      	b.n	800068e <main+0x18e>
  			if(MAP[j][0] == 1 && MAP[j][1] == 1){
 80005b8:	4a76      	ldr	r2, [pc, #472]	@ (8000794 <main+0x294>)
 80005ba:	6a3b      	ldr	r3, [r7, #32]
 80005bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d121      	bne.n	8000608 <main+0x108>
 80005c4:	4a73      	ldr	r2, [pc, #460]	@ (8000794 <main+0x294>)
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d11a      	bne.n	8000608 <main+0x108>
  				MAP[j][1] = 0;
 80005d2:	4a70      	ldr	r2, [pc, #448]	@ (8000794 <main+0x294>)
 80005d4:	6a3b      	ldr	r3, [r7, #32]
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	4413      	add	r3, r2
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  				for(int k = 0; k < MAP_HORIZONTAL; k++)
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
 80005e2:	e00e      	b.n	8000602 <main+0x102>
  					if(xobs[k] == j)
 80005e4:	4a69      	ldr	r2, [pc, #420]	@ (800078c <main+0x28c>)
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ec:	6a3a      	ldr	r2, [r7, #32]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d104      	bne.n	80005fc <main+0xfc>
  						yobs[k] = 1;
 80005f2:	4a67      	ldr	r2, [pc, #412]	@ (8000790 <main+0x290>)
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	2101      	movs	r1, #1
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  				for(int k = 0; k < MAP_HORIZONTAL; k++)
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	3301      	adds	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	dded      	ble.n	80005e4 <main+0xe4>
  			}
  			if(j > 1 && j < 15)
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	2b01      	cmp	r3, #1
 800060c:	dd3c      	ble.n	8000688 <main+0x188>
 800060e:	6a3b      	ldr	r3, [r7, #32]
 8000610:	2b0e      	cmp	r3, #14
 8000612:	dc39      	bgt.n	8000688 <main+0x188>
  				if((MAP[j][0] == 1 && MAP[j+1][1] == 1) || (MAP[j][0] == 1 && MAP[j-1][1] == 1)){
 8000614:	4a5f      	ldr	r2, [pc, #380]	@ (8000794 <main+0x294>)
 8000616:	6a3b      	ldr	r3, [r7, #32]
 8000618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d107      	bne.n	8000630 <main+0x130>
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	3301      	adds	r3, #1
 8000624:	4a5b      	ldr	r2, [pc, #364]	@ (8000794 <main+0x294>)
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d00d      	beq.n	800064c <main+0x14c>
 8000630:	4a58      	ldr	r2, [pc, #352]	@ (8000794 <main+0x294>)
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d125      	bne.n	8000688 <main+0x188>
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	3b01      	subs	r3, #1
 8000640:	4a54      	ldr	r2, [pc, #336]	@ (8000794 <main+0x294>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d11d      	bne.n	8000688 <main+0x188>
  					MAP[j][0] = 0;
 800064c:	4a51      	ldr	r2, [pc, #324]	@ (8000794 <main+0x294>)
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	2100      	movs	r1, #0
 8000652:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  				for(int k = 0; k < MAP_HORIZONTAL; k++)
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	e012      	b.n	8000682 <main+0x182>
  					if(xobs[k] == j)
 800065c:	4a4b      	ldr	r2, [pc, #300]	@ (800078c <main+0x28c>)
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	6a3a      	ldr	r2, [r7, #32]
 8000666:	429a      	cmp	r2, r3
 8000668:	d108      	bne.n	800067c <main+0x17c>
  						xobs[k]++;
 800066a:	4a48      	ldr	r2, [pc, #288]	@ (800078c <main+0x28c>)
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	4945      	ldr	r1, [pc, #276]	@ (800078c <main+0x28c>)
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				for(int k = 0; k < MAP_HORIZONTAL; k++)
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	3301      	adds	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	dde9      	ble.n	800065c <main+0x15c>
  		for(int j = 0; j < MAP_HORIZONTAL; j++){
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	3301      	adds	r3, #1
 800068c:	623b      	str	r3, [r7, #32]
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	dd91      	ble.n	80005b8 <main+0xb8>
  	for(int i = 0; i < NR_OF_OBSTACLES; i++){
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	3301      	adds	r3, #1
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
 800069a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069c:	2b05      	cmp	r3, #5
 800069e:	f77f af54 	ble.w	800054a <main+0x4a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, ANALOG_BUFFER_SIZE);
 80006a2:	2202      	movs	r2, #2
 80006a4:	493d      	ldr	r1, [pc, #244]	@ (800079c <main+0x29c>)
 80006a6:	483e      	ldr	r0, [pc, #248]	@ (80007a0 <main+0x2a0>)
 80006a8:	f000 fdc4 	bl	8001234 <HAL_ADC_Start_DMA>

		// moving
		int xvalue = ADC_Buffer[1];
 80006ac:	4b3b      	ldr	r3, [pc, #236]	@ (800079c <main+0x29c>)
 80006ae:	885b      	ldrh	r3, [r3, #2]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	60fb      	str	r3, [r7, #12]
		int yvalue = ADC_Buffer[0];
 80006b4:	4b39      	ldr	r3, [pc, #228]	@ (800079c <main+0x29c>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	60bb      	str	r3, [r7, #8]
		if(xvalue < 2000){
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006c2:	da09      	bge.n	80006d8 <main+0x1d8>
			if(X_Actual > 0){
 80006c4:	4b37      	ldr	r3, [pc, #220]	@ (80007a4 <main+0x2a4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dd13      	ble.n	80006f4 <main+0x1f4>
				X_Actual--;
 80006cc:	4b35      	ldr	r3, [pc, #212]	@ (80007a4 <main+0x2a4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a34      	ldr	r2, [pc, #208]	@ (80007a4 <main+0x2a4>)
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e00d      	b.n	80006f4 <main+0x1f4>
			}
		}
		else if(xvalue > 3700){
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f640 6274 	movw	r2, #3700	@ 0xe74
 80006de:	4293      	cmp	r3, r2
 80006e0:	dd08      	ble.n	80006f4 <main+0x1f4>
			if(X_Actual < MAP_HORIZONTAL)
 80006e2:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <main+0x2a4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	dc04      	bgt.n	80006f4 <main+0x1f4>
			{
				X_Actual++;
 80006ea:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <main+0x2a4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a2c      	ldr	r2, [pc, #176]	@ (80007a4 <main+0x2a4>)
 80006f2:	6013      	str	r3, [r2, #0]
			}
		}
		if(yvalue < 2000){
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006fa:	da09      	bge.n	8000710 <main+0x210>
			if(Y_Actual == 0){
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <main+0x2a8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <main+0x22c>
				Y_Actual++;
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <main+0x2a8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a27      	ldr	r2, [pc, #156]	@ (80007a8 <main+0x2a8>)
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e00d      	b.n	800072c <main+0x22c>
			}
		}else if(yvalue > 3700){
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000716:	4293      	cmp	r3, r2
 8000718:	dd08      	ble.n	800072c <main+0x22c>
			if(Y_Actual == 1)
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <main+0x2a8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d104      	bne.n	800072c <main+0x22c>
			{
				Y_Actual--;
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <main+0x2a8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <main+0x2a8>)
 800072a:	6013      	str	r3, [r2, #0]
			}
		}
		// print caracter la (X_Actual, Y_Actual);
		LCD16X2_ClrScr();
 800072c:	f7ff fdb0 	bl	8000290 <LCD16X2_ClrScr>
		LCD16X2_PutCustomChar(X_Actual, Y_Actual, 3);
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <main+0x2a4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <main+0x2a8>)
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	b2d1      	uxtb	r1, r2
 800073c:	2203      	movs	r2, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fe19 	bl	8000376 <LCD16X2_PutCustomChar>
		for(int i = 0; i < NR_OF_OBSTACLES; i++){
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e04a      	b.n	80007e0 <main+0x2e0>
			// move obstacles towards start position.
			if(time%procent==0){
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <main+0x2ac>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a18      	ldr	r2, [pc, #96]	@ (80007b0 <main+0x2b0>)
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	fb93 f1f2 	sdiv	r1, r3, r2
 8000756:	fb01 f202 	mul.w	r2, r1, r2
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d12e      	bne.n	80007be <main+0x2be>
				if(xobs[i] > 0)
 8000760:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <main+0x28c>)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000768:	2b00      	cmp	r3, #0
 800076a:	dd23      	ble.n	80007b4 <main+0x2b4>
					xobs[i]--;
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <main+0x28c>)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4905      	ldr	r1, [pc, #20]	@ (800078c <main+0x28c>)
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800077e:	e01e      	b.n	80007be <main+0x2be>
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000010 	.word	0x20000010
 800078c:	2000022c 	.word	0x2000022c
 8000790:	20000244 	.word	0x20000244
 8000794:	20000168 	.word	0x20000168
 8000798:	200001e8 	.word	0x200001e8
 800079c:	20000164 	.word	0x20000164
 80007a0:	200000a0 	.word	0x200000a0
 80007a4:	2000015c 	.word	0x2000015c
 80007a8:	20000160 	.word	0x20000160
 80007ac:	20000228 	.word	0x20000228
 80007b0:	20000018 	.word	0x20000018
				else{
					xobs[i] = 16;
 80007b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000874 <main+0x374>)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	2110      	movs	r1, #16
 80007ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
			}
//			LCD16X2_GotoXY(xobs[i], yobs[i]);
//			LCD16X2_PutChar(3);
			LCD16X2_PutCustomChar(xobs[i], yobs[i], 1);
 80007be:	4a2d      	ldr	r2, [pc, #180]	@ (8000874 <main+0x374>)
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c6:	b2d8      	uxtb	r0, r3
 80007c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <main+0x378>)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	f7ff fdce 	bl	8000376 <LCD16X2_PutCustomChar>
		for(int i = 0; i < NR_OF_OBSTACLES; i++){
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	ddb1      	ble.n	800074a <main+0x24a>
		}
				// check if obstacle was hit
		for(int i = 0; i < NR_OF_OBSTACLES; i++){
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	e019      	b.n	8000820 <main+0x320>
			if(X_Actual == xobs[i] && Y_Actual == yobs[i])
 80007ec:	4a21      	ldr	r2, [pc, #132]	@ (8000874 <main+0x374>)
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <main+0x37c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d10e      	bne.n	800081a <main+0x31a>
 80007fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000878 <main+0x378>)
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <main+0x380>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	d106      	bne.n	800081a <main+0x31a>
			{
				LCD16X2_ClrScr();
 800080c:	f7ff fd40 	bl	8000290 <LCD16X2_ClrScr>
				LCD16X2_Puts("You lost!");
 8000810:	481c      	ldr	r0, [pc, #112]	@ (8000884 <main+0x384>)
 8000812:	f7ff fd70 	bl	80002f6 <LCD16X2_Puts>
				return 0;
 8000816:	2300      	movs	r3, #0
 8000818:	e028      	b.n	800086c <main+0x36c>
		for(int i = 0; i < NR_OF_OBSTACLES; i++){
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	3301      	adds	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	2b05      	cmp	r3, #5
 8000824:	dde2      	ble.n	80007ec <main+0x2ec>
			}
		}
		// delay
		time+=300;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <main+0x388>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800082e:	4a16      	ldr	r2, [pc, #88]	@ (8000888 <main+0x388>)
 8000830:	6013      	str	r3, [r2, #0]
		if(time == 6000)
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <main+0x388>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f241 7270 	movw	r2, #6000	@ 0x1770
 800083a:	4293      	cmp	r3, r2
 800083c:	d105      	bne.n	800084a <main+0x34a>
			procent-=300;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <main+0x38c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000846:	4a11      	ldr	r2, [pc, #68]	@ (800088c <main+0x38c>)
 8000848:	6013      	str	r3, [r2, #0]
		if(time == 18000)
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <main+0x388>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f244 6250 	movw	r2, #18000	@ 0x4650
 8000852:	4293      	cmp	r3, r2
 8000854:	d105      	bne.n	8000862 <main+0x362>
			procent-=300;
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <main+0x38c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800085e:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <main+0x38c>)
 8000860:	6013      	str	r3, [r2, #0]
		HAL_Delay(300);
 8000862:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000866:	f000 fbe9 	bl	800103c <HAL_Delay>
  {
 800086a:	e71a      	b.n	80006a2 <main+0x1a2>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800086c:	4618      	mov	r0, r3
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000022c 	.word	0x2000022c
 8000878:	20000244 	.word	0x20000244
 800087c:	2000015c 	.word	0x2000015c
 8000880:	20000160 	.word	0x20000160
 8000884:	08003cbc 	.word	0x08003cbc
 8000888:	20000228 	.word	0x20000228
 800088c:	20000018 	.word	0x20000018

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	@ 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800089a:	2228      	movs	r2, #40	@ 0x28
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fb5d 	bl	8002f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fc57 	bl	8002190 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f93a 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fec3 	bl	8002694 <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000914:	f000 f924 	bl	8000b60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000918:	2302      	movs	r3, #2
 800091a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f002 f844 	bl	80029b0 <HAL_RCCEx_PeriphCLKConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800092e:	f000 f917 	bl	8000b60 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	@ 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800094c:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <MX_ADC1_Init+0xb0>)
 800094e:	4a28      	ldr	r2, [pc, #160]	@ (80009f0 <MX_ADC1_Init+0xb4>)
 8000950:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000952:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <MX_ADC1_Init+0xb0>)
 8000954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000958:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800095a:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_ADC1_Init+0xb0>)
 800095c:	2200      	movs	r2, #0
 800095e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_ADC1_Init+0xb0>)
 8000962:	2200      	movs	r2, #0
 8000964:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_ADC1_Init+0xb0>)
 8000968:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800096c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_ADC1_Init+0xb0>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_ADC1_Init+0xb0>)
 8000976:	2202      	movs	r2, #2
 8000978:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097a:	481c      	ldr	r0, [pc, #112]	@ (80009ec <MX_ADC1_Init+0xb0>)
 800097c:	f000 fb82 	bl	8001084 <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000986:	f000 f8eb 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;	// PC14
 800098a:	230e      	movs	r3, #14
 800098c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098e:	2301      	movs	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4814      	ldr	r0, [pc, #80]	@ (80009ec <MX_ADC1_Init+0xb0>)
 800099c:	f000 fd44 	bl	8001428 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 f8db 	bl	8000b60 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_15;  // PC15
 80009aa:	230f      	movs	r3, #15
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	480c      	ldr	r0, [pc, #48]	@ (80009ec <MX_ADC1_Init+0xb0>)
 80009bc:	f000 fd34 	bl	8001428 <HAL_ADC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009c6:	f000 f8cb 	bl	8000b60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	@ (80009ec <MX_ADC1_Init+0xb0>)
 80009d4:	f000 fd28 	bl	8001428 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009de:	f000 f8bf 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000a0 	.word	0x200000a0
 80009f0:	40012400 	.word	0x40012400

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f002 f876 	bl	8002b1c <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f893 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000114 	.word	0x20000114
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_DMA_Init+0x38>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a0b      	ldr	r2, [pc, #44]	@ (8000a80 <MX_DMA_Init+0x38>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_DMA_Init+0x38>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	200b      	movs	r0, #11
 8000a6c:	f000 ffad 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a70:	200b      	movs	r0, #11
 8000a72:	f000 ffc6 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a26      	ldr	r2, [pc, #152]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000ab6:	f043 0320 	orr.w	r3, r3, #32
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0320 	and.w	r3, r3, #32
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a20      	ldr	r2, [pc, #128]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_GPIO_Init+0xcc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2120      	movs	r1, #32
 8000afc:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <MX_GPIO_Init+0xd0>)
 8000afe:	f001 fb0d 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0xd4>)
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <MX_GPIO_Init+0xd8>)
 8000b18:	f001 f97c 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <MX_GPIO_Init+0xd0>)
 8000b34:	f001 f96e 	bl	8001e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2028      	movs	r0, #40	@ 0x28
 8000b3e:	f000 ff44 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b42:	2028      	movs	r0, #40	@ 0x28
 8000b44:	f000 ff5d 	bl	8001a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800
 8000b58:	10110000 	.word	0x10110000
 8000b5c:	40011000 	.word	0x40011000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_MspInit+0x60>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_MspInit+0x60>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a29      	ldr	r2, [pc, #164]	@ (8000c90 <HAL_ADC_MspInit+0xc0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d14a      	bne.n	8000c86 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf0:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <HAL_ADC_MspInit+0xc4>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a27      	ldr	r2, [pc, #156]	@ (8000c94 <HAL_ADC_MspInit+0xc4>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <HAL_ADC_MspInit+0xc4>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <HAL_ADC_MspInit+0xc4>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a21      	ldr	r2, [pc, #132]	@ (8000c94 <HAL_ADC_MspInit+0xc4>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <HAL_ADC_MspInit+0xc4>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c20:	2330      	movs	r3, #48	@ 0x30
 8000c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c24:	2303      	movs	r3, #3
 8000c26:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481a      	ldr	r0, [pc, #104]	@ (8000c98 <HAL_ADC_MspInit+0xc8>)
 8000c30:	f001 f8f0 	bl	8001e14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c34:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c36:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca0 <HAL_ADC_MspInit+0xd0>)
 8000c38:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c40:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c6a:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c6c:	f000 fee4 	bl	8001a38 <HAL_DMA_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000c76:	f7ff ff73 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c7e:	621a      	str	r2, [r3, #32]
 8000c80:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3720      	adds	r7, #32
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40012400 	.word	0x40012400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	200000d0 	.word	0x200000d0
 8000ca0:	40020008 	.word	0x40020008

08000ca4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a15      	ldr	r2, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0x70>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d123      	bne.n	8000d0c <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HAL_UART_MspInit+0x74>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	4a13      	ldr	r2, [pc, #76]	@ (8000d18 <HAL_UART_MspInit+0x74>)
 8000cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cce:	61d3      	str	r3, [r2, #28]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <HAL_UART_MspInit+0x74>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_UART_MspInit+0x74>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_UART_MspInit+0x74>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_UART_MspInit+0x74>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_UART_MspInit+0x78>)
 8000d08:	f001 f884 	bl	8001e14 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40004400 	.word	0x40004400
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010800 	.word	0x40010800

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f948 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <DMA1_Channel1_IRQHandler+0x10>)
 8000d7e:	f000 ff15 	bl	8001bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000d0 	.word	0x200000d0

08000d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d94:	f001 f9da 	bl	800214c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <_kill>:

int _kill(int pid, int sig)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000db4:	f002 f922 	bl	8002ffc <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2216      	movs	r2, #22
 8000dbc:	601a      	str	r2, [r3, #0]
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_exit>:

void _exit (int status)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffe7 	bl	8000daa <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <_exit+0x12>

08000de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
  }
  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e78:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <_isatty>:

int _isatty(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f002 f88a 	bl	8002ffc <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20005000 	.word	0x20005000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	2000025c 	.word	0x2000025c
 8000f1c:	200003b0 	.word	0x200003b0

08000f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f2c:	f7ff fff8 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f32:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a09      	ldr	r2, [pc, #36]	@ (8000f6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f48:	4c09      	ldr	r4, [pc, #36]	@ (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f002 f857 	bl	8003008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5a:	f7ff fad1 	bl	8000500 <main>
  bx lr
 8000f5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000f68:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 8000f6c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000f70:	200003b0 	.word	0x200003b0

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_Init+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_Init+0x28>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 fd13 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fdea 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd2b 	bl	8001a1e <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcf3 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000001c 	.word	0x2000001c
 8000ffc:	20000024 	.word	0x20000024
 8001000:	20000020 	.word	0x20000020

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_IncTick+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_IncTick+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a03      	ldr	r2, [pc, #12]	@ (8001024 <HAL_IncTick+0x20>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000024 	.word	0x20000024
 8001024:	20000260 	.word	0x20000260

08001028 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b02      	ldr	r3, [pc, #8]	@ (8001038 <HAL_GetTick+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000260 	.word	0x20000260

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff fff0 	bl	8001028 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffe0 	bl	8001028 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000024 	.word	0x20000024

08001084 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0be      	b.n	8001224 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fd84 	bl	8000bd0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 faff 	bl	80016cc <ADC_ConversionStop_Disable>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 8099 	bne.w	8001212 <HAL_ADC_Init+0x18e>
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 8095 	bne.w	8001212 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010f0:	f023 0302 	bic.w	r3, r3, #2
 80010f4:	f043 0202 	orr.w	r2, r3, #2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001104:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7b1b      	ldrb	r3, [r3, #12]
 800110a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800110c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4313      	orrs	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800111c:	d003      	beq.n	8001126 <HAL_ADC_Init+0xa2>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d102      	bne.n	800112c <HAL_ADC_Init+0xa8>
 8001126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112a:	e000      	b.n	800112e <HAL_ADC_Init+0xaa>
 800112c:	2300      	movs	r3, #0
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7d1b      	ldrb	r3, [r3, #20]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d119      	bne.n	8001170 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7b1b      	ldrb	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d109      	bne.n	8001158 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	3b01      	subs	r3, #1
 800114a:	035a      	lsls	r2, r3, #13
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	e00b      	b.n	8001170 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115c:	f043 0220 	orr.w	r2, r3, #32
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	430a      	orrs	r2, r1
 8001182:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <HAL_ADC_Init+0x1a8>)
 800118c:	4013      	ands	r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	68b9      	ldr	r1, [r7, #8]
 8001194:	430b      	orrs	r3, r1
 8001196:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011a0:	d003      	beq.n	80011aa <HAL_ADC_Init+0x126>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d104      	bne.n	80011b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	051b      	lsls	r3, r3, #20
 80011b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_ADC_Init+0x1ac>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d10b      	bne.n	80011f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e2:	f023 0303 	bic.w	r3, r3, #3
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011ee:	e018      	b.n	8001222 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	f023 0312 	bic.w	r3, r3, #18
 80011f8:	f043 0210 	orr.w	r2, r3, #16
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001210:	e007      	b.n	8001222 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001216:	f043 0210 	orr.w	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001222:	7dfb      	ldrb	r3, [r7, #23]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	ffe1f7fd 	.word	0xffe1f7fd
 8001230:	ff1f0efe 	.word	0xff1f0efe

08001234 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a64      	ldr	r2, [pc, #400]	@ (80013dc <HAL_ADC_Start_DMA+0x1a8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d004      	beq.n	8001258 <HAL_ADC_Start_DMA+0x24>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a63      	ldr	r2, [pc, #396]	@ (80013e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d106      	bne.n	8001266 <HAL_ADC_Start_DMA+0x32>
 8001258:	4b60      	ldr	r3, [pc, #384]	@ (80013dc <HAL_ADC_Start_DMA+0x1a8>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 80b3 	bne.w	80013cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <HAL_ADC_Start_DMA+0x40>
 8001270:	2302      	movs	r3, #2
 8001272:	e0ae      	b.n	80013d2 <HAL_ADC_Start_DMA+0x19e>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f9cb 	bl	8001618 <ADC_Enable>
 8001282:	4603      	mov	r3, r0
 8001284:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 809a 	bne.w	80013c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001292:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a4e      	ldr	r2, [pc, #312]	@ (80013e0 <HAL_ADC_Start_DMA+0x1ac>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d105      	bne.n	80012b8 <HAL_ADC_Start_DMA+0x84>
 80012ac:	4b4b      	ldr	r3, [pc, #300]	@ (80013dc <HAL_ADC_Start_DMA+0x1a8>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d115      	bne.n	80012e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d026      	beq.n	8001320 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e2:	e01d      	b.n	8001320 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a39      	ldr	r2, [pc, #228]	@ (80013dc <HAL_ADC_Start_DMA+0x1a8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d004      	beq.n	8001304 <HAL_ADC_Start_DMA+0xd0>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a38      	ldr	r2, [pc, #224]	@ (80013e0 <HAL_ADC_Start_DMA+0x1ac>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d10d      	bne.n	8001320 <HAL_ADC_Start_DMA+0xec>
 8001304:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <HAL_ADC_Start_DMA+0x1a8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001314:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001318:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	f023 0206 	bic.w	r2, r3, #6
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001338:	e002      	b.n	8001340 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4a25      	ldr	r2, [pc, #148]	@ (80013e4 <HAL_ADC_Start_DMA+0x1b0>)
 800134e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a24      	ldr	r2, [pc, #144]	@ (80013e8 <HAL_ADC_Start_DMA+0x1b4>)
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <HAL_ADC_Start_DMA+0x1b8>)
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f06f 0202 	mvn.w	r2, #2
 8001368:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001378:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a18      	ldr	r0, [r3, #32]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	334c      	adds	r3, #76	@ 0x4c
 8001384:	4619      	mov	r1, r3
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f000 fbaf 	bl	8001aec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001398:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800139c:	d108      	bne.n	80013b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013ae:	e00f      	b.n	80013d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013c0:	e006      	b.n	80013d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80013ca:	e001      	b.n	80013d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012400 	.word	0x40012400
 80013e0:	40012800 	.word	0x40012800
 80013e4:	0800174f 	.word	0x0800174f
 80013e8:	080017cb 	.word	0x080017cb
 80013ec:	080017e7 	.word	0x080017e7

080013f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
	...

08001428 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x20>
 8001444:	2302      	movs	r3, #2
 8001446:	e0dc      	b.n	8001602 <HAL_ADC_ConfigChannel+0x1da>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b06      	cmp	r3, #6
 8001456:	d81c      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3b05      	subs	r3, #5
 800146a:	221f      	movs	r2, #31
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b05      	subs	r3, #5
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001490:	e03c      	b.n	800150c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d81c      	bhi.n	80014d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b23      	subs	r3, #35	@ 0x23
 80014ac:	221f      	movs	r2, #31
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4019      	ands	r1, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b23      	subs	r3, #35	@ 0x23
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80014d2:	e01b      	b.n	800150c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	@ 0x41
 80014e6:	221f      	movs	r2, #31
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4019      	ands	r1, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b41      	subs	r3, #65	@ 0x41
 8001500:	fa00 f203 	lsl.w	r2, r0, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b09      	cmp	r3, #9
 8001512:	d91c      	bls.n	800154e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d9      	ldr	r1, [r3, #12]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	3b1e      	subs	r3, #30
 8001526:	2207      	movs	r2, #7
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4019      	ands	r1, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6898      	ldr	r0, [r3, #8]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	3b1e      	subs	r3, #30
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	e019      	b.n	8001582 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6919      	ldr	r1, [r3, #16]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	2207      	movs	r2, #7
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	4019      	ands	r1, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	fa00 f203 	lsl.w	r2, r0, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b10      	cmp	r3, #16
 8001588:	d003      	beq.n	8001592 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800158e:	2b11      	cmp	r3, #17
 8001590:	d132      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1d      	ldr	r2, [pc, #116]	@ (800160c <HAL_ADC_ConfigChannel+0x1e4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d125      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d126      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d11a      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_ADC_ConfigChannel+0x1e8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a13      	ldr	r2, [pc, #76]	@ (8001614 <HAL_ADC_ConfigChannel+0x1ec>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	0c9a      	lsrs	r2, r3, #18
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f9      	bne.n	80015da <HAL_ADC_ConfigChannel+0x1b2>
 80015e6:	e007      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	f043 0220 	orr.w	r2, r3, #32
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40012400 	.word	0x40012400
 8001610:	2000001c 	.word	0x2000001c
 8001614:	431bde83 	.word	0x431bde83

08001618 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d040      	beq.n	80016b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0201 	orr.w	r2, r2, #1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <ADC_Enable+0xac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1f      	ldr	r2, [pc, #124]	@ (80016c8 <ADC_Enable+0xb0>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001654:	e002      	b.n	800165c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3b01      	subs	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f9      	bne.n	8001656 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001662:	f7ff fce1 	bl	8001028 <HAL_GetTick>
 8001666:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001668:	e01f      	b.n	80016aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800166a:	f7ff fcdd 	bl	8001028 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d918      	bls.n	80016aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d011      	beq.n	80016aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168a:	f043 0210 	orr.w	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e007      	b.n	80016ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d1d8      	bne.n	800166a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000001c 	.word	0x2000001c
 80016c8:	431bde83 	.word	0x431bde83

080016cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d12e      	bne.n	8001744 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016f6:	f7ff fc97 	bl	8001028 <HAL_GetTick>
 80016fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016fc:	e01b      	b.n	8001736 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016fe:	f7ff fc93 	bl	8001028 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d914      	bls.n	8001736 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d10d      	bne.n	8001736 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	f043 0210 	orr.w	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e007      	b.n	8001746 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d0dc      	beq.n	80016fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001764:	2b00      	cmp	r3, #0
 8001766:	d127      	bne.n	80017b8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800177e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001782:	d115      	bne.n	80017b0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001788:	2b00      	cmp	r3, #0
 800178a:	d111      	bne.n	80017b0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff fe1d 	bl	80013f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017b6:	e004      	b.n	80017c2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fe12 	bl	8001402 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	f043 0204 	orr.w	r2, r3, #4
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff fe01 	bl	8001414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <__NVIC_EnableIRQ+0x34>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	@ (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff90 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff2d 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff42 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff35 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e043      	b.n	8001ad6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <HAL_DMA_Init+0xa8>)
 8001a56:	4413      	add	r3, r2
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_DMA_Init+0xac>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	009a      	lsls	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <HAL_DMA_Init+0xb0>)
 8001a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a82:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	bffdfff8 	.word	0xbffdfff8
 8001ae4:	cccccccd 	.word	0xcccccccd
 8001ae8:	40020000 	.word	0x40020000

08001aec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_DMA_Start_IT+0x20>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e04b      	b.n	8001ba4 <HAL_DMA_Start_IT+0xb8>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d13a      	bne.n	8001b96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f937 	bl	8001db8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 020e 	orr.w	r2, r2, #14
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e00f      	b.n	8001b84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0204 	bic.w	r2, r2, #4
 8001b72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 020a 	orr.w	r2, r2, #10
 8001b82:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e005      	b.n	8001ba2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	2204      	movs	r2, #4
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d04f      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xc8>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d04a      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0204 	bic.w	r2, r2, #4
 8001bfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a66      	ldr	r2, [pc, #408]	@ (8001d9c <HAL_DMA_IRQHandler+0x1f0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d029      	beq.n	8001c5a <HAL_DMA_IRQHandler+0xae>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a65      	ldr	r2, [pc, #404]	@ (8001da0 <HAL_DMA_IRQHandler+0x1f4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_IRQHandler+0xaa>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a63      	ldr	r2, [pc, #396]	@ (8001da4 <HAL_DMA_IRQHandler+0x1f8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xa4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a62      	ldr	r2, [pc, #392]	@ (8001da8 <HAL_DMA_IRQHandler+0x1fc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d012      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x9e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a60      	ldr	r2, [pc, #384]	@ (8001dac <HAL_DMA_IRQHandler+0x200>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00a      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x98>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5f      	ldr	r2, [pc, #380]	@ (8001db0 <HAL_DMA_IRQHandler+0x204>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d102      	bne.n	8001c3e <HAL_DMA_IRQHandler+0x92>
 8001c38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c3c:	e00e      	b.n	8001c5c <HAL_DMA_IRQHandler+0xb0>
 8001c3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c42:	e00b      	b.n	8001c5c <HAL_DMA_IRQHandler+0xb0>
 8001c44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c48:	e008      	b.n	8001c5c <HAL_DMA_IRQHandler+0xb0>
 8001c4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c4e:	e005      	b.n	8001c5c <HAL_DMA_IRQHandler+0xb0>
 8001c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c54:	e002      	b.n	8001c5c <HAL_DMA_IRQHandler+0xb0>
 8001c56:	2340      	movs	r3, #64	@ 0x40
 8001c58:	e000      	b.n	8001c5c <HAL_DMA_IRQHandler+0xb0>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	4a55      	ldr	r2, [pc, #340]	@ (8001db4 <HAL_DMA_IRQHandler+0x208>)
 8001c5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8094 	beq.w	8001d92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c72:	e08e      	b.n	8001d92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	2202      	movs	r2, #2
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d056      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x186>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d051      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 020a 	bic.w	r2, r2, #10
 8001caa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a38      	ldr	r2, [pc, #224]	@ (8001d9c <HAL_DMA_IRQHandler+0x1f0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d029      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x166>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a37      	ldr	r2, [pc, #220]	@ (8001da0 <HAL_DMA_IRQHandler+0x1f4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d022      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x162>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a35      	ldr	r2, [pc, #212]	@ (8001da4 <HAL_DMA_IRQHandler+0x1f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x15c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a34      	ldr	r2, [pc, #208]	@ (8001da8 <HAL_DMA_IRQHandler+0x1fc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d012      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x156>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a32      	ldr	r2, [pc, #200]	@ (8001dac <HAL_DMA_IRQHandler+0x200>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00a      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x150>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a31      	ldr	r2, [pc, #196]	@ (8001db0 <HAL_DMA_IRQHandler+0x204>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d102      	bne.n	8001cf6 <HAL_DMA_IRQHandler+0x14a>
 8001cf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cf4:	e00e      	b.n	8001d14 <HAL_DMA_IRQHandler+0x168>
 8001cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cfa:	e00b      	b.n	8001d14 <HAL_DMA_IRQHandler+0x168>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d00:	e008      	b.n	8001d14 <HAL_DMA_IRQHandler+0x168>
 8001d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d06:	e005      	b.n	8001d14 <HAL_DMA_IRQHandler+0x168>
 8001d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d0c:	e002      	b.n	8001d14 <HAL_DMA_IRQHandler+0x168>
 8001d0e:	2320      	movs	r3, #32
 8001d10:	e000      	b.n	8001d14 <HAL_DMA_IRQHandler+0x168>
 8001d12:	2302      	movs	r3, #2
 8001d14:	4a27      	ldr	r2, [pc, #156]	@ (8001db4 <HAL_DMA_IRQHandler+0x208>)
 8001d16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d034      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d30:	e02f      	b.n	8001d92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	2208      	movs	r2, #8
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d028      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x1e8>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d023      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020e 	bic.w	r2, r2, #14
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	4798      	blx	r3
    }
  }
  return;
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
}
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020008 	.word	0x40020008
 8001da0:	4002001c 	.word	0x4002001c
 8001da4:	40020030 	.word	0x40020030
 8001da8:	40020044 	.word	0x40020044
 8001dac:	40020058 	.word	0x40020058
 8001db0:	4002006c 	.word	0x4002006c
 8001db4:	40020000 	.word	0x40020000

08001db8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d108      	bne.n	8001df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001df6:	e007      	b.n	8001e08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b08b      	sub	sp, #44	@ 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e169      	b.n	80020fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8158 	bne.w	80020f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a9a      	ldr	r2, [pc, #616]	@ (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d05e      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e50:	4a98      	ldr	r2, [pc, #608]	@ (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d875      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e56:	4a98      	ldr	r2, [pc, #608]	@ (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e5c:	4a96      	ldr	r2, [pc, #600]	@ (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d86f      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e62:	4a96      	ldr	r2, [pc, #600]	@ (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d052      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e68:	4a94      	ldr	r2, [pc, #592]	@ (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d869      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a94      	ldr	r2, [pc, #592]	@ (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04c      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e74:	4a92      	ldr	r2, [pc, #584]	@ (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d863      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a92      	ldr	r2, [pc, #584]	@ (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d046      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e80:	4a90      	ldr	r2, [pc, #576]	@ (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d85d      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_GPIO_Init+0xcc>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d859      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e94 <HAL_GPIO_Init+0x80>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001efb 	.word	0x08001efb
 8001ea0:	08001f3d 	.word	0x08001f3d
 8001ea4:	08001f43 	.word	0x08001f43
 8001ea8:	08001f43 	.word	0x08001f43
 8001eac:	08001f43 	.word	0x08001f43
 8001eb0:	08001f43 	.word	0x08001f43
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f43 	.word	0x08001f43
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	4a79      	ldr	r2, [pc, #484]	@ (80020c8 <HAL_GPIO_Init+0x2b4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e029      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e024      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01f      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e01a      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e013      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e009      	b.n	8001f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e003      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          break;
 8001f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	@ 0xff
 8001f48:	d801      	bhi.n	8001f4e <HAL_GPIO_Init+0x13a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_Init+0x13e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	@ 0xff
 8001f58:	d802      	bhi.n	8001f60 <HAL_GPIO_Init+0x14c>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x152>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	3b08      	subs	r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80b1 	beq.w	80020f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f94:	4b4d      	ldr	r3, [pc, #308]	@ (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	@ (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <HAL_GPIO_Init+0x2b8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fac:	4a48      	ldr	r2, [pc, #288]	@ (80020d0 <HAL_GPIO_Init+0x2bc>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	@ (80020d4 <HAL_GPIO_Init+0x2c0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3f      	ldr	r2, [pc, #252]	@ (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1e8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80020dc <HAL_GPIO_Init+0x2c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3d      	ldr	r2, [pc, #244]	@ (80020e0 <HAL_GPIO_Init+0x2cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1e0>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8002000:	2300      	movs	r3, #0
 8002002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002012:	492f      	ldr	r1, [pc, #188]	@ (80020d0 <HAL_GPIO_Init+0x2bc>)
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	492c      	ldr	r1, [pc, #176]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4928      	ldr	r1, [pc, #160]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4922      	ldr	r1, [pc, #136]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	491e      	ldr	r1, [pc, #120]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4918      	ldr	r1, [pc, #96]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208a:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4914      	ldr	r1, [pc, #80]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d021      	beq.n	80020e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	490e      	ldr	r1, [pc, #56]	@ (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e021      	b.n	80020f6 <HAL_GPIO_Init+0x2e2>
 80020b2:	bf00      	nop
 80020b4:	10320000 	.word	0x10320000
 80020b8:	10310000 	.word	0x10310000
 80020bc:	10220000 	.word	0x10220000
 80020c0:	10210000 	.word	0x10210000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10110000 	.word	0x10110000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40011400 	.word	0x40011400
 80020e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_GPIO_Init+0x304>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4909      	ldr	r1, [pc, #36]	@ (8002118 <HAL_GPIO_Init+0x304>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f47f ae8e 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	372c      	adds	r7, #44	@ 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002138:	e003      	b.n	8002142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f806 	bl	800217c <HAL_GPIO_EXTI_Callback>
  }
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e272      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b0:	4b92      	ldr	r3, [pc, #584]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d00c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021bc:	4b8f      	ldr	r3, [pc, #572]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d112      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
 80021c8:	4b8c      	ldr	r3, [pc, #560]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d4:	d10b      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b89      	ldr	r3, [pc, #548]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d06c      	beq.n	80022bc <HAL_RCC_OscConfig+0x12c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d168      	bne.n	80022bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e24c      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x76>
 80021f8:	4b80      	ldr	r3, [pc, #512]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a7f      	ldr	r2, [pc, #508]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e02e      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b7b      	ldr	r3, [pc, #492]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7a      	ldr	r2, [pc, #488]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b78      	ldr	r3, [pc, #480]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a77      	ldr	r2, [pc, #476]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0xbc>
 8002232:	4b72      	ldr	r3, [pc, #456]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a71      	ldr	r2, [pc, #452]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b6f      	ldr	r3, [pc, #444]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6e      	ldr	r2, [pc, #440]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 800224c:	4b6b      	ldr	r3, [pc, #428]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6a      	ldr	r2, [pc, #424]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b68      	ldr	r3, [pc, #416]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a67      	ldr	r2, [pc, #412]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fedc 	bl	8001028 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe fed8 	bl	8001028 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	@ 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e200      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xe4>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fec8 	bl	8001028 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fec4 	bl	8001028 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	@ 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1ec      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x10c>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d063      	beq.n	8002392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	4b4c      	ldr	r3, [pc, #304]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022d6:	4b49      	ldr	r3, [pc, #292]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d11c      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
 80022e2:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b43      	ldr	r3, [pc, #268]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1c0      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4939      	ldr	r1, [pc, #228]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e03a      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fe7d 	bl	8001028 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002332:	f7fe fe79 	bl	8001028 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1a1      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4927      	ldr	r1, [pc, #156]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b26      	ldr	r3, [pc, #152]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fe5c 	bl	8001028 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7fe fe58 	bl	8001028 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e180      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03a      	beq.n	8002414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d019      	beq.n	80023da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7fe fe3c 	bl	8001028 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7fe fe38 	bl	8001028 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e160      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 face 	bl	8002974 <RCC_Delay>
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7fe fe22 	bl	8001028 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e6:	e00f      	b.n	8002408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe fe1e 	bl	8001028 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d908      	bls.n	8002408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e146      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	42420000 	.word	0x42420000
 8002404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b92      	ldr	r3, [pc, #584]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e9      	bne.n	80023e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a6 	beq.w	800256e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b8b      	ldr	r3, [pc, #556]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a87      	ldr	r2, [pc, #540]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b7f      	ldr	r3, [pc, #508]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7e      	ldr	r2, [pc, #504]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7fe fddf 	bl	8001028 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7fe fddb 	bl	8001028 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	@ 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e103      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b75      	ldr	r3, [pc, #468]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x312>
 8002494:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a6e      	ldr	r2, [pc, #440]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a69      	ldr	r2, [pc, #420]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a66      	ldr	r2, [pc, #408]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x356>
 80024cc:	4b61      	ldr	r3, [pc, #388]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a60      	ldr	r2, [pc, #384]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a57      	ldr	r2, [pc, #348]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fd8f 	bl	8001028 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fd8b 	bl	8001028 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0b1      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b4b      	ldr	r3, [pc, #300]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x37e>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe fd79 	bl	8001028 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fd75 	bl	8001028 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e09b      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b40      	ldr	r3, [pc, #256]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a3b      	ldr	r2, [pc, #236]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8087 	beq.w	8002686 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d061      	beq.n	8002648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d146      	bne.n	800261a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b33      	ldr	r3, [pc, #204]	@ (800265c <HAL_RCC_OscConfig+0x4cc>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fd49 	bl	8001028 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fd45 	bl	8001028 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e06d      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4921      	ldr	r1, [pc, #132]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a19      	ldr	r1, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	430b      	orrs	r3, r1
 80025e6:	491b      	ldr	r1, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fd19 	bl	8001028 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fd15 	bl	8001028 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e03d      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x46a>
 8002618:	e035      	b.n	8002686 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fd02 	bl	8001028 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fcfe 	bl	8001028 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e026      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x498>
 8002646:	e01e      	b.n	8002686 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e019      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
 8002654:	40021000 	.word	0x40021000
 8002658:	40007000 	.word	0x40007000
 800265c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_OscConfig+0x500>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	429a      	cmp	r2, r3
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000

08002694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0d0      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d910      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b67      	ldr	r3, [pc, #412]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4965      	ldr	r1, [pc, #404]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b63      	ldr	r3, [pc, #396]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0b8      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f0:	4b59      	ldr	r3, [pc, #356]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a58      	ldr	r2, [pc, #352]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002708:	4b53      	ldr	r3, [pc, #332]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a52      	ldr	r2, [pc, #328]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b50      	ldr	r3, [pc, #320]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	494d      	ldr	r1, [pc, #308]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d040      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d115      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e07f      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e073      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b3d      	ldr	r3, [pc, #244]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e06b      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4936      	ldr	r1, [pc, #216]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7fe fc50 	bl	8001028 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fc4c 	bl	8001028 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e053      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d210      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4922      	ldr	r1, [pc, #136]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e032      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4916      	ldr	r1, [pc, #88]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280e:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	490e      	ldr	r1, [pc, #56]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002822:	f000 f821 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002826:	4602      	mov	r2, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	490a      	ldr	r1, [pc, #40]	@ (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	5ccb      	ldrb	r3, [r1, r3]
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	4a09      	ldr	r2, [pc, #36]	@ (8002860 <HAL_RCC_ClockConfig+0x1cc>)
 800283c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_RCC_ClockConfig+0x1d0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fbae 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40022000 	.word	0x40022000
 8002858:	40021000 	.word	0x40021000
 800285c:	08003cc8 	.word	0x08003cc8
 8002860:	2000001c 	.word	0x2000001c
 8002864:	20000020 	.word	0x20000020

08002868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002882:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d002      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x30>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x36>
 8002896:	e027      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	613b      	str	r3, [r7, #16]
      break;
 800289c:	e027      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d010      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x94>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0c5b      	lsrs	r3, r3, #17
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	fb03 f202 	mul.w	r2, r3, r2
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e004      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0c      	ldr	r2, [pc, #48]	@ (800290c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	613b      	str	r3, [r7, #16]
      break;
 80028e6:	e002      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ea:	613b      	str	r3, [r7, #16]
      break;
 80028ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ee:	693b      	ldr	r3, [r7, #16]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	007a1200 	.word	0x007a1200
 8002904:	08003ce0 	.word	0x08003ce0
 8002908:	08003cf0 	.word	0x08003cf0
 800290c:	003d0900 	.word	0x003d0900

08002910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b02      	ldr	r3, [pc, #8]	@ (8002920 <HAL_RCC_GetHCLKFreq+0x10>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	2000001c 	.word	0x2000001c

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff2 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	08003cd8 	.word	0x08003cd8

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffde 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0adb      	lsrs	r3, r3, #11
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	08003cd8 	.word	0x08003cd8

08002974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <RCC_Delay+0x34>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <RCC_Delay+0x38>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002990:	bf00      	nop
  }
  while (Delay --);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	60fa      	str	r2, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f9      	bne.n	8002990 <RCC_Delay+0x1c>
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	2000001c 	.word	0x2000001c
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d07d      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	61d3      	str	r3, [r2, #28]
 80029e8:	4b49      	ldr	r3, [pc, #292]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b46      	ldr	r3, [pc, #280]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d118      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a04:	4b43      	ldr	r3, [pc, #268]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a42      	ldr	r2, [pc, #264]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a10:	f7fe fb0a 	bl	8001028 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	e008      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a18:	f7fe fb06 	bl	8001028 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	@ 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e06d      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a36:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d02e      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d027      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a54:	4b2e      	ldr	r3, [pc, #184]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a64:	4b2c      	ldr	r3, [pc, #176]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a6a:	4a29      	ldr	r2, [pc, #164]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d014      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fad5 	bl	8001028 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fad1 	bl	8001028 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e036      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ee      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4917      	ldr	r1, [pc, #92]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	490b      	ldr	r1, [pc, #44]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	4904      	ldr	r1, [pc, #16]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42420440 	.word	0x42420440

08002b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e042      	b.n	8002bb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe f8ae 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	@ 0x24
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f82b 	bl	8002bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002bf6:	f023 030c 	bic.w	r3, r3, #12
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd0 <UART_SetConfig+0x114>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d103      	bne.n	8002c2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c24:	f7ff fe92 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	e002      	b.n	8002c32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f7ff fe7a 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8002c30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	4a22      	ldr	r2, [pc, #136]	@ (8002cd4 <UART_SetConfig+0x118>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	0119      	lsls	r1, r3, #4
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	009a      	lsls	r2, r3, #2
 8002c5c:	441a      	add	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c68:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <UART_SetConfig+0x118>)
 8002c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2064      	movs	r0, #100	@ 0x64
 8002c72:	fb00 f303 	mul.w	r3, r0, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	3332      	adds	r3, #50	@ 0x32
 8002c7c:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <UART_SetConfig+0x118>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c88:	4419      	add	r1, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	009a      	lsls	r2, r3, #2
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <UART_SetConfig+0x118>)
 8002ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2064      	movs	r0, #100	@ 0x64
 8002caa:	fb00 f303 	mul.w	r3, r0, r3
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	3332      	adds	r3, #50	@ 0x32
 8002cb4:	4a07      	ldr	r2, [pc, #28]	@ (8002cd4 <UART_SetConfig+0x118>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	51eb851f 	.word	0x51eb851f

08002cd8 <rand>:
 8002cd8:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <rand+0x5c>)
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	681c      	ldr	r4, [r3, #0]
 8002cde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002ce0:	b9b3      	cbnz	r3, 8002d10 <rand+0x38>
 8002ce2:	2018      	movs	r0, #24
 8002ce4:	f000 fa1e 	bl	8003124 <malloc>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6320      	str	r0, [r4, #48]	@ 0x30
 8002cec:	b920      	cbnz	r0, 8002cf8 <rand+0x20>
 8002cee:	2152      	movs	r1, #82	@ 0x52
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <rand+0x60>)
 8002cf2:	4812      	ldr	r0, [pc, #72]	@ (8002d3c <rand+0x64>)
 8002cf4:	f000 f9b0 	bl	8003058 <__assert_func>
 8002cf8:	4911      	ldr	r1, [pc, #68]	@ (8002d40 <rand+0x68>)
 8002cfa:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <rand+0x6c>)
 8002cfc:	e9c0 1300 	strd	r1, r3, [r0]
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <rand+0x70>)
 8002d02:	2100      	movs	r1, #0
 8002d04:	6083      	str	r3, [r0, #8]
 8002d06:	230b      	movs	r3, #11
 8002d08:	8183      	strh	r3, [r0, #12]
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002d10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002d12:	480e      	ldr	r0, [pc, #56]	@ (8002d4c <rand+0x74>)
 8002d14:	690b      	ldr	r3, [r1, #16]
 8002d16:	694c      	ldr	r4, [r1, #20]
 8002d18:	4358      	muls	r0, r3
 8002d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d50 <rand+0x78>)
 8002d1c:	fb02 0004 	mla	r0, r2, r4, r0
 8002d20:	fba3 3202 	umull	r3, r2, r3, r2
 8002d24:	3301      	adds	r3, #1
 8002d26:	eb40 0002 	adc.w	r0, r0, r2
 8002d2a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002d2e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002d32:	bd10      	pop	{r4, pc}
 8002d34:	20000034 	.word	0x20000034
 8002d38:	08003cf2 	.word	0x08003cf2
 8002d3c:	08003d09 	.word	0x08003d09
 8002d40:	abcd330e 	.word	0xabcd330e
 8002d44:	e66d1234 	.word	0xe66d1234
 8002d48:	0005deec 	.word	0x0005deec
 8002d4c:	5851f42d 	.word	0x5851f42d
 8002d50:	4c957f2d 	.word	0x4c957f2d

08002d54 <std>:
 8002d54:	2300      	movs	r3, #0
 8002d56:	b510      	push	{r4, lr}
 8002d58:	4604      	mov	r4, r0
 8002d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d62:	6083      	str	r3, [r0, #8]
 8002d64:	8181      	strh	r1, [r0, #12]
 8002d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d68:	81c2      	strh	r2, [r0, #14]
 8002d6a:	6183      	str	r3, [r0, #24]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2208      	movs	r2, #8
 8002d70:	305c      	adds	r0, #92	@ 0x5c
 8002d72:	f000 f8f4 	bl	8002f5e <memset>
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <std+0x58>)
 8002d78:	6224      	str	r4, [r4, #32]
 8002d7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <std+0x5c>)
 8002d7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d80:	4b0c      	ldr	r3, [pc, #48]	@ (8002db4 <std+0x60>)
 8002d82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d84:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <std+0x64>)
 8002d86:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <std+0x68>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d006      	beq.n	8002d9c <std+0x48>
 8002d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d92:	4294      	cmp	r4, r2
 8002d94:	d002      	beq.n	8002d9c <std+0x48>
 8002d96:	33d0      	adds	r3, #208	@ 0xd0
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	d105      	bne.n	8002da8 <std+0x54>
 8002d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da4:	f000 b954 	b.w	8003050 <__retarget_lock_init_recursive>
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	bf00      	nop
 8002dac:	08002ed9 	.word	0x08002ed9
 8002db0:	08002efb 	.word	0x08002efb
 8002db4:	08002f33 	.word	0x08002f33
 8002db8:	08002f57 	.word	0x08002f57
 8002dbc:	20000264 	.word	0x20000264

08002dc0 <stdio_exit_handler>:
 8002dc0:	4a02      	ldr	r2, [pc, #8]	@ (8002dcc <stdio_exit_handler+0xc>)
 8002dc2:	4903      	ldr	r1, [pc, #12]	@ (8002dd0 <stdio_exit_handler+0x10>)
 8002dc4:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <stdio_exit_handler+0x14>)
 8002dc6:	f000 b869 	b.w	8002e9c <_fwalk_sglue>
 8002dca:	bf00      	nop
 8002dcc:	20000028 	.word	0x20000028
 8002dd0:	08003391 	.word	0x08003391
 8002dd4:	20000038 	.word	0x20000038

08002dd8 <cleanup_stdio>:
 8002dd8:	6841      	ldr	r1, [r0, #4]
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <cleanup_stdio+0x34>)
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4299      	cmp	r1, r3
 8002de0:	4604      	mov	r4, r0
 8002de2:	d001      	beq.n	8002de8 <cleanup_stdio+0x10>
 8002de4:	f000 fad4 	bl	8003390 <_fflush_r>
 8002de8:	68a1      	ldr	r1, [r4, #8]
 8002dea:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <cleanup_stdio+0x38>)
 8002dec:	4299      	cmp	r1, r3
 8002dee:	d002      	beq.n	8002df6 <cleanup_stdio+0x1e>
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 facd 	bl	8003390 <_fflush_r>
 8002df6:	68e1      	ldr	r1, [r4, #12]
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <cleanup_stdio+0x3c>)
 8002dfa:	4299      	cmp	r1, r3
 8002dfc:	d004      	beq.n	8002e08 <cleanup_stdio+0x30>
 8002dfe:	4620      	mov	r0, r4
 8002e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e04:	f000 bac4 	b.w	8003390 <_fflush_r>
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000264 	.word	0x20000264
 8002e10:	200002cc 	.word	0x200002cc
 8002e14:	20000334 	.word	0x20000334

08002e18 <global_stdio_init.part.0>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <global_stdio_init.part.0+0x30>)
 8002e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e4c <global_stdio_init.part.0+0x34>)
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e50 <global_stdio_init.part.0+0x38>)
 8002e20:	4620      	mov	r0, r4
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	2104      	movs	r1, #4
 8002e26:	2200      	movs	r2, #0
 8002e28:	f7ff ff94 	bl	8002d54 <std>
 8002e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e30:	2201      	movs	r2, #1
 8002e32:	2109      	movs	r1, #9
 8002e34:	f7ff ff8e 	bl	8002d54 <std>
 8002e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e42:	2112      	movs	r1, #18
 8002e44:	f7ff bf86 	b.w	8002d54 <std>
 8002e48:	2000039c 	.word	0x2000039c
 8002e4c:	20000264 	.word	0x20000264
 8002e50:	08002dc1 	.word	0x08002dc1

08002e54 <__sfp_lock_acquire>:
 8002e54:	4801      	ldr	r0, [pc, #4]	@ (8002e5c <__sfp_lock_acquire+0x8>)
 8002e56:	f000 b8fc 	b.w	8003052 <__retarget_lock_acquire_recursive>
 8002e5a:	bf00      	nop
 8002e5c:	200003a5 	.word	0x200003a5

08002e60 <__sfp_lock_release>:
 8002e60:	4801      	ldr	r0, [pc, #4]	@ (8002e68 <__sfp_lock_release+0x8>)
 8002e62:	f000 b8f7 	b.w	8003054 <__retarget_lock_release_recursive>
 8002e66:	bf00      	nop
 8002e68:	200003a5 	.word	0x200003a5

08002e6c <__sinit>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4604      	mov	r4, r0
 8002e70:	f7ff fff0 	bl	8002e54 <__sfp_lock_acquire>
 8002e74:	6a23      	ldr	r3, [r4, #32]
 8002e76:	b11b      	cbz	r3, 8002e80 <__sinit+0x14>
 8002e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7c:	f7ff bff0 	b.w	8002e60 <__sfp_lock_release>
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <__sinit+0x28>)
 8002e82:	6223      	str	r3, [r4, #32]
 8002e84:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <__sinit+0x2c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f5      	bne.n	8002e78 <__sinit+0xc>
 8002e8c:	f7ff ffc4 	bl	8002e18 <global_stdio_init.part.0>
 8002e90:	e7f2      	b.n	8002e78 <__sinit+0xc>
 8002e92:	bf00      	nop
 8002e94:	08002dd9 	.word	0x08002dd9
 8002e98:	2000039c 	.word	0x2000039c

08002e9c <_fwalk_sglue>:
 8002e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea0:	4607      	mov	r7, r0
 8002ea2:	4688      	mov	r8, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002eac:	f1b9 0901 	subs.w	r9, r9, #1
 8002eb0:	d505      	bpl.n	8002ebe <_fwalk_sglue+0x22>
 8002eb2:	6824      	ldr	r4, [r4, #0]
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	d1f7      	bne.n	8002ea8 <_fwalk_sglue+0xc>
 8002eb8:	4630      	mov	r0, r6
 8002eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ebe:	89ab      	ldrh	r3, [r5, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d907      	bls.n	8002ed4 <_fwalk_sglue+0x38>
 8002ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	d003      	beq.n	8002ed4 <_fwalk_sglue+0x38>
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4638      	mov	r0, r7
 8002ed0:	47c0      	blx	r8
 8002ed2:	4306      	orrs	r6, r0
 8002ed4:	3568      	adds	r5, #104	@ 0x68
 8002ed6:	e7e9      	b.n	8002eac <_fwalk_sglue+0x10>

08002ed8 <__sread>:
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	460c      	mov	r4, r1
 8002edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee0:	f000 f868 	bl	8002fb4 <_read_r>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	bfab      	itete	ge
 8002ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002eea:	89a3      	ldrhlt	r3, [r4, #12]
 8002eec:	181b      	addge	r3, r3, r0
 8002eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ef2:	bfac      	ite	ge
 8002ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ef6:	81a3      	strhlt	r3, [r4, #12]
 8002ef8:	bd10      	pop	{r4, pc}

08002efa <__swrite>:
 8002efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efe:	461f      	mov	r7, r3
 8002f00:	898b      	ldrh	r3, [r1, #12]
 8002f02:	4605      	mov	r5, r0
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	460c      	mov	r4, r1
 8002f08:	4616      	mov	r6, r2
 8002f0a:	d505      	bpl.n	8002f18 <__swrite+0x1e>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f14:	f000 f83c 	bl	8002f90 <_lseek_r>
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	4632      	mov	r2, r6
 8002f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f20:	81a3      	strh	r3, [r4, #12]
 8002f22:	4628      	mov	r0, r5
 8002f24:	463b      	mov	r3, r7
 8002f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2e:	f000 b853 	b.w	8002fd8 <_write_r>

08002f32 <__sseek>:
 8002f32:	b510      	push	{r4, lr}
 8002f34:	460c      	mov	r4, r1
 8002f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f3a:	f000 f829 	bl	8002f90 <_lseek_r>
 8002f3e:	1c43      	adds	r3, r0, #1
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	bf15      	itete	ne
 8002f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f4e:	81a3      	strheq	r3, [r4, #12]
 8002f50:	bf18      	it	ne
 8002f52:	81a3      	strhne	r3, [r4, #12]
 8002f54:	bd10      	pop	{r4, pc}

08002f56 <__sclose>:
 8002f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5a:	f000 b809 	b.w	8002f70 <_close_r>

08002f5e <memset>:
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4402      	add	r2, r0
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d100      	bne.n	8002f68 <memset+0xa>
 8002f66:	4770      	bx	lr
 8002f68:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6c:	e7f9      	b.n	8002f62 <memset+0x4>
	...

08002f70 <_close_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	2300      	movs	r3, #0
 8002f74:	4d05      	ldr	r5, [pc, #20]	@ (8002f8c <_close_r+0x1c>)
 8002f76:	4604      	mov	r4, r0
 8002f78:	4608      	mov	r0, r1
 8002f7a:	602b      	str	r3, [r5, #0]
 8002f7c:	f7fd ff69 	bl	8000e52 <_close>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d102      	bne.n	8002f8a <_close_r+0x1a>
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	b103      	cbz	r3, 8002f8a <_close_r+0x1a>
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
 8002f8c:	200003a0 	.word	0x200003a0

08002f90 <_lseek_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	4604      	mov	r4, r0
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4d05      	ldr	r5, [pc, #20]	@ (8002fb0 <_lseek_r+0x20>)
 8002f9c:	602a      	str	r2, [r5, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f7fd ff7b 	bl	8000e9a <_lseek>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d102      	bne.n	8002fae <_lseek_r+0x1e>
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	b103      	cbz	r3, 8002fae <_lseek_r+0x1e>
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	200003a0 	.word	0x200003a0

08002fb4 <_read_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4d05      	ldr	r5, [pc, #20]	@ (8002fd4 <_read_r+0x20>)
 8002fc0:	602a      	str	r2, [r5, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f7fd ff0c 	bl	8000de0 <_read>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d102      	bne.n	8002fd2 <_read_r+0x1e>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b103      	cbz	r3, 8002fd2 <_read_r+0x1e>
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	200003a0 	.word	0x200003a0

08002fd8 <_write_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4d05      	ldr	r5, [pc, #20]	@ (8002ff8 <_write_r+0x20>)
 8002fe4:	602a      	str	r2, [r5, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7fd ff17 	bl	8000e1a <_write>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_write_r+0x1e>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_write_r+0x1e>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	200003a0 	.word	0x200003a0

08002ffc <__errno>:
 8002ffc:	4b01      	ldr	r3, [pc, #4]	@ (8003004 <__errno+0x8>)
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000034 	.word	0x20000034

08003008 <__libc_init_array>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	2600      	movs	r6, #0
 800300c:	4d0c      	ldr	r5, [pc, #48]	@ (8003040 <__libc_init_array+0x38>)
 800300e:	4c0d      	ldr	r4, [pc, #52]	@ (8003044 <__libc_init_array+0x3c>)
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	42a6      	cmp	r6, r4
 8003016:	d109      	bne.n	800302c <__libc_init_array+0x24>
 8003018:	f000 fe44 	bl	8003ca4 <_init>
 800301c:	2600      	movs	r6, #0
 800301e:	4d0a      	ldr	r5, [pc, #40]	@ (8003048 <__libc_init_array+0x40>)
 8003020:	4c0a      	ldr	r4, [pc, #40]	@ (800304c <__libc_init_array+0x44>)
 8003022:	1b64      	subs	r4, r4, r5
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	42a6      	cmp	r6, r4
 8003028:	d105      	bne.n	8003036 <__libc_init_array+0x2e>
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003030:	4798      	blx	r3
 8003032:	3601      	adds	r6, #1
 8003034:	e7ee      	b.n	8003014 <__libc_init_array+0xc>
 8003036:	f855 3b04 	ldr.w	r3, [r5], #4
 800303a:	4798      	blx	r3
 800303c:	3601      	adds	r6, #1
 800303e:	e7f2      	b.n	8003026 <__libc_init_array+0x1e>
 8003040:	08003dd0 	.word	0x08003dd0
 8003044:	08003dd0 	.word	0x08003dd0
 8003048:	08003dd0 	.word	0x08003dd0
 800304c:	08003dd4 	.word	0x08003dd4

08003050 <__retarget_lock_init_recursive>:
 8003050:	4770      	bx	lr

08003052 <__retarget_lock_acquire_recursive>:
 8003052:	4770      	bx	lr

08003054 <__retarget_lock_release_recursive>:
 8003054:	4770      	bx	lr
	...

08003058 <__assert_func>:
 8003058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800305a:	4614      	mov	r4, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <__assert_func+0x2c>)
 8003060:	4605      	mov	r5, r0
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68d8      	ldr	r0, [r3, #12]
 8003066:	b14c      	cbz	r4, 800307c <__assert_func+0x24>
 8003068:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <__assert_func+0x30>)
 800306a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800306e:	9100      	str	r1, [sp, #0]
 8003070:	462b      	mov	r3, r5
 8003072:	4906      	ldr	r1, [pc, #24]	@ (800308c <__assert_func+0x34>)
 8003074:	f000 f9b4 	bl	80033e0 <fiprintf>
 8003078:	f000 f9d4 	bl	8003424 <abort>
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <__assert_func+0x38>)
 800307e:	461c      	mov	r4, r3
 8003080:	e7f3      	b.n	800306a <__assert_func+0x12>
 8003082:	bf00      	nop
 8003084:	20000034 	.word	0x20000034
 8003088:	08003d61 	.word	0x08003d61
 800308c:	08003d6e 	.word	0x08003d6e
 8003090:	08003d9c 	.word	0x08003d9c

08003094 <_free_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	4605      	mov	r5, r0
 8003098:	2900      	cmp	r1, #0
 800309a:	d040      	beq.n	800311e <_free_r+0x8a>
 800309c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030a0:	1f0c      	subs	r4, r1, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bfb8      	it	lt
 80030a6:	18e4      	addlt	r4, r4, r3
 80030a8:	f000 f8e6 	bl	8003278 <__malloc_lock>
 80030ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <_free_r+0x8c>)
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	b933      	cbnz	r3, 80030c0 <_free_r+0x2c>
 80030b2:	6063      	str	r3, [r4, #4]
 80030b4:	6014      	str	r4, [r2, #0]
 80030b6:	4628      	mov	r0, r5
 80030b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030bc:	f000 b8e2 	b.w	8003284 <__malloc_unlock>
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	d908      	bls.n	80030d6 <_free_r+0x42>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	1821      	adds	r1, r4, r0
 80030c8:	428b      	cmp	r3, r1
 80030ca:	bf01      	itttt	eq
 80030cc:	6819      	ldreq	r1, [r3, #0]
 80030ce:	685b      	ldreq	r3, [r3, #4]
 80030d0:	1809      	addeq	r1, r1, r0
 80030d2:	6021      	streq	r1, [r4, #0]
 80030d4:	e7ed      	b.n	80030b2 <_free_r+0x1e>
 80030d6:	461a      	mov	r2, r3
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b10b      	cbz	r3, 80030e0 <_free_r+0x4c>
 80030dc:	42a3      	cmp	r3, r4
 80030de:	d9fa      	bls.n	80030d6 <_free_r+0x42>
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	1850      	adds	r0, r2, r1
 80030e4:	42a0      	cmp	r0, r4
 80030e6:	d10b      	bne.n	8003100 <_free_r+0x6c>
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	4401      	add	r1, r0
 80030ec:	1850      	adds	r0, r2, r1
 80030ee:	4283      	cmp	r3, r0
 80030f0:	6011      	str	r1, [r2, #0]
 80030f2:	d1e0      	bne.n	80030b6 <_free_r+0x22>
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4408      	add	r0, r1
 80030fa:	6010      	str	r0, [r2, #0]
 80030fc:	6053      	str	r3, [r2, #4]
 80030fe:	e7da      	b.n	80030b6 <_free_r+0x22>
 8003100:	d902      	bls.n	8003108 <_free_r+0x74>
 8003102:	230c      	movs	r3, #12
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	e7d6      	b.n	80030b6 <_free_r+0x22>
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	1821      	adds	r1, r4, r0
 800310c:	428b      	cmp	r3, r1
 800310e:	bf01      	itttt	eq
 8003110:	6819      	ldreq	r1, [r3, #0]
 8003112:	685b      	ldreq	r3, [r3, #4]
 8003114:	1809      	addeq	r1, r1, r0
 8003116:	6021      	streq	r1, [r4, #0]
 8003118:	6063      	str	r3, [r4, #4]
 800311a:	6054      	str	r4, [r2, #4]
 800311c:	e7cb      	b.n	80030b6 <_free_r+0x22>
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	200003ac 	.word	0x200003ac

08003124 <malloc>:
 8003124:	4b02      	ldr	r3, [pc, #8]	@ (8003130 <malloc+0xc>)
 8003126:	4601      	mov	r1, r0
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f000 b825 	b.w	8003178 <_malloc_r>
 800312e:	bf00      	nop
 8003130:	20000034 	.word	0x20000034

08003134 <sbrk_aligned>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	4e0f      	ldr	r6, [pc, #60]	@ (8003174 <sbrk_aligned+0x40>)
 8003138:	460c      	mov	r4, r1
 800313a:	6831      	ldr	r1, [r6, #0]
 800313c:	4605      	mov	r5, r0
 800313e:	b911      	cbnz	r1, 8003146 <sbrk_aligned+0x12>
 8003140:	f000 f960 	bl	8003404 <_sbrk_r>
 8003144:	6030      	str	r0, [r6, #0]
 8003146:	4621      	mov	r1, r4
 8003148:	4628      	mov	r0, r5
 800314a:	f000 f95b 	bl	8003404 <_sbrk_r>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	d103      	bne.n	800315a <sbrk_aligned+0x26>
 8003152:	f04f 34ff 	mov.w	r4, #4294967295
 8003156:	4620      	mov	r0, r4
 8003158:	bd70      	pop	{r4, r5, r6, pc}
 800315a:	1cc4      	adds	r4, r0, #3
 800315c:	f024 0403 	bic.w	r4, r4, #3
 8003160:	42a0      	cmp	r0, r4
 8003162:	d0f8      	beq.n	8003156 <sbrk_aligned+0x22>
 8003164:	1a21      	subs	r1, r4, r0
 8003166:	4628      	mov	r0, r5
 8003168:	f000 f94c 	bl	8003404 <_sbrk_r>
 800316c:	3001      	adds	r0, #1
 800316e:	d1f2      	bne.n	8003156 <sbrk_aligned+0x22>
 8003170:	e7ef      	b.n	8003152 <sbrk_aligned+0x1e>
 8003172:	bf00      	nop
 8003174:	200003a8 	.word	0x200003a8

08003178 <_malloc_r>:
 8003178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800317c:	1ccd      	adds	r5, r1, #3
 800317e:	f025 0503 	bic.w	r5, r5, #3
 8003182:	3508      	adds	r5, #8
 8003184:	2d0c      	cmp	r5, #12
 8003186:	bf38      	it	cc
 8003188:	250c      	movcc	r5, #12
 800318a:	2d00      	cmp	r5, #0
 800318c:	4606      	mov	r6, r0
 800318e:	db01      	blt.n	8003194 <_malloc_r+0x1c>
 8003190:	42a9      	cmp	r1, r5
 8003192:	d904      	bls.n	800319e <_malloc_r+0x26>
 8003194:	230c      	movs	r3, #12
 8003196:	6033      	str	r3, [r6, #0]
 8003198:	2000      	movs	r0, #0
 800319a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800319e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003274 <_malloc_r+0xfc>
 80031a2:	f000 f869 	bl	8003278 <__malloc_lock>
 80031a6:	f8d8 3000 	ldr.w	r3, [r8]
 80031aa:	461c      	mov	r4, r3
 80031ac:	bb44      	cbnz	r4, 8003200 <_malloc_r+0x88>
 80031ae:	4629      	mov	r1, r5
 80031b0:	4630      	mov	r0, r6
 80031b2:	f7ff ffbf 	bl	8003134 <sbrk_aligned>
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	4604      	mov	r4, r0
 80031ba:	d158      	bne.n	800326e <_malloc_r+0xf6>
 80031bc:	f8d8 4000 	ldr.w	r4, [r8]
 80031c0:	4627      	mov	r7, r4
 80031c2:	2f00      	cmp	r7, #0
 80031c4:	d143      	bne.n	800324e <_malloc_r+0xd6>
 80031c6:	2c00      	cmp	r4, #0
 80031c8:	d04b      	beq.n	8003262 <_malloc_r+0xea>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	4639      	mov	r1, r7
 80031ce:	4630      	mov	r0, r6
 80031d0:	eb04 0903 	add.w	r9, r4, r3
 80031d4:	f000 f916 	bl	8003404 <_sbrk_r>
 80031d8:	4581      	cmp	r9, r0
 80031da:	d142      	bne.n	8003262 <_malloc_r+0xea>
 80031dc:	6821      	ldr	r1, [r4, #0]
 80031de:	4630      	mov	r0, r6
 80031e0:	1a6d      	subs	r5, r5, r1
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7ff ffa6 	bl	8003134 <sbrk_aligned>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d03a      	beq.n	8003262 <_malloc_r+0xea>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	442b      	add	r3, r5
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	f8d8 3000 	ldr.w	r3, [r8]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	bb62      	cbnz	r2, 8003254 <_malloc_r+0xdc>
 80031fa:	f8c8 7000 	str.w	r7, [r8]
 80031fe:	e00f      	b.n	8003220 <_malloc_r+0xa8>
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	1b52      	subs	r2, r2, r5
 8003204:	d420      	bmi.n	8003248 <_malloc_r+0xd0>
 8003206:	2a0b      	cmp	r2, #11
 8003208:	d917      	bls.n	800323a <_malloc_r+0xc2>
 800320a:	1961      	adds	r1, r4, r5
 800320c:	42a3      	cmp	r3, r4
 800320e:	6025      	str	r5, [r4, #0]
 8003210:	bf18      	it	ne
 8003212:	6059      	strne	r1, [r3, #4]
 8003214:	6863      	ldr	r3, [r4, #4]
 8003216:	bf08      	it	eq
 8003218:	f8c8 1000 	streq.w	r1, [r8]
 800321c:	5162      	str	r2, [r4, r5]
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	4630      	mov	r0, r6
 8003222:	f000 f82f 	bl	8003284 <__malloc_unlock>
 8003226:	f104 000b 	add.w	r0, r4, #11
 800322a:	1d23      	adds	r3, r4, #4
 800322c:	f020 0007 	bic.w	r0, r0, #7
 8003230:	1ac2      	subs	r2, r0, r3
 8003232:	bf1c      	itt	ne
 8003234:	1a1b      	subne	r3, r3, r0
 8003236:	50a3      	strne	r3, [r4, r2]
 8003238:	e7af      	b.n	800319a <_malloc_r+0x22>
 800323a:	6862      	ldr	r2, [r4, #4]
 800323c:	42a3      	cmp	r3, r4
 800323e:	bf0c      	ite	eq
 8003240:	f8c8 2000 	streq.w	r2, [r8]
 8003244:	605a      	strne	r2, [r3, #4]
 8003246:	e7eb      	b.n	8003220 <_malloc_r+0xa8>
 8003248:	4623      	mov	r3, r4
 800324a:	6864      	ldr	r4, [r4, #4]
 800324c:	e7ae      	b.n	80031ac <_malloc_r+0x34>
 800324e:	463c      	mov	r4, r7
 8003250:	687f      	ldr	r7, [r7, #4]
 8003252:	e7b6      	b.n	80031c2 <_malloc_r+0x4a>
 8003254:	461a      	mov	r2, r3
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	42a3      	cmp	r3, r4
 800325a:	d1fb      	bne.n	8003254 <_malloc_r+0xdc>
 800325c:	2300      	movs	r3, #0
 800325e:	6053      	str	r3, [r2, #4]
 8003260:	e7de      	b.n	8003220 <_malloc_r+0xa8>
 8003262:	230c      	movs	r3, #12
 8003264:	4630      	mov	r0, r6
 8003266:	6033      	str	r3, [r6, #0]
 8003268:	f000 f80c 	bl	8003284 <__malloc_unlock>
 800326c:	e794      	b.n	8003198 <_malloc_r+0x20>
 800326e:	6005      	str	r5, [r0, #0]
 8003270:	e7d6      	b.n	8003220 <_malloc_r+0xa8>
 8003272:	bf00      	nop
 8003274:	200003ac 	.word	0x200003ac

08003278 <__malloc_lock>:
 8003278:	4801      	ldr	r0, [pc, #4]	@ (8003280 <__malloc_lock+0x8>)
 800327a:	f7ff beea 	b.w	8003052 <__retarget_lock_acquire_recursive>
 800327e:	bf00      	nop
 8003280:	200003a4 	.word	0x200003a4

08003284 <__malloc_unlock>:
 8003284:	4801      	ldr	r0, [pc, #4]	@ (800328c <__malloc_unlock+0x8>)
 8003286:	f7ff bee5 	b.w	8003054 <__retarget_lock_release_recursive>
 800328a:	bf00      	nop
 800328c:	200003a4 	.word	0x200003a4

08003290 <__sflush_r>:
 8003290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	0716      	lsls	r6, r2, #28
 8003298:	4605      	mov	r5, r0
 800329a:	460c      	mov	r4, r1
 800329c:	d454      	bmi.n	8003348 <__sflush_r+0xb8>
 800329e:	684b      	ldr	r3, [r1, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	dc02      	bgt.n	80032aa <__sflush_r+0x1a>
 80032a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	dd48      	ble.n	800333c <__sflush_r+0xac>
 80032aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032ac:	2e00      	cmp	r6, #0
 80032ae:	d045      	beq.n	800333c <__sflush_r+0xac>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032b6:	682f      	ldr	r7, [r5, #0]
 80032b8:	6a21      	ldr	r1, [r4, #32]
 80032ba:	602b      	str	r3, [r5, #0]
 80032bc:	d030      	beq.n	8003320 <__sflush_r+0x90>
 80032be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	0759      	lsls	r1, r3, #29
 80032c4:	d505      	bpl.n	80032d2 <__sflush_r+0x42>
 80032c6:	6863      	ldr	r3, [r4, #4]
 80032c8:	1ad2      	subs	r2, r2, r3
 80032ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032cc:	b10b      	cbz	r3, 80032d2 <__sflush_r+0x42>
 80032ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032d0:	1ad2      	subs	r2, r2, r3
 80032d2:	2300      	movs	r3, #0
 80032d4:	4628      	mov	r0, r5
 80032d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032d8:	6a21      	ldr	r1, [r4, #32]
 80032da:	47b0      	blx	r6
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	d106      	bne.n	80032f0 <__sflush_r+0x60>
 80032e2:	6829      	ldr	r1, [r5, #0]
 80032e4:	291d      	cmp	r1, #29
 80032e6:	d82b      	bhi.n	8003340 <__sflush_r+0xb0>
 80032e8:	4a28      	ldr	r2, [pc, #160]	@ (800338c <__sflush_r+0xfc>)
 80032ea:	40ca      	lsrs	r2, r1
 80032ec:	07d6      	lsls	r6, r2, #31
 80032ee:	d527      	bpl.n	8003340 <__sflush_r+0xb0>
 80032f0:	2200      	movs	r2, #0
 80032f2:	6062      	str	r2, [r4, #4]
 80032f4:	6922      	ldr	r2, [r4, #16]
 80032f6:	04d9      	lsls	r1, r3, #19
 80032f8:	6022      	str	r2, [r4, #0]
 80032fa:	d504      	bpl.n	8003306 <__sflush_r+0x76>
 80032fc:	1c42      	adds	r2, r0, #1
 80032fe:	d101      	bne.n	8003304 <__sflush_r+0x74>
 8003300:	682b      	ldr	r3, [r5, #0]
 8003302:	b903      	cbnz	r3, 8003306 <__sflush_r+0x76>
 8003304:	6560      	str	r0, [r4, #84]	@ 0x54
 8003306:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003308:	602f      	str	r7, [r5, #0]
 800330a:	b1b9      	cbz	r1, 800333c <__sflush_r+0xac>
 800330c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003310:	4299      	cmp	r1, r3
 8003312:	d002      	beq.n	800331a <__sflush_r+0x8a>
 8003314:	4628      	mov	r0, r5
 8003316:	f7ff febd 	bl	8003094 <_free_r>
 800331a:	2300      	movs	r3, #0
 800331c:	6363      	str	r3, [r4, #52]	@ 0x34
 800331e:	e00d      	b.n	800333c <__sflush_r+0xac>
 8003320:	2301      	movs	r3, #1
 8003322:	4628      	mov	r0, r5
 8003324:	47b0      	blx	r6
 8003326:	4602      	mov	r2, r0
 8003328:	1c50      	adds	r0, r2, #1
 800332a:	d1c9      	bne.n	80032c0 <__sflush_r+0x30>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0c6      	beq.n	80032c0 <__sflush_r+0x30>
 8003332:	2b1d      	cmp	r3, #29
 8003334:	d001      	beq.n	800333a <__sflush_r+0xaa>
 8003336:	2b16      	cmp	r3, #22
 8003338:	d11d      	bne.n	8003376 <__sflush_r+0xe6>
 800333a:	602f      	str	r7, [r5, #0]
 800333c:	2000      	movs	r0, #0
 800333e:	e021      	b.n	8003384 <__sflush_r+0xf4>
 8003340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003344:	b21b      	sxth	r3, r3
 8003346:	e01a      	b.n	800337e <__sflush_r+0xee>
 8003348:	690f      	ldr	r7, [r1, #16]
 800334a:	2f00      	cmp	r7, #0
 800334c:	d0f6      	beq.n	800333c <__sflush_r+0xac>
 800334e:	0793      	lsls	r3, r2, #30
 8003350:	bf18      	it	ne
 8003352:	2300      	movne	r3, #0
 8003354:	680e      	ldr	r6, [r1, #0]
 8003356:	bf08      	it	eq
 8003358:	694b      	ldreq	r3, [r1, #20]
 800335a:	1bf6      	subs	r6, r6, r7
 800335c:	600f      	str	r7, [r1, #0]
 800335e:	608b      	str	r3, [r1, #8]
 8003360:	2e00      	cmp	r6, #0
 8003362:	ddeb      	ble.n	800333c <__sflush_r+0xac>
 8003364:	4633      	mov	r3, r6
 8003366:	463a      	mov	r2, r7
 8003368:	4628      	mov	r0, r5
 800336a:	6a21      	ldr	r1, [r4, #32]
 800336c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003370:	47e0      	blx	ip
 8003372:	2800      	cmp	r0, #0
 8003374:	dc07      	bgt.n	8003386 <__sflush_r+0xf6>
 8003376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800337a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800337e:	f04f 30ff 	mov.w	r0, #4294967295
 8003382:	81a3      	strh	r3, [r4, #12]
 8003384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003386:	4407      	add	r7, r0
 8003388:	1a36      	subs	r6, r6, r0
 800338a:	e7e9      	b.n	8003360 <__sflush_r+0xd0>
 800338c:	20400001 	.word	0x20400001

08003390 <_fflush_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	690b      	ldr	r3, [r1, #16]
 8003394:	4605      	mov	r5, r0
 8003396:	460c      	mov	r4, r1
 8003398:	b913      	cbnz	r3, 80033a0 <_fflush_r+0x10>
 800339a:	2500      	movs	r5, #0
 800339c:	4628      	mov	r0, r5
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	b118      	cbz	r0, 80033aa <_fflush_r+0x1a>
 80033a2:	6a03      	ldr	r3, [r0, #32]
 80033a4:	b90b      	cbnz	r3, 80033aa <_fflush_r+0x1a>
 80033a6:	f7ff fd61 	bl	8002e6c <__sinit>
 80033aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f3      	beq.n	800339a <_fflush_r+0xa>
 80033b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033b4:	07d0      	lsls	r0, r2, #31
 80033b6:	d404      	bmi.n	80033c2 <_fflush_r+0x32>
 80033b8:	0599      	lsls	r1, r3, #22
 80033ba:	d402      	bmi.n	80033c2 <_fflush_r+0x32>
 80033bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033be:	f7ff fe48 	bl	8003052 <__retarget_lock_acquire_recursive>
 80033c2:	4628      	mov	r0, r5
 80033c4:	4621      	mov	r1, r4
 80033c6:	f7ff ff63 	bl	8003290 <__sflush_r>
 80033ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033cc:	4605      	mov	r5, r0
 80033ce:	07da      	lsls	r2, r3, #31
 80033d0:	d4e4      	bmi.n	800339c <_fflush_r+0xc>
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	059b      	lsls	r3, r3, #22
 80033d6:	d4e1      	bmi.n	800339c <_fflush_r+0xc>
 80033d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033da:	f7ff fe3b 	bl	8003054 <__retarget_lock_release_recursive>
 80033de:	e7dd      	b.n	800339c <_fflush_r+0xc>

080033e0 <fiprintf>:
 80033e0:	b40e      	push	{r1, r2, r3}
 80033e2:	b503      	push	{r0, r1, lr}
 80033e4:	4601      	mov	r1, r0
 80033e6:	ab03      	add	r3, sp, #12
 80033e8:	4805      	ldr	r0, [pc, #20]	@ (8003400 <fiprintf+0x20>)
 80033ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ee:	6800      	ldr	r0, [r0, #0]
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	f000 f845 	bl	8003480 <_vfiprintf_r>
 80033f6:	b002      	add	sp, #8
 80033f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033fc:	b003      	add	sp, #12
 80033fe:	4770      	bx	lr
 8003400:	20000034 	.word	0x20000034

08003404 <_sbrk_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	2300      	movs	r3, #0
 8003408:	4d05      	ldr	r5, [pc, #20]	@ (8003420 <_sbrk_r+0x1c>)
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	f7fd fd50 	bl	8000eb4 <_sbrk>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d102      	bne.n	800341e <_sbrk_r+0x1a>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	b103      	cbz	r3, 800341e <_sbrk_r+0x1a>
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	200003a0 	.word	0x200003a0

08003424 <abort>:
 8003424:	2006      	movs	r0, #6
 8003426:	b508      	push	{r3, lr}
 8003428:	f000 fb8e 	bl	8003b48 <raise>
 800342c:	2001      	movs	r0, #1
 800342e:	f7fd fccc 	bl	8000dca <_exit>

08003432 <__sfputc_r>:
 8003432:	6893      	ldr	r3, [r2, #8]
 8003434:	b410      	push	{r4}
 8003436:	3b01      	subs	r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	6093      	str	r3, [r2, #8]
 800343c:	da07      	bge.n	800344e <__sfputc_r+0x1c>
 800343e:	6994      	ldr	r4, [r2, #24]
 8003440:	42a3      	cmp	r3, r4
 8003442:	db01      	blt.n	8003448 <__sfputc_r+0x16>
 8003444:	290a      	cmp	r1, #10
 8003446:	d102      	bne.n	800344e <__sfputc_r+0x1c>
 8003448:	bc10      	pop	{r4}
 800344a:	f000 bac1 	b.w	80039d0 <__swbuf_r>
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	1c58      	adds	r0, r3, #1
 8003452:	6010      	str	r0, [r2, #0]
 8003454:	7019      	strb	r1, [r3, #0]
 8003456:	4608      	mov	r0, r1
 8003458:	bc10      	pop	{r4}
 800345a:	4770      	bx	lr

0800345c <__sfputs_r>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	4606      	mov	r6, r0
 8003460:	460f      	mov	r7, r1
 8003462:	4614      	mov	r4, r2
 8003464:	18d5      	adds	r5, r2, r3
 8003466:	42ac      	cmp	r4, r5
 8003468:	d101      	bne.n	800346e <__sfputs_r+0x12>
 800346a:	2000      	movs	r0, #0
 800346c:	e007      	b.n	800347e <__sfputs_r+0x22>
 800346e:	463a      	mov	r2, r7
 8003470:	4630      	mov	r0, r6
 8003472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003476:	f7ff ffdc 	bl	8003432 <__sfputc_r>
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	d1f3      	bne.n	8003466 <__sfputs_r+0xa>
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003480 <_vfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	460d      	mov	r5, r1
 8003486:	4614      	mov	r4, r2
 8003488:	4698      	mov	r8, r3
 800348a:	4606      	mov	r6, r0
 800348c:	b09d      	sub	sp, #116	@ 0x74
 800348e:	b118      	cbz	r0, 8003498 <_vfiprintf_r+0x18>
 8003490:	6a03      	ldr	r3, [r0, #32]
 8003492:	b90b      	cbnz	r3, 8003498 <_vfiprintf_r+0x18>
 8003494:	f7ff fcea 	bl	8002e6c <__sinit>
 8003498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800349a:	07d9      	lsls	r1, r3, #31
 800349c:	d405      	bmi.n	80034aa <_vfiprintf_r+0x2a>
 800349e:	89ab      	ldrh	r3, [r5, #12]
 80034a0:	059a      	lsls	r2, r3, #22
 80034a2:	d402      	bmi.n	80034aa <_vfiprintf_r+0x2a>
 80034a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034a6:	f7ff fdd4 	bl	8003052 <__retarget_lock_acquire_recursive>
 80034aa:	89ab      	ldrh	r3, [r5, #12]
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	d501      	bpl.n	80034b4 <_vfiprintf_r+0x34>
 80034b0:	692b      	ldr	r3, [r5, #16]
 80034b2:	b99b      	cbnz	r3, 80034dc <_vfiprintf_r+0x5c>
 80034b4:	4629      	mov	r1, r5
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 fac8 	bl	8003a4c <__swsetup_r>
 80034bc:	b170      	cbz	r0, 80034dc <_vfiprintf_r+0x5c>
 80034be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034c0:	07dc      	lsls	r4, r3, #31
 80034c2:	d504      	bpl.n	80034ce <_vfiprintf_r+0x4e>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	b01d      	add	sp, #116	@ 0x74
 80034ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ce:	89ab      	ldrh	r3, [r5, #12]
 80034d0:	0598      	lsls	r0, r3, #22
 80034d2:	d4f7      	bmi.n	80034c4 <_vfiprintf_r+0x44>
 80034d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034d6:	f7ff fdbd 	bl	8003054 <__retarget_lock_release_recursive>
 80034da:	e7f3      	b.n	80034c4 <_vfiprintf_r+0x44>
 80034dc:	2300      	movs	r3, #0
 80034de:	9309      	str	r3, [sp, #36]	@ 0x24
 80034e0:	2320      	movs	r3, #32
 80034e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034e6:	2330      	movs	r3, #48	@ 0x30
 80034e8:	f04f 0901 	mov.w	r9, #1
 80034ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80034f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800369c <_vfiprintf_r+0x21c>
 80034f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034f8:	4623      	mov	r3, r4
 80034fa:	469a      	mov	sl, r3
 80034fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003500:	b10a      	cbz	r2, 8003506 <_vfiprintf_r+0x86>
 8003502:	2a25      	cmp	r2, #37	@ 0x25
 8003504:	d1f9      	bne.n	80034fa <_vfiprintf_r+0x7a>
 8003506:	ebba 0b04 	subs.w	fp, sl, r4
 800350a:	d00b      	beq.n	8003524 <_vfiprintf_r+0xa4>
 800350c:	465b      	mov	r3, fp
 800350e:	4622      	mov	r2, r4
 8003510:	4629      	mov	r1, r5
 8003512:	4630      	mov	r0, r6
 8003514:	f7ff ffa2 	bl	800345c <__sfputs_r>
 8003518:	3001      	adds	r0, #1
 800351a:	f000 80a7 	beq.w	800366c <_vfiprintf_r+0x1ec>
 800351e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003520:	445a      	add	r2, fp
 8003522:	9209      	str	r2, [sp, #36]	@ 0x24
 8003524:	f89a 3000 	ldrb.w	r3, [sl]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 809f 	beq.w	800366c <_vfiprintf_r+0x1ec>
 800352e:	2300      	movs	r3, #0
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003538:	f10a 0a01 	add.w	sl, sl, #1
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	9307      	str	r3, [sp, #28]
 8003540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003544:	931a      	str	r3, [sp, #104]	@ 0x68
 8003546:	4654      	mov	r4, sl
 8003548:	2205      	movs	r2, #5
 800354a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800354e:	4853      	ldr	r0, [pc, #332]	@ (800369c <_vfiprintf_r+0x21c>)
 8003550:	f000 fb16 	bl	8003b80 <memchr>
 8003554:	9a04      	ldr	r2, [sp, #16]
 8003556:	b9d8      	cbnz	r0, 8003590 <_vfiprintf_r+0x110>
 8003558:	06d1      	lsls	r1, r2, #27
 800355a:	bf44      	itt	mi
 800355c:	2320      	movmi	r3, #32
 800355e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003562:	0713      	lsls	r3, r2, #28
 8003564:	bf44      	itt	mi
 8003566:	232b      	movmi	r3, #43	@ 0x2b
 8003568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800356c:	f89a 3000 	ldrb.w	r3, [sl]
 8003570:	2b2a      	cmp	r3, #42	@ 0x2a
 8003572:	d015      	beq.n	80035a0 <_vfiprintf_r+0x120>
 8003574:	4654      	mov	r4, sl
 8003576:	2000      	movs	r0, #0
 8003578:	f04f 0c0a 	mov.w	ip, #10
 800357c:	9a07      	ldr	r2, [sp, #28]
 800357e:	4621      	mov	r1, r4
 8003580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003584:	3b30      	subs	r3, #48	@ 0x30
 8003586:	2b09      	cmp	r3, #9
 8003588:	d94b      	bls.n	8003622 <_vfiprintf_r+0x1a2>
 800358a:	b1b0      	cbz	r0, 80035ba <_vfiprintf_r+0x13a>
 800358c:	9207      	str	r2, [sp, #28]
 800358e:	e014      	b.n	80035ba <_vfiprintf_r+0x13a>
 8003590:	eba0 0308 	sub.w	r3, r0, r8
 8003594:	fa09 f303 	lsl.w	r3, r9, r3
 8003598:	4313      	orrs	r3, r2
 800359a:	46a2      	mov	sl, r4
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	e7d2      	b.n	8003546 <_vfiprintf_r+0xc6>
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	1d19      	adds	r1, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	9103      	str	r1, [sp, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bfbb      	ittet	lt
 80035ac:	425b      	neglt	r3, r3
 80035ae:	f042 0202 	orrlt.w	r2, r2, #2
 80035b2:	9307      	strge	r3, [sp, #28]
 80035b4:	9307      	strlt	r3, [sp, #28]
 80035b6:	bfb8      	it	lt
 80035b8:	9204      	strlt	r2, [sp, #16]
 80035ba:	7823      	ldrb	r3, [r4, #0]
 80035bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80035be:	d10a      	bne.n	80035d6 <_vfiprintf_r+0x156>
 80035c0:	7863      	ldrb	r3, [r4, #1]
 80035c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c4:	d132      	bne.n	800362c <_vfiprintf_r+0x1ac>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	3402      	adds	r4, #2
 80035ca:	1d1a      	adds	r2, r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	9203      	str	r2, [sp, #12]
 80035d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035d4:	9305      	str	r3, [sp, #20]
 80035d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80036a0 <_vfiprintf_r+0x220>
 80035da:	2203      	movs	r2, #3
 80035dc:	4650      	mov	r0, sl
 80035de:	7821      	ldrb	r1, [r4, #0]
 80035e0:	f000 face 	bl	8003b80 <memchr>
 80035e4:	b138      	cbz	r0, 80035f6 <_vfiprintf_r+0x176>
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	9b04      	ldr	r3, [sp, #16]
 80035ea:	eba0 000a 	sub.w	r0, r0, sl
 80035ee:	4082      	lsls	r2, r0
 80035f0:	4313      	orrs	r3, r2
 80035f2:	3401      	adds	r4, #1
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fa:	2206      	movs	r2, #6
 80035fc:	4829      	ldr	r0, [pc, #164]	@ (80036a4 <_vfiprintf_r+0x224>)
 80035fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003602:	f000 fabd 	bl	8003b80 <memchr>
 8003606:	2800      	cmp	r0, #0
 8003608:	d03f      	beq.n	800368a <_vfiprintf_r+0x20a>
 800360a:	4b27      	ldr	r3, [pc, #156]	@ (80036a8 <_vfiprintf_r+0x228>)
 800360c:	bb1b      	cbnz	r3, 8003656 <_vfiprintf_r+0x1d6>
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	3307      	adds	r3, #7
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	3308      	adds	r3, #8
 8003618:	9303      	str	r3, [sp, #12]
 800361a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800361c:	443b      	add	r3, r7
 800361e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003620:	e76a      	b.n	80034f8 <_vfiprintf_r+0x78>
 8003622:	460c      	mov	r4, r1
 8003624:	2001      	movs	r0, #1
 8003626:	fb0c 3202 	mla	r2, ip, r2, r3
 800362a:	e7a8      	b.n	800357e <_vfiprintf_r+0xfe>
 800362c:	2300      	movs	r3, #0
 800362e:	f04f 0c0a 	mov.w	ip, #10
 8003632:	4619      	mov	r1, r3
 8003634:	3401      	adds	r4, #1
 8003636:	9305      	str	r3, [sp, #20]
 8003638:	4620      	mov	r0, r4
 800363a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800363e:	3a30      	subs	r2, #48	@ 0x30
 8003640:	2a09      	cmp	r2, #9
 8003642:	d903      	bls.n	800364c <_vfiprintf_r+0x1cc>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0c6      	beq.n	80035d6 <_vfiprintf_r+0x156>
 8003648:	9105      	str	r1, [sp, #20]
 800364a:	e7c4      	b.n	80035d6 <_vfiprintf_r+0x156>
 800364c:	4604      	mov	r4, r0
 800364e:	2301      	movs	r3, #1
 8003650:	fb0c 2101 	mla	r1, ip, r1, r2
 8003654:	e7f0      	b.n	8003638 <_vfiprintf_r+0x1b8>
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	4630      	mov	r0, r6
 800365e:	4b13      	ldr	r3, [pc, #76]	@ (80036ac <_vfiprintf_r+0x22c>)
 8003660:	a904      	add	r1, sp, #16
 8003662:	f3af 8000 	nop.w
 8003666:	4607      	mov	r7, r0
 8003668:	1c78      	adds	r0, r7, #1
 800366a:	d1d6      	bne.n	800361a <_vfiprintf_r+0x19a>
 800366c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800366e:	07d9      	lsls	r1, r3, #31
 8003670:	d405      	bmi.n	800367e <_vfiprintf_r+0x1fe>
 8003672:	89ab      	ldrh	r3, [r5, #12]
 8003674:	059a      	lsls	r2, r3, #22
 8003676:	d402      	bmi.n	800367e <_vfiprintf_r+0x1fe>
 8003678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800367a:	f7ff fceb 	bl	8003054 <__retarget_lock_release_recursive>
 800367e:	89ab      	ldrh	r3, [r5, #12]
 8003680:	065b      	lsls	r3, r3, #25
 8003682:	f53f af1f 	bmi.w	80034c4 <_vfiprintf_r+0x44>
 8003686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003688:	e71e      	b.n	80034c8 <_vfiprintf_r+0x48>
 800368a:	ab03      	add	r3, sp, #12
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	462a      	mov	r2, r5
 8003690:	4630      	mov	r0, r6
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <_vfiprintf_r+0x22c>)
 8003694:	a904      	add	r1, sp, #16
 8003696:	f000 f87d 	bl	8003794 <_printf_i>
 800369a:	e7e4      	b.n	8003666 <_vfiprintf_r+0x1e6>
 800369c:	08003d9d 	.word	0x08003d9d
 80036a0:	08003da3 	.word	0x08003da3
 80036a4:	08003da7 	.word	0x08003da7
 80036a8:	00000000 	.word	0x00000000
 80036ac:	0800345d 	.word	0x0800345d

080036b0 <_printf_common>:
 80036b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	4616      	mov	r6, r2
 80036b6:	4698      	mov	r8, r3
 80036b8:	688a      	ldr	r2, [r1, #8]
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	4607      	mov	r7, r0
 80036be:	4293      	cmp	r3, r2
 80036c0:	bfb8      	it	lt
 80036c2:	4613      	movlt	r3, r2
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036ca:	460c      	mov	r4, r1
 80036cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d0:	b10a      	cbz	r2, 80036d6 <_printf_common+0x26>
 80036d2:	3301      	adds	r3, #1
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	0699      	lsls	r1, r3, #26
 80036da:	bf42      	ittt	mi
 80036dc:	6833      	ldrmi	r3, [r6, #0]
 80036de:	3302      	addmi	r3, #2
 80036e0:	6033      	strmi	r3, [r6, #0]
 80036e2:	6825      	ldr	r5, [r4, #0]
 80036e4:	f015 0506 	ands.w	r5, r5, #6
 80036e8:	d106      	bne.n	80036f8 <_printf_common+0x48>
 80036ea:	f104 0a19 	add.w	sl, r4, #25
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	6832      	ldr	r2, [r6, #0]
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dc2b      	bgt.n	8003750 <_printf_common+0xa0>
 80036f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	3b00      	subs	r3, #0
 8003700:	bf18      	it	ne
 8003702:	2301      	movne	r3, #1
 8003704:	0692      	lsls	r2, r2, #26
 8003706:	d430      	bmi.n	800376a <_printf_common+0xba>
 8003708:	4641      	mov	r1, r8
 800370a:	4638      	mov	r0, r7
 800370c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003710:	47c8      	blx	r9
 8003712:	3001      	adds	r0, #1
 8003714:	d023      	beq.n	800375e <_printf_common+0xae>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	f003 0306 	and.w	r3, r3, #6
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf14      	ite	ne
 8003722:	2500      	movne	r5, #0
 8003724:	6833      	ldreq	r3, [r6, #0]
 8003726:	f04f 0600 	mov.w	r6, #0
 800372a:	bf08      	it	eq
 800372c:	68e5      	ldreq	r5, [r4, #12]
 800372e:	f104 041a 	add.w	r4, r4, #26
 8003732:	bf08      	it	eq
 8003734:	1aed      	subeq	r5, r5, r3
 8003736:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800373a:	bf08      	it	eq
 800373c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003740:	4293      	cmp	r3, r2
 8003742:	bfc4      	itt	gt
 8003744:	1a9b      	subgt	r3, r3, r2
 8003746:	18ed      	addgt	r5, r5, r3
 8003748:	42b5      	cmp	r5, r6
 800374a:	d11a      	bne.n	8003782 <_printf_common+0xd2>
 800374c:	2000      	movs	r0, #0
 800374e:	e008      	b.n	8003762 <_printf_common+0xb2>
 8003750:	2301      	movs	r3, #1
 8003752:	4652      	mov	r2, sl
 8003754:	4641      	mov	r1, r8
 8003756:	4638      	mov	r0, r7
 8003758:	47c8      	blx	r9
 800375a:	3001      	adds	r0, #1
 800375c:	d103      	bne.n	8003766 <_printf_common+0xb6>
 800375e:	f04f 30ff 	mov.w	r0, #4294967295
 8003762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003766:	3501      	adds	r5, #1
 8003768:	e7c1      	b.n	80036ee <_printf_common+0x3e>
 800376a:	2030      	movs	r0, #48	@ 0x30
 800376c:	18e1      	adds	r1, r4, r3
 800376e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003778:	4422      	add	r2, r4
 800377a:	3302      	adds	r3, #2
 800377c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003780:	e7c2      	b.n	8003708 <_printf_common+0x58>
 8003782:	2301      	movs	r3, #1
 8003784:	4622      	mov	r2, r4
 8003786:	4641      	mov	r1, r8
 8003788:	4638      	mov	r0, r7
 800378a:	47c8      	blx	r9
 800378c:	3001      	adds	r0, #1
 800378e:	d0e6      	beq.n	800375e <_printf_common+0xae>
 8003790:	3601      	adds	r6, #1
 8003792:	e7d9      	b.n	8003748 <_printf_common+0x98>

08003794 <_printf_i>:
 8003794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003798:	7e0f      	ldrb	r7, [r1, #24]
 800379a:	4691      	mov	r9, r2
 800379c:	2f78      	cmp	r7, #120	@ 0x78
 800379e:	4680      	mov	r8, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	469a      	mov	sl, r3
 80037a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037aa:	d807      	bhi.n	80037bc <_printf_i+0x28>
 80037ac:	2f62      	cmp	r7, #98	@ 0x62
 80037ae:	d80a      	bhi.n	80037c6 <_printf_i+0x32>
 80037b0:	2f00      	cmp	r7, #0
 80037b2:	f000 80d1 	beq.w	8003958 <_printf_i+0x1c4>
 80037b6:	2f58      	cmp	r7, #88	@ 0x58
 80037b8:	f000 80b8 	beq.w	800392c <_printf_i+0x198>
 80037bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037c4:	e03a      	b.n	800383c <_printf_i+0xa8>
 80037c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ca:	2b15      	cmp	r3, #21
 80037cc:	d8f6      	bhi.n	80037bc <_printf_i+0x28>
 80037ce:	a101      	add	r1, pc, #4	@ (adr r1, 80037d4 <_printf_i+0x40>)
 80037d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d4:	0800382d 	.word	0x0800382d
 80037d8:	08003841 	.word	0x08003841
 80037dc:	080037bd 	.word	0x080037bd
 80037e0:	080037bd 	.word	0x080037bd
 80037e4:	080037bd 	.word	0x080037bd
 80037e8:	080037bd 	.word	0x080037bd
 80037ec:	08003841 	.word	0x08003841
 80037f0:	080037bd 	.word	0x080037bd
 80037f4:	080037bd 	.word	0x080037bd
 80037f8:	080037bd 	.word	0x080037bd
 80037fc:	080037bd 	.word	0x080037bd
 8003800:	0800393f 	.word	0x0800393f
 8003804:	0800386b 	.word	0x0800386b
 8003808:	080038f9 	.word	0x080038f9
 800380c:	080037bd 	.word	0x080037bd
 8003810:	080037bd 	.word	0x080037bd
 8003814:	08003961 	.word	0x08003961
 8003818:	080037bd 	.word	0x080037bd
 800381c:	0800386b 	.word	0x0800386b
 8003820:	080037bd 	.word	0x080037bd
 8003824:	080037bd 	.word	0x080037bd
 8003828:	08003901 	.word	0x08003901
 800382c:	6833      	ldr	r3, [r6, #0]
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6032      	str	r2, [r6, #0]
 8003834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800383c:	2301      	movs	r3, #1
 800383e:	e09c      	b.n	800397a <_printf_i+0x1e6>
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	1d19      	adds	r1, r3, #4
 8003846:	6031      	str	r1, [r6, #0]
 8003848:	0606      	lsls	r6, r0, #24
 800384a:	d501      	bpl.n	8003850 <_printf_i+0xbc>
 800384c:	681d      	ldr	r5, [r3, #0]
 800384e:	e003      	b.n	8003858 <_printf_i+0xc4>
 8003850:	0645      	lsls	r5, r0, #25
 8003852:	d5fb      	bpl.n	800384c <_printf_i+0xb8>
 8003854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003858:	2d00      	cmp	r5, #0
 800385a:	da03      	bge.n	8003864 <_printf_i+0xd0>
 800385c:	232d      	movs	r3, #45	@ 0x2d
 800385e:	426d      	negs	r5, r5
 8003860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003864:	230a      	movs	r3, #10
 8003866:	4858      	ldr	r0, [pc, #352]	@ (80039c8 <_printf_i+0x234>)
 8003868:	e011      	b.n	800388e <_printf_i+0xfa>
 800386a:	6821      	ldr	r1, [r4, #0]
 800386c:	6833      	ldr	r3, [r6, #0]
 800386e:	0608      	lsls	r0, r1, #24
 8003870:	f853 5b04 	ldr.w	r5, [r3], #4
 8003874:	d402      	bmi.n	800387c <_printf_i+0xe8>
 8003876:	0649      	lsls	r1, r1, #25
 8003878:	bf48      	it	mi
 800387a:	b2ad      	uxthmi	r5, r5
 800387c:	2f6f      	cmp	r7, #111	@ 0x6f
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	bf14      	ite	ne
 8003882:	230a      	movne	r3, #10
 8003884:	2308      	moveq	r3, #8
 8003886:	4850      	ldr	r0, [pc, #320]	@ (80039c8 <_printf_i+0x234>)
 8003888:	2100      	movs	r1, #0
 800388a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800388e:	6866      	ldr	r6, [r4, #4]
 8003890:	2e00      	cmp	r6, #0
 8003892:	60a6      	str	r6, [r4, #8]
 8003894:	db05      	blt.n	80038a2 <_printf_i+0x10e>
 8003896:	6821      	ldr	r1, [r4, #0]
 8003898:	432e      	orrs	r6, r5
 800389a:	f021 0104 	bic.w	r1, r1, #4
 800389e:	6021      	str	r1, [r4, #0]
 80038a0:	d04b      	beq.n	800393a <_printf_i+0x1a6>
 80038a2:	4616      	mov	r6, r2
 80038a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80038a8:	fb03 5711 	mls	r7, r3, r1, r5
 80038ac:	5dc7      	ldrb	r7, [r0, r7]
 80038ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038b2:	462f      	mov	r7, r5
 80038b4:	42bb      	cmp	r3, r7
 80038b6:	460d      	mov	r5, r1
 80038b8:	d9f4      	bls.n	80038a4 <_printf_i+0x110>
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d10b      	bne.n	80038d6 <_printf_i+0x142>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	07df      	lsls	r7, r3, #31
 80038c2:	d508      	bpl.n	80038d6 <_printf_i+0x142>
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	6861      	ldr	r1, [r4, #4]
 80038c8:	4299      	cmp	r1, r3
 80038ca:	bfde      	ittt	le
 80038cc:	2330      	movle	r3, #48	@ 0x30
 80038ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038d6:	1b92      	subs	r2, r2, r6
 80038d8:	6122      	str	r2, [r4, #16]
 80038da:	464b      	mov	r3, r9
 80038dc:	4621      	mov	r1, r4
 80038de:	4640      	mov	r0, r8
 80038e0:	f8cd a000 	str.w	sl, [sp]
 80038e4:	aa03      	add	r2, sp, #12
 80038e6:	f7ff fee3 	bl	80036b0 <_printf_common>
 80038ea:	3001      	adds	r0, #1
 80038ec:	d14a      	bne.n	8003984 <_printf_i+0x1f0>
 80038ee:	f04f 30ff 	mov.w	r0, #4294967295
 80038f2:	b004      	add	sp, #16
 80038f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f043 0320 	orr.w	r3, r3, #32
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	2778      	movs	r7, #120	@ 0x78
 8003902:	4832      	ldr	r0, [pc, #200]	@ (80039cc <_printf_i+0x238>)
 8003904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	6831      	ldr	r1, [r6, #0]
 800390c:	061f      	lsls	r7, r3, #24
 800390e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003912:	d402      	bmi.n	800391a <_printf_i+0x186>
 8003914:	065f      	lsls	r7, r3, #25
 8003916:	bf48      	it	mi
 8003918:	b2ad      	uxthmi	r5, r5
 800391a:	6031      	str	r1, [r6, #0]
 800391c:	07d9      	lsls	r1, r3, #31
 800391e:	bf44      	itt	mi
 8003920:	f043 0320 	orrmi.w	r3, r3, #32
 8003924:	6023      	strmi	r3, [r4, #0]
 8003926:	b11d      	cbz	r5, 8003930 <_printf_i+0x19c>
 8003928:	2310      	movs	r3, #16
 800392a:	e7ad      	b.n	8003888 <_printf_i+0xf4>
 800392c:	4826      	ldr	r0, [pc, #152]	@ (80039c8 <_printf_i+0x234>)
 800392e:	e7e9      	b.n	8003904 <_printf_i+0x170>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	f023 0320 	bic.w	r3, r3, #32
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	e7f6      	b.n	8003928 <_printf_i+0x194>
 800393a:	4616      	mov	r6, r2
 800393c:	e7bd      	b.n	80038ba <_printf_i+0x126>
 800393e:	6833      	ldr	r3, [r6, #0]
 8003940:	6825      	ldr	r5, [r4, #0]
 8003942:	1d18      	adds	r0, r3, #4
 8003944:	6961      	ldr	r1, [r4, #20]
 8003946:	6030      	str	r0, [r6, #0]
 8003948:	062e      	lsls	r6, r5, #24
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	d501      	bpl.n	8003952 <_printf_i+0x1be>
 800394e:	6019      	str	r1, [r3, #0]
 8003950:	e002      	b.n	8003958 <_printf_i+0x1c4>
 8003952:	0668      	lsls	r0, r5, #25
 8003954:	d5fb      	bpl.n	800394e <_printf_i+0x1ba>
 8003956:	8019      	strh	r1, [r3, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	4616      	mov	r6, r2
 800395c:	6123      	str	r3, [r4, #16]
 800395e:	e7bc      	b.n	80038da <_printf_i+0x146>
 8003960:	6833      	ldr	r3, [r6, #0]
 8003962:	2100      	movs	r1, #0
 8003964:	1d1a      	adds	r2, r3, #4
 8003966:	6032      	str	r2, [r6, #0]
 8003968:	681e      	ldr	r6, [r3, #0]
 800396a:	6862      	ldr	r2, [r4, #4]
 800396c:	4630      	mov	r0, r6
 800396e:	f000 f907 	bl	8003b80 <memchr>
 8003972:	b108      	cbz	r0, 8003978 <_printf_i+0x1e4>
 8003974:	1b80      	subs	r0, r0, r6
 8003976:	6060      	str	r0, [r4, #4]
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	2300      	movs	r3, #0
 800397e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003982:	e7aa      	b.n	80038da <_printf_i+0x146>
 8003984:	4632      	mov	r2, r6
 8003986:	4649      	mov	r1, r9
 8003988:	4640      	mov	r0, r8
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	47d0      	blx	sl
 800398e:	3001      	adds	r0, #1
 8003990:	d0ad      	beq.n	80038ee <_printf_i+0x15a>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	079b      	lsls	r3, r3, #30
 8003996:	d413      	bmi.n	80039c0 <_printf_i+0x22c>
 8003998:	68e0      	ldr	r0, [r4, #12]
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	4298      	cmp	r0, r3
 800399e:	bfb8      	it	lt
 80039a0:	4618      	movlt	r0, r3
 80039a2:	e7a6      	b.n	80038f2 <_printf_i+0x15e>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4632      	mov	r2, r6
 80039a8:	4649      	mov	r1, r9
 80039aa:	4640      	mov	r0, r8
 80039ac:	47d0      	blx	sl
 80039ae:	3001      	adds	r0, #1
 80039b0:	d09d      	beq.n	80038ee <_printf_i+0x15a>
 80039b2:	3501      	adds	r5, #1
 80039b4:	68e3      	ldr	r3, [r4, #12]
 80039b6:	9903      	ldr	r1, [sp, #12]
 80039b8:	1a5b      	subs	r3, r3, r1
 80039ba:	42ab      	cmp	r3, r5
 80039bc:	dcf2      	bgt.n	80039a4 <_printf_i+0x210>
 80039be:	e7eb      	b.n	8003998 <_printf_i+0x204>
 80039c0:	2500      	movs	r5, #0
 80039c2:	f104 0619 	add.w	r6, r4, #25
 80039c6:	e7f5      	b.n	80039b4 <_printf_i+0x220>
 80039c8:	08003dae 	.word	0x08003dae
 80039cc:	08003dbf 	.word	0x08003dbf

080039d0 <__swbuf_r>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	460e      	mov	r6, r1
 80039d4:	4614      	mov	r4, r2
 80039d6:	4605      	mov	r5, r0
 80039d8:	b118      	cbz	r0, 80039e2 <__swbuf_r+0x12>
 80039da:	6a03      	ldr	r3, [r0, #32]
 80039dc:	b90b      	cbnz	r3, 80039e2 <__swbuf_r+0x12>
 80039de:	f7ff fa45 	bl	8002e6c <__sinit>
 80039e2:	69a3      	ldr	r3, [r4, #24]
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	071a      	lsls	r2, r3, #28
 80039ea:	d501      	bpl.n	80039f0 <__swbuf_r+0x20>
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	b943      	cbnz	r3, 8003a02 <__swbuf_r+0x32>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 f82a 	bl	8003a4c <__swsetup_r>
 80039f8:	b118      	cbz	r0, 8003a02 <__swbuf_r+0x32>
 80039fa:	f04f 37ff 	mov.w	r7, #4294967295
 80039fe:	4638      	mov	r0, r7
 8003a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	6922      	ldr	r2, [r4, #16]
 8003a06:	b2f6      	uxtb	r6, r6
 8003a08:	1a98      	subs	r0, r3, r2
 8003a0a:	6963      	ldr	r3, [r4, #20]
 8003a0c:	4637      	mov	r7, r6
 8003a0e:	4283      	cmp	r3, r0
 8003a10:	dc05      	bgt.n	8003a1e <__swbuf_r+0x4e>
 8003a12:	4621      	mov	r1, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	f7ff fcbb 	bl	8003390 <_fflush_r>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d1ed      	bne.n	80039fa <__swbuf_r+0x2a>
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	60a3      	str	r3, [r4, #8]
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	6022      	str	r2, [r4, #0]
 8003a2a:	701e      	strb	r6, [r3, #0]
 8003a2c:	6962      	ldr	r2, [r4, #20]
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d004      	beq.n	8003a3e <__swbuf_r+0x6e>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	07db      	lsls	r3, r3, #31
 8003a38:	d5e1      	bpl.n	80039fe <__swbuf_r+0x2e>
 8003a3a:	2e0a      	cmp	r6, #10
 8003a3c:	d1df      	bne.n	80039fe <__swbuf_r+0x2e>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f7ff fca5 	bl	8003390 <_fflush_r>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d0d9      	beq.n	80039fe <__swbuf_r+0x2e>
 8003a4a:	e7d6      	b.n	80039fa <__swbuf_r+0x2a>

08003a4c <__swsetup_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4b29      	ldr	r3, [pc, #164]	@ (8003af4 <__swsetup_r+0xa8>)
 8003a50:	4605      	mov	r5, r0
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	460c      	mov	r4, r1
 8003a56:	b118      	cbz	r0, 8003a60 <__swsetup_r+0x14>
 8003a58:	6a03      	ldr	r3, [r0, #32]
 8003a5a:	b90b      	cbnz	r3, 8003a60 <__swsetup_r+0x14>
 8003a5c:	f7ff fa06 	bl	8002e6c <__sinit>
 8003a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a64:	0719      	lsls	r1, r3, #28
 8003a66:	d422      	bmi.n	8003aae <__swsetup_r+0x62>
 8003a68:	06da      	lsls	r2, r3, #27
 8003a6a:	d407      	bmi.n	8003a7c <__swsetup_r+0x30>
 8003a6c:	2209      	movs	r2, #9
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	81a3      	strh	r3, [r4, #12]
 8003a7a:	e033      	b.n	8003ae4 <__swsetup_r+0x98>
 8003a7c:	0758      	lsls	r0, r3, #29
 8003a7e:	d512      	bpl.n	8003aa6 <__swsetup_r+0x5a>
 8003a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a82:	b141      	cbz	r1, 8003a96 <__swsetup_r+0x4a>
 8003a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a88:	4299      	cmp	r1, r3
 8003a8a:	d002      	beq.n	8003a92 <__swsetup_r+0x46>
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f7ff fb01 	bl	8003094 <_free_r>
 8003a92:	2300      	movs	r3, #0
 8003a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6063      	str	r3, [r4, #4]
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	81a3      	strh	r3, [r4, #12]
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	b94b      	cbnz	r3, 8003ac6 <__swsetup_r+0x7a>
 8003ab2:	89a3      	ldrh	r3, [r4, #12]
 8003ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003abc:	d003      	beq.n	8003ac6 <__swsetup_r+0x7a>
 8003abe:	4621      	mov	r1, r4
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f000 f890 	bl	8003be6 <__smakebuf_r>
 8003ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aca:	f013 0201 	ands.w	r2, r3, #1
 8003ace:	d00a      	beq.n	8003ae6 <__swsetup_r+0x9a>
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	60a2      	str	r2, [r4, #8]
 8003ad4:	6962      	ldr	r2, [r4, #20]
 8003ad6:	4252      	negs	r2, r2
 8003ad8:	61a2      	str	r2, [r4, #24]
 8003ada:	6922      	ldr	r2, [r4, #16]
 8003adc:	b942      	cbnz	r2, 8003af0 <__swsetup_r+0xa4>
 8003ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ae2:	d1c5      	bne.n	8003a70 <__swsetup_r+0x24>
 8003ae4:	bd38      	pop	{r3, r4, r5, pc}
 8003ae6:	0799      	lsls	r1, r3, #30
 8003ae8:	bf58      	it	pl
 8003aea:	6962      	ldrpl	r2, [r4, #20]
 8003aec:	60a2      	str	r2, [r4, #8]
 8003aee:	e7f4      	b.n	8003ada <__swsetup_r+0x8e>
 8003af0:	2000      	movs	r0, #0
 8003af2:	e7f7      	b.n	8003ae4 <__swsetup_r+0x98>
 8003af4:	20000034 	.word	0x20000034

08003af8 <_raise_r>:
 8003af8:	291f      	cmp	r1, #31
 8003afa:	b538      	push	{r3, r4, r5, lr}
 8003afc:	4605      	mov	r5, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	d904      	bls.n	8003b0c <_raise_r+0x14>
 8003b02:	2316      	movs	r3, #22
 8003b04:	6003      	str	r3, [r0, #0]
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003b0e:	b112      	cbz	r2, 8003b16 <_raise_r+0x1e>
 8003b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b14:	b94b      	cbnz	r3, 8003b2a <_raise_r+0x32>
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 f830 	bl	8003b7c <_getpid_r>
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4628      	mov	r0, r5
 8003b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b26:	f000 b817 	b.w	8003b58 <_kill_r>
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d00a      	beq.n	8003b44 <_raise_r+0x4c>
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	d103      	bne.n	8003b3a <_raise_r+0x42>
 8003b32:	2316      	movs	r3, #22
 8003b34:	6003      	str	r3, [r0, #0]
 8003b36:	2001      	movs	r0, #1
 8003b38:	e7e7      	b.n	8003b0a <_raise_r+0x12>
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003b42:	4798      	blx	r3
 8003b44:	2000      	movs	r0, #0
 8003b46:	e7e0      	b.n	8003b0a <_raise_r+0x12>

08003b48 <raise>:
 8003b48:	4b02      	ldr	r3, [pc, #8]	@ (8003b54 <raise+0xc>)
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	f7ff bfd3 	b.w	8003af8 <_raise_r>
 8003b52:	bf00      	nop
 8003b54:	20000034 	.word	0x20000034

08003b58 <_kill_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4d06      	ldr	r5, [pc, #24]	@ (8003b78 <_kill_r+0x20>)
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	f7fd f920 	bl	8000daa <_kill>
 8003b6a:	1c43      	adds	r3, r0, #1
 8003b6c:	d102      	bne.n	8003b74 <_kill_r+0x1c>
 8003b6e:	682b      	ldr	r3, [r5, #0]
 8003b70:	b103      	cbz	r3, 8003b74 <_kill_r+0x1c>
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	bd38      	pop	{r3, r4, r5, pc}
 8003b76:	bf00      	nop
 8003b78:	200003a0 	.word	0x200003a0

08003b7c <_getpid_r>:
 8003b7c:	f7fd b90e 	b.w	8000d9c <_getpid>

08003b80 <memchr>:
 8003b80:	4603      	mov	r3, r0
 8003b82:	b510      	push	{r4, lr}
 8003b84:	b2c9      	uxtb	r1, r1
 8003b86:	4402      	add	r2, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	d101      	bne.n	8003b92 <memchr+0x12>
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e003      	b.n	8003b9a <memchr+0x1a>
 8003b92:	7804      	ldrb	r4, [r0, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	428c      	cmp	r4, r1
 8003b98:	d1f6      	bne.n	8003b88 <memchr+0x8>
 8003b9a:	bd10      	pop	{r4, pc}

08003b9c <__swhatbuf_r>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba4:	4615      	mov	r5, r2
 8003ba6:	2900      	cmp	r1, #0
 8003ba8:	461e      	mov	r6, r3
 8003baa:	b096      	sub	sp, #88	@ 0x58
 8003bac:	da0c      	bge.n	8003bc8 <__swhatbuf_r+0x2c>
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003bb6:	bf14      	ite	ne
 8003bb8:	2340      	movne	r3, #64	@ 0x40
 8003bba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	6031      	str	r1, [r6, #0]
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	b016      	add	sp, #88	@ 0x58
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	466a      	mov	r2, sp
 8003bca:	f000 f849 	bl	8003c60 <_fstat_r>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	dbed      	blt.n	8003bae <__swhatbuf_r+0x12>
 8003bd2:	9901      	ldr	r1, [sp, #4]
 8003bd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003bd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003bdc:	4259      	negs	r1, r3
 8003bde:	4159      	adcs	r1, r3
 8003be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003be4:	e7eb      	b.n	8003bbe <__swhatbuf_r+0x22>

08003be6 <__smakebuf_r>:
 8003be6:	898b      	ldrh	r3, [r1, #12]
 8003be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bea:	079d      	lsls	r5, r3, #30
 8003bec:	4606      	mov	r6, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	d507      	bpl.n	8003c02 <__smakebuf_r+0x1c>
 8003bf2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bf6:	6023      	str	r3, [r4, #0]
 8003bf8:	6123      	str	r3, [r4, #16]
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	6163      	str	r3, [r4, #20]
 8003bfe:	b003      	add	sp, #12
 8003c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c02:	466a      	mov	r2, sp
 8003c04:	ab01      	add	r3, sp, #4
 8003c06:	f7ff ffc9 	bl	8003b9c <__swhatbuf_r>
 8003c0a:	9f00      	ldr	r7, [sp, #0]
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	4639      	mov	r1, r7
 8003c10:	4630      	mov	r0, r6
 8003c12:	f7ff fab1 	bl	8003178 <_malloc_r>
 8003c16:	b948      	cbnz	r0, 8003c2c <__smakebuf_r+0x46>
 8003c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c1c:	059a      	lsls	r2, r3, #22
 8003c1e:	d4ee      	bmi.n	8003bfe <__smakebuf_r+0x18>
 8003c20:	f023 0303 	bic.w	r3, r3, #3
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	81a3      	strh	r3, [r4, #12]
 8003c2a:	e7e2      	b.n	8003bf2 <__smakebuf_r+0xc>
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	9b01      	ldr	r3, [sp, #4]
 8003c3a:	6020      	str	r0, [r4, #0]
 8003c3c:	b15b      	cbz	r3, 8003c56 <__smakebuf_r+0x70>
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c44:	f000 f81e 	bl	8003c84 <_isatty_r>
 8003c48:	b128      	cbz	r0, 8003c56 <__smakebuf_r+0x70>
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	f023 0303 	bic.w	r3, r3, #3
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	431d      	orrs	r5, r3
 8003c5a:	81a5      	strh	r5, [r4, #12]
 8003c5c:	e7cf      	b.n	8003bfe <__smakebuf_r+0x18>
	...

08003c60 <_fstat_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	2300      	movs	r3, #0
 8003c64:	4d06      	ldr	r5, [pc, #24]	@ (8003c80 <_fstat_r+0x20>)
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	602b      	str	r3, [r5, #0]
 8003c6e:	f7fd f8fb 	bl	8000e68 <_fstat>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	d102      	bne.n	8003c7c <_fstat_r+0x1c>
 8003c76:	682b      	ldr	r3, [r5, #0]
 8003c78:	b103      	cbz	r3, 8003c7c <_fstat_r+0x1c>
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	bd38      	pop	{r3, r4, r5, pc}
 8003c7e:	bf00      	nop
 8003c80:	200003a0 	.word	0x200003a0

08003c84 <_isatty_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	2300      	movs	r3, #0
 8003c88:	4d05      	ldr	r5, [pc, #20]	@ (8003ca0 <_isatty_r+0x1c>)
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	f7fd f8f9 	bl	8000e86 <_isatty>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d102      	bne.n	8003c9e <_isatty_r+0x1a>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b103      	cbz	r3, 8003c9e <_isatty_r+0x1a>
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	200003a0 	.word	0x200003a0

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr
