
shiftregisterproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08002eec  08002eec  00003eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003074  08003074  00004074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800307c  0800307c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003084  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080030ec  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080030ec  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f08  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ce  00000000  00000000  0000bf99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0000d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000559  00000000  00000000  0000dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017aa5  00000000  00000000  0000e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084a4  00000000  00000000  00025c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083dd9  00000000  00000000  0002e11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1ef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a4  00000000  00000000  000b1f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b43dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ed4 	.word	0x08002ed4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002ed4 	.word	0x08002ed4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fcb3 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f85d 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8c7 	bl	80002fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016e:	f000 f89b 	bl	80002a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char alege[1] = {'0'};
 8000172:	2330      	movs	r3, #48	@ 0x30
 8000174:	713b      	strb	r3, [r7, #4]
  stingerea();
 8000176:	f000 fa8d 	bl	8000694 <stingerea>
  sendString("Joc de lumini!\n");
 800017a:	4826      	ldr	r0, [pc, #152]	@ (8000214 <main+0xb8>)
 800017c:	f000 f95a 	bl	8000434 <sendString>
  sendString("Alegeti varianta de joc (1 - 6) \n");
 8000180:	4825      	ldr	r0, [pc, #148]	@ (8000218 <main+0xbc>)
 8000182:	f000 f957 	bl	8000434 <sendString>
  while (alege[0]!='1' && alege[0]!='2' && alege[0]!='3' && alege[0]!='4' && alege[0]!='5' && alege[0]!='6')
 8000186:	e007      	b.n	8000198 <main+0x3c>
  	 { alege[0] = readChar();
 8000188:	f000 f93e 	bl	8000408 <readChar>
 800018c:	4603      	mov	r3, r0
 800018e:	713b      	strb	r3, [r7, #4]
  		 HAL_Delay(500);
 8000190:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000194:	f000 fcfc 	bl	8000b90 <HAL_Delay>
  while (alege[0]!='1' && alege[0]!='2' && alege[0]!='3' && alege[0]!='4' && alege[0]!='5' && alege[0]!='6')
 8000198:	793b      	ldrb	r3, [r7, #4]
 800019a:	2b31      	cmp	r3, #49	@ 0x31
 800019c:	d00e      	beq.n	80001bc <main+0x60>
 800019e:	793b      	ldrb	r3, [r7, #4]
 80001a0:	2b32      	cmp	r3, #50	@ 0x32
 80001a2:	d00b      	beq.n	80001bc <main+0x60>
 80001a4:	793b      	ldrb	r3, [r7, #4]
 80001a6:	2b33      	cmp	r3, #51	@ 0x33
 80001a8:	d008      	beq.n	80001bc <main+0x60>
 80001aa:	793b      	ldrb	r3, [r7, #4]
 80001ac:	2b34      	cmp	r3, #52	@ 0x34
 80001ae:	d005      	beq.n	80001bc <main+0x60>
 80001b0:	793b      	ldrb	r3, [r7, #4]
 80001b2:	2b35      	cmp	r3, #53	@ 0x35
 80001b4:	d002      	beq.n	80001bc <main+0x60>
 80001b6:	793b      	ldrb	r3, [r7, #4]
 80001b8:	2b36      	cmp	r3, #54	@ 0x36
 80001ba:	d1e5      	bne.n	8000188 <main+0x2c>
  	 }
  	sendString("Ati ales jocul: ");
 80001bc:	4817      	ldr	r0, [pc, #92]	@ (800021c <main+0xc0>)
 80001be:	f000 f939 	bl	8000434 <sendString>
  	sendString(alege);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 f935 	bl	8000434 <sendString>
  	sendString("\nPentru reinitializare apasati butonul Reset al placii ");
 80001ca:	4815      	ldr	r0, [pc, #84]	@ (8000220 <main+0xc4>)
 80001cc:	f000 f932 	bl	8000434 <sendString>

  	switch (alege[0]) {
 80001d0:	793b      	ldrb	r3, [r7, #4]
 80001d2:	3b31      	subs	r3, #49	@ 0x31
 80001d4:	2b05      	cmp	r3, #5
 80001d6:	d81b      	bhi.n	8000210 <main+0xb4>
 80001d8:	a201      	add	r2, pc, #4	@ (adr r2, 80001e0 <main+0x84>)
 80001da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001de:	bf00      	nop
 80001e0:	080001f9 	.word	0x080001f9
 80001e4:	080001fd 	.word	0x080001fd
 80001e8:	08000201 	.word	0x08000201
 80001ec:	08000205 	.word	0x08000205
 80001f0:	08000209 	.word	0x08000209
 80001f4:	0800020d 	.word	0x0800020d
  		 case '1':  joc1();
 80001f8:	f000 f986 	bl	8000508 <joc1>
  		 case '2':  joc2();
 80001fc:	f000 f9ae 	bl	800055c <joc2>
  		 case '3':  joc3();
 8000200:	f000 f9fc 	bl	80005fc <joc3>
  		 case '4':  joc4();
 8000204:	f000 fa22 	bl	800064c <joc4>
  		 case '5': 	joc5();
 8000208:	f000 fa58 	bl	80006bc <joc5>
  		 case '6': 	joc6();
 800020c:	f000 fa7c 	bl	8000708 <joc6>
  	 }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0xb4>
 8000214:	08002eec 	.word	0x08002eec
 8000218:	08002efc 	.word	0x08002efc
 800021c:	08002f20 	.word	0x08002f20
 8000220:	08002f34 	.word	0x08002f34

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 ffab 	bl	800218e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000256:	2300      	movs	r3, #0
 8000258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800025e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	f107 0318 	add.w	r3, r7, #24
 8000264:	4618      	mov	r0, r3
 8000266:	f000 ff83 	bl	8001170 <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000270:	f000 fa94 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	230f      	movs	r3, #15
 8000276:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000278:	2302      	movs	r3, #2
 800027a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f001 f9f0 	bl	8001674 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029a:	f000 fa7f 	bl	800079c <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	@ 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ae:	4a12      	ldr	r2, [pc, #72]	@ (80002f8 <MX_USART2_UART_Init+0x50>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002b2:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002e0:	f001 fb56 	bl	8001990 <HAL_UART_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ea:	f000 fa57 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000084 	.word	0x20000084
 80002f8:	40004400 	.word	0x40004400

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000310:	4b38      	ldr	r3, [pc, #224]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a37      	ldr	r2, [pc, #220]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b35      	ldr	r3, [pc, #212]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0310 	and.w	r3, r3, #16
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000328:	4b32      	ldr	r3, [pc, #200]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a31      	ldr	r2, [pc, #196]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b2f      	ldr	r3, [pc, #188]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0320 	and.w	r3, r3, #32
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b2c      	ldr	r3, [pc, #176]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a2b      	ldr	r2, [pc, #172]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b29      	ldr	r3, [pc, #164]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	4b26      	ldr	r3, [pc, #152]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a25      	ldr	r2, [pc, #148]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <MX_GPIO_Init+0xf8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0308 	and.w	r3, r3, #8
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000376:	4820      	ldr	r0, [pc, #128]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 8000378:	f000 fec0 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2128      	movs	r1, #40	@ 0x28
 8000380:	481e      	ldr	r0, [pc, #120]	@ (80003fc <MX_GPIO_Init+0x100>)
 8000382:	f000 febb 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000386:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800038a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <MX_GPIO_Init+0x104>)
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	481a      	ldr	r0, [pc, #104]	@ (8000404 <MX_GPIO_Init+0x108>)
 800039c:	f000 fd2a 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80003a0:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480f      	ldr	r0, [pc, #60]	@ (80003f8 <MX_GPIO_Init+0xfc>)
 80003ba:	f000 fd1b 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80003be:	2328      	movs	r3, #40	@ 0x28
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4809      	ldr	r0, [pc, #36]	@ (80003fc <MX_GPIO_Init+0x100>)
 80003d6:	f000 fd0d 	bl	8000df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2100      	movs	r1, #0
 80003de:	2028      	movs	r0, #40	@ 0x28
 80003e0:	f000 fcd1 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e4:	2028      	movs	r0, #40	@ 0x28
 80003e6:	f000 fcea 	bl	8000dbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010800 	.word	0x40010800
 80003fc:	40010c00 	.word	0x40010c00
 8000400:	10110000 	.word	0x10110000
 8000404:	40011000 	.word	0x40011000

08000408 <readChar>:

/* USER CODE BEGIN 4 */
static char readChar()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
    char chr;

    if (HAL_UART_Receive(&huart2, (uint8_t*)&chr, 1, 10) == HAL_OK)  // Timeout 10ms
 800040e:	1df9      	adds	r1, r7, #7
 8000410:	230a      	movs	r3, #10
 8000412:	2201      	movs	r2, #1
 8000414:	4806      	ldr	r0, [pc, #24]	@ (8000430 <readChar+0x28>)
 8000416:	f001 fb96 	bl	8001b46 <HAL_UART_Receive>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d101      	bne.n	8000424 <readChar+0x1c>
    {
        return chr;
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	e000      	b.n	8000426 <readChar+0x1e>
    }

    return '\0';
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000084 	.word	0x20000084

08000434 <sendString>:

static void sendString(char *str)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff fe85 	bl	800014c <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	4803      	ldr	r0, [pc, #12]	@ (800045c <sendString+0x28>)
 800044e:	f001 faef 	bl	8001a30 <HAL_UART_Transmit>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000084 	.word	0x20000084

08000460 <shiftOut>:

static void shiftOut(uint8_t bitOrder, uint8_t val)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	460a      	mov	r2, r1
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	4613      	mov	r3, r2
 800046e:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e03c      	b.n	80004f0 <shiftOut+0x90>
        if (bitOrder == LSB) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b02      	cmp	r3, #2
 800047a:	d115      	bne.n	80004a8 <shiftOut+0x48>
            if (!!(val & (1 << i)))
 800047c:	79ba      	ldrb	r2, [r7, #6]
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	fa42 f303 	asr.w	r3, r2, r3
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d006      	beq.n	800049a <shiftOut+0x3a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000492:	481b      	ldr	r0, [pc, #108]	@ (8000500 <shiftOut+0xa0>)
 8000494:	f000 fe32 	bl	80010fc <HAL_GPIO_WritePin>
 8000498:	e01d      	b.n	80004d6 <shiftOut+0x76>
            else
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004a0:	4817      	ldr	r0, [pc, #92]	@ (8000500 <shiftOut+0xa0>)
 80004a2:	f000 fe2b 	bl	80010fc <HAL_GPIO_WritePin>
 80004a6:	e016      	b.n	80004d6 <shiftOut+0x76>
        } else {
            if (!!(val & (1 << (7 - i))))
 80004a8:	79ba      	ldrb	r2, [r7, #6]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	f1c3 0307 	rsb	r3, r3, #7
 80004b0:	fa42 f303 	asr.w	r3, r2, r3
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d006      	beq.n	80004ca <shiftOut+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004c2:	480f      	ldr	r0, [pc, #60]	@ (8000500 <shiftOut+0xa0>)
 80004c4:	f000 fe1a 	bl	80010fc <HAL_GPIO_WritePin>
 80004c8:	e005      	b.n	80004d6 <shiftOut+0x76>
            else
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004d0:	480b      	ldr	r0, [pc, #44]	@ (8000500 <shiftOut+0xa0>)
 80004d2:	f000 fe13 	bl	80010fc <HAL_GPIO_WritePin>
        }

        // Clock signal
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // Set clock
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	480a      	ldr	r0, [pc, #40]	@ (8000504 <shiftOut+0xa4>)
 80004dc:	f000 fe0e 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Reset clock
 80004e0:	2200      	movs	r2, #0
 80004e2:	2120      	movs	r1, #32
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <shiftOut+0xa4>)
 80004e6:	f000 fe09 	bl	80010fc <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	3301      	adds	r3, #1
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	2b07      	cmp	r3, #7
 80004f4:	d9bf      	bls.n	8000476 <shiftOut+0x16>
    }
}
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010800 	.word	0x40010800
 8000504:	40010c00 	.word	0x40010c00

08000508 <joc1>:

//! jocuri
void joc1() {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    while(1) {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 800050c:	2200      	movs	r2, #0
 800050e:	2108      	movs	r1, #8
 8000510:	4811      	ldr	r0, [pc, #68]	@ (8000558 <joc1+0x50>)
 8000512:	f000 fdf3 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, 85); // Trimite valoarea 01010101 (pe 8 LED-uri)
 8000516:	2155      	movs	r1, #85	@ 0x55
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ffa1 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 800051e:	2201      	movs	r2, #1
 8000520:	2108      	movs	r1, #8
 8000522:	480d      	ldr	r0, [pc, #52]	@ (8000558 <joc1+0x50>)
 8000524:	f000 fdea 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f000 fb30 	bl	8000b90 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 8000530:	2200      	movs	r2, #0
 8000532:	2108      	movs	r1, #8
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <joc1+0x50>)
 8000536:	f000 fde1 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, 170); // Trimite valoarea 10101010 (pe 8 LED-uri)
 800053a:	21aa      	movs	r1, #170	@ 0xaa
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff8f 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 8000542:	2201      	movs	r2, #1
 8000544:	2108      	movs	r1, #8
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <joc1+0x50>)
 8000548:	f000 fdd8 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 800054c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000550:	f000 fb1e 	bl	8000b90 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 8000554:	bf00      	nop
 8000556:	e7d9      	b.n	800050c <joc1+0x4>
 8000558:	40010c00 	.word	0x40010c00

0800055c <joc2>:
    }
}

void joc2() {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    int i;
    int afisare = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
    while(1) {
        for (i = 1; i < 9; i++) {
 8000566:	2301      	movs	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e01d      	b.n	80005a8 <joc2+0x4c>
            afisare = afisare + (1 << i);
 800056c:	2201      	movs	r2, #1
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	4413      	add	r3, r2
 8000578:	603b      	str	r3, [r7, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 800057a:	2200      	movs	r2, #0
 800057c:	2108      	movs	r1, #8
 800057e:	481e      	ldr	r0, [pc, #120]	@ (80005f8 <joc2+0x9c>)
 8000580:	f000 fdbc 	bl	80010fc <HAL_GPIO_WritePin>
            shiftOut(MSB, afisare); // Trimite valoare pentru LED-uri
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff ff68 	bl	8000460 <shiftOut>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	4818      	ldr	r0, [pc, #96]	@ (80005f8 <joc2+0x9c>)
 8000596:	f000 fdb1 	bl	80010fc <HAL_GPIO_WritePin>
            HAL_Delay(500);
 800059a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800059e:	f000 faf7 	bl	8000b90 <HAL_Delay>
        for (i = 1; i < 9; i++) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3301      	adds	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b08      	cmp	r3, #8
 80005ac:	ddde      	ble.n	800056c <joc2+0x10>
        }

        for (i = 8; i >= 0; i--) {
 80005ae:	2308      	movs	r3, #8
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	e01d      	b.n	80005f0 <joc2+0x94>
            afisare = afisare - (1 << i);
 80005b4:	2201      	movs	r2, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	603b      	str	r3, [r7, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 80005c2:	2200      	movs	r2, #0
 80005c4:	2108      	movs	r1, #8
 80005c6:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <joc2+0x9c>)
 80005c8:	f000 fd98 	bl	80010fc <HAL_GPIO_WritePin>
            shiftOut(MSB, afisare); // Trimite valoare pentru LED-uri
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff ff44 	bl	8000460 <shiftOut>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 80005d8:	2201      	movs	r2, #1
 80005da:	2108      	movs	r1, #8
 80005dc:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <joc2+0x9c>)
 80005de:	f000 fd8d 	bl	80010fc <HAL_GPIO_WritePin>
            HAL_Delay(500);
 80005e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e6:	f000 fad3 	bl	8000b90 <HAL_Delay>
        for (i = 8; i >= 0; i--) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dade      	bge.n	80005b4 <joc2+0x58>
        for (i = 1; i < 9; i++) {
 80005f6:	e7b6      	b.n	8000566 <joc2+0xa>
 80005f8:	40010c00 	.word	0x40010c00

080005fc <joc3>:
        }
    }
}

void joc3() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
    int i;
    int afisare = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	603b      	str	r3, [r7, #0]
    while(1) {
        for (i = 0; i < 8; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e019      	b.n	8000640 <joc3+0x44>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 800060c:	2200      	movs	r2, #0
 800060e:	2108      	movs	r1, #8
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <joc3+0x4c>)
 8000612:	f000 fd73 	bl	80010fc <HAL_GPIO_WritePin>
            shiftOut(MSB, afisare << i); // Shift pentru a aprinde un LED
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ff1c 	bl	8000460 <shiftOut>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 8000628:	2201      	movs	r2, #1
 800062a:	2108      	movs	r1, #8
 800062c:	4806      	ldr	r0, [pc, #24]	@ (8000648 <joc3+0x4c>)
 800062e:	f000 fd65 	bl	80010fc <HAL_GPIO_WritePin>
            HAL_Delay(500);
 8000632:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000636:	f000 faab 	bl	8000b90 <HAL_Delay>
        for (i = 0; i < 8; i++) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b07      	cmp	r3, #7
 8000644:	dde2      	ble.n	800060c <joc3+0x10>
 8000646:	e7de      	b.n	8000606 <joc3+0xa>
 8000648:	40010c00 	.word	0x40010c00

0800064c <joc4>:
        }
    }
}

void joc4() {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
    int configuratie;
    while(1) {
        configuratie = rand() % 256; // Aleatorie între 0 și 255 (8 biți)
 8000652:	f001 fc59 	bl	8001f08 <rand>
 8000656:	4603      	mov	r3, r0
 8000658:	425a      	negs	r2, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	bf58      	it	pl
 8000660:	4253      	negpl	r3, r2
 8000662:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 8000664:	2200      	movs	r2, #0
 8000666:	2108      	movs	r1, #8
 8000668:	4809      	ldr	r0, [pc, #36]	@ (8000690 <joc4+0x44>)
 800066a:	f000 fd47 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, configuratie); // Trimite valoare aleatorie pe 8 LED-uri
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff fef3 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 800067a:	2201      	movs	r2, #1
 800067c:	2108      	movs	r1, #8
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <joc4+0x44>)
 8000680:	f000 fd3c 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f000 fa83 	bl	8000b90 <HAL_Delay>
        configuratie = rand() % 256; // Aleatorie între 0 și 255 (8 biți)
 800068a:	bf00      	nop
 800068c:	e7e1      	b.n	8000652 <joc4+0x6>
 800068e:	bf00      	nop
 8000690:	40010c00 	.word	0x40010c00

08000694 <stingerea>:
    }
}

void stingerea() {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 8000698:	2200      	movs	r2, #0
 800069a:	2108      	movs	r1, #8
 800069c:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <stingerea+0x24>)
 800069e:	f000 fd2d 	bl	80010fc <HAL_GPIO_WritePin>
    shiftOut(MSB, 0b00000000); // Trimite valoarea 00000000 pentru a stinge toate LED-urile
 80006a2:	2100      	movs	r1, #0
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fedb 	bl	8000460 <shiftOut>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 80006aa:	2201      	movs	r2, #1
 80006ac:	2108      	movs	r1, #8
 80006ae:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <stingerea+0x24>)
 80006b0:	f000 fd24 	bl	80010fc <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40010c00 	.word	0x40010c00

080006bc <joc5>:

void joc5() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
    for (int i = 0; i < 256; i++) { // 2^8 = 256
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e015      	b.n	80006f4 <joc5+0x38>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 80006c8:	2200      	movs	r2, #0
 80006ca:	2108      	movs	r1, #8
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <joc5+0x48>)
 80006ce:	f000 fd15 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, i); // Trimite valoare binară pe 8 LED-uri
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4619      	mov	r1, r3
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff fec1 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 80006de:	2201      	movs	r2, #1
 80006e0:	2108      	movs	r1, #8
 80006e2:	4808      	ldr	r0, [pc, #32]	@ (8000704 <joc5+0x48>)
 80006e4:	f000 fd0a 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(250);
 80006e8:	20fa      	movs	r0, #250	@ 0xfa
 80006ea:	f000 fa51 	bl	8000b90 <HAL_Delay>
    for (int i = 0; i < 256; i++) { // 2^8 = 256
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2bff      	cmp	r3, #255	@ 0xff
 80006f8:	dde6      	ble.n	80006c8 <joc5+0xc>
    }
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40010c00 	.word	0x40010c00

08000708 <joc6>:

void joc6() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    while(1) {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 800070c:	2200      	movs	r2, #0
 800070e:	2108      	movs	r1, #8
 8000710:	4821      	ldr	r0, [pc, #132]	@ (8000798 <joc6+0x90>)
 8000712:	f000 fcf3 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, 0b10000001); // LED-uri simetrice pe margini
 8000716:	2181      	movs	r1, #129	@ 0x81
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff fea1 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 800071e:	2201      	movs	r2, #1
 8000720:	2108      	movs	r1, #8
 8000722:	481d      	ldr	r0, [pc, #116]	@ (8000798 <joc6+0x90>)
 8000724:	f000 fcea 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(250);
 8000728:	20fa      	movs	r0, #250	@ 0xfa
 800072a:	f000 fa31 	bl	8000b90 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 800072e:	2200      	movs	r2, #0
 8000730:	2108      	movs	r1, #8
 8000732:	4819      	ldr	r0, [pc, #100]	@ (8000798 <joc6+0x90>)
 8000734:	f000 fce2 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, 0b01000010); // LED-uri simetrice pe margini
 8000738:	2142      	movs	r1, #66	@ 0x42
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff fe90 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4814      	ldr	r0, [pc, #80]	@ (8000798 <joc6+0x90>)
 8000746:	f000 fcd9 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(250);
 800074a:	20fa      	movs	r0, #250	@ 0xfa
 800074c:	f000 fa20 	bl	8000b90 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 8000750:	2200      	movs	r2, #0
 8000752:	2108      	movs	r1, #8
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <joc6+0x90>)
 8000756:	f000 fcd1 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, 0b00100100); // LED-uri simetrice
 800075a:	2124      	movs	r1, #36	@ 0x24
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fe7f 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 8000762:	2201      	movs	r2, #1
 8000764:	2108      	movs	r1, #8
 8000766:	480c      	ldr	r0, [pc, #48]	@ (8000798 <joc6+0x90>)
 8000768:	f000 fcc8 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(250);
 800076c:	20fa      	movs	r0, #250	@ 0xfa
 800076e:	f000 fa0f 	bl	8000b90 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <joc6+0x90>)
 8000778:	f000 fcc0 	bl	80010fc <HAL_GPIO_WritePin>
        shiftOut(MSB, 0b00011000); // LED-uri simetrice
 800077c:	2118      	movs	r1, #24
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fe6e 	bl	8000460 <shiftOut>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Latch pin high
 8000784:	2201      	movs	r2, #1
 8000786:	2108      	movs	r1, #8
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <joc6+0x90>)
 800078a:	f000 fcb7 	bl	80010fc <HAL_GPIO_WritePin>
        HAL_Delay(250);
 800078e:	20fa      	movs	r0, #250	@ 0xfa
 8000790:	f000 f9fe 	bl	8000b90 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Latch pin low
 8000794:	bf00      	nop
 8000796:	e7b9      	b.n	800070c <joc6+0x4>
 8000798:	40010c00 	.word	0x40010c00

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <HAL_MspInit+0x5c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a14      	ldr	r2, [pc, #80]	@ (8000804 <HAL_MspInit+0x5c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_MspInit+0x5c>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x5c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <HAL_MspInit+0x5c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_MspInit+0x5c>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <HAL_MspInit+0x60>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_MspInit+0x60>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000
 8000808:	40010000 	.word	0x40010000

0800080c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a15      	ldr	r2, [pc, #84]	@ (800087c <HAL_UART_MspInit+0x70>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d123      	bne.n	8000874 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <HAL_UART_MspInit+0x74>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <HAL_UART_MspInit+0x74>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000836:	61d3      	str	r3, [r2, #28]
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <HAL_UART_MspInit+0x74>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <HAL_UART_MspInit+0x74>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <HAL_UART_MspInit+0x74>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <HAL_UART_MspInit+0x74>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085c:	230c      	movs	r3, #12
 800085e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2302      	movs	r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <HAL_UART_MspInit+0x78>)
 8000870:	f000 fac0 	bl	8000df4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40004400 	.word	0x40004400
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <NMI_Handler+0x4>

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <MemManage_Handler+0x4>

080008a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f93e 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008e8:	f000 fc20 	bl	800112c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return 1;
 80008f4:	2301      	movs	r3, #1
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <_kill>:

int _kill(int pid, int sig)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000908:	f001 fc90 	bl	800222c <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	2216      	movs	r2, #22
 8000910:	601a      	str	r2, [r3, #0]
  return -1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_exit>:

void _exit (int status)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000926:	f04f 31ff 	mov.w	r1, #4294967295
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffe7 	bl	80008fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <_exit+0x12>

08000934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00a      	b.n	800095c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000946:	f3af 8000 	nop.w
 800094a:	4601      	mov	r1, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf0      	blt.n	8000946 <_read+0x12>
  }

  return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e009      	b.n	8000994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf1      	blt.n	8000980 <_write+0x12>
  }
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:

int _close(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009cc:	605a      	str	r2, [r3, #4]
  return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <_isatty>:

int _isatty(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
	...

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	@ (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d207      	bcs.n	8000a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a38:	f001 fbf8 	bl	800222c <__errno>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	220c      	movs	r2, #12
 8000a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	e009      	b.n	8000a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <_sbrk+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20005000 	.word	0x20005000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	200000cc 	.word	0x200000cc
 8000a70:	20000220 	.word	0x20000220

08000a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff fff8 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a86:	490c      	ldr	r1, [pc, #48]	@ (8000ab8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a88:	4a0c      	ldr	r2, [pc, #48]	@ (8000abc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a09      	ldr	r2, [pc, #36]	@ (8000ac0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a9c:	4c09      	ldr	r4, [pc, #36]	@ (8000ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f001 fbc5 	bl	8002238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aae:	f7ff fb55 	bl	800015c <main>
  bx lr
 8000ab2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000abc:	08003084 	.word	0x08003084
  ldr r2, =_sbss
 8000ac0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac4:	20000220 	.word	0x20000220

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_Init+0x28>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_Init+0x28>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f947 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fe5e 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f95f 	bl	8000dda <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f927 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a03      	ldr	r2, [pc, #12]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000008 	.word	0x20000008
 8000b78:	200000d0 	.word	0x200000d0

08000b7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	@ (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	200000d0 	.word	0x200000d0

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff fff0 	bl	8000b7c <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffe0 	bl	8000b7c <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4906      	ldr	r1, [pc, #24]	@ (8000c70 <__NVIC_EnableIRQ+0x34>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	@ (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	@ 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff90 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff2d 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff42 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff90 	bl	8000cc8 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5f 	bl	8000c74 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff35 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b08b      	sub	sp, #44	@ 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e169      	b.n	80010dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8158 	bne.w	80010d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4a9a      	ldr	r2, [pc, #616]	@ (8001094 <HAL_GPIO_Init+0x2a0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d05e      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e30:	4a98      	ldr	r2, [pc, #608]	@ (8001094 <HAL_GPIO_Init+0x2a0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d875      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e36:	4a98      	ldr	r2, [pc, #608]	@ (8001098 <HAL_GPIO_Init+0x2a4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d058      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e3c:	4a96      	ldr	r2, [pc, #600]	@ (8001098 <HAL_GPIO_Init+0x2a4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d86f      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e42:	4a96      	ldr	r2, [pc, #600]	@ (800109c <HAL_GPIO_Init+0x2a8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d052      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e48:	4a94      	ldr	r2, [pc, #592]	@ (800109c <HAL_GPIO_Init+0x2a8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d869      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e4e:	4a94      	ldr	r2, [pc, #592]	@ (80010a0 <HAL_GPIO_Init+0x2ac>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d04c      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e54:	4a92      	ldr	r2, [pc, #584]	@ (80010a0 <HAL_GPIO_Init+0x2ac>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d863      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e5a:	4a92      	ldr	r2, [pc, #584]	@ (80010a4 <HAL_GPIO_Init+0x2b0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d046      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e60:	4a90      	ldr	r2, [pc, #576]	@ (80010a4 <HAL_GPIO_Init+0x2b0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d85d      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d82a      	bhi.n	8000ec0 <HAL_GPIO_Init+0xcc>
 8000e6a:	2b12      	cmp	r3, #18
 8000e6c:	d859      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e74 <HAL_GPIO_Init+0x80>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000eef 	.word	0x08000eef
 8000e78:	08000ec9 	.word	0x08000ec9
 8000e7c:	08000edb 	.word	0x08000edb
 8000e80:	08000f1d 	.word	0x08000f1d
 8000e84:	08000f23 	.word	0x08000f23
 8000e88:	08000f23 	.word	0x08000f23
 8000e8c:	08000f23 	.word	0x08000f23
 8000e90:	08000f23 	.word	0x08000f23
 8000e94:	08000f23 	.word	0x08000f23
 8000e98:	08000f23 	.word	0x08000f23
 8000e9c:	08000f23 	.word	0x08000f23
 8000ea0:	08000f23 	.word	0x08000f23
 8000ea4:	08000f23 	.word	0x08000f23
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000f23 	.word	0x08000f23
 8000eb0:	08000f23 	.word	0x08000f23
 8000eb4:	08000f23 	.word	0x08000f23
 8000eb8:	08000ed1 	.word	0x08000ed1
 8000ebc:	08000ee5 	.word	0x08000ee5
 8000ec0:	4a79      	ldr	r2, [pc, #484]	@ (80010a8 <HAL_GPIO_Init+0x2b4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ec6:	e02c      	b.n	8000f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	623b      	str	r3, [r7, #32]
          break;
 8000ece:	e029      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e024      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	3308      	adds	r3, #8
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e01f      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e01a      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e013      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d105      	bne.n	8000f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f04:	2308      	movs	r3, #8
 8000f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	611a      	str	r2, [r3, #16]
          break;
 8000f0e:	e009      	b.n	8000f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	615a      	str	r2, [r3, #20]
          break;
 8000f1a:	e003      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          break;
 8000f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2bff      	cmp	r3, #255	@ 0xff
 8000f28:	d801      	bhi.n	8000f2e <HAL_GPIO_Init+0x13a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_Init+0x13e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3304      	adds	r3, #4
 8000f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2bff      	cmp	r3, #255	@ 0xff
 8000f38:	d802      	bhi.n	8000f40 <HAL_GPIO_Init+0x14c>
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x152>
 8000f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f42:	3b08      	subs	r3, #8
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	6a39      	ldr	r1, [r7, #32]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	431a      	orrs	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80b1 	beq.w	80010d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f74:	4b4d      	ldr	r3, [pc, #308]	@ (80010ac <HAL_GPIO_Init+0x2b8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a4c      	ldr	r2, [pc, #304]	@ (80010ac <HAL_GPIO_Init+0x2b8>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b4a      	ldr	r3, [pc, #296]	@ (80010ac <HAL_GPIO_Init+0x2b8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f8c:	4a48      	ldr	r2, [pc, #288]	@ (80010b0 <HAL_GPIO_Init+0x2bc>)
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a40      	ldr	r2, [pc, #256]	@ (80010b4 <HAL_GPIO_Init+0x2c0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d013      	beq.n	8000fe0 <HAL_GPIO_Init+0x1ec>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3f      	ldr	r2, [pc, #252]	@ (80010b8 <HAL_GPIO_Init+0x2c4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1e8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80010bc <HAL_GPIO_Init+0x2c8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a3d      	ldr	r2, [pc, #244]	@ (80010c0 <HAL_GPIO_Init+0x2cc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1e0>
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e006      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	e004      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fe4:	f002 0203 	and.w	r2, r2, #3
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	4093      	lsls	r3, r2
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ff2:	492f      	ldr	r1, [pc, #188]	@ (80010b0 <HAL_GPIO_Init+0x2bc>)
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	492c      	ldr	r1, [pc, #176]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	608b      	str	r3, [r1, #8]
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	43db      	mvns	r3, r3
 8001022:	4928      	ldr	r1, [pc, #160]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001024:	4013      	ands	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001034:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	4922      	ldr	r1, [pc, #136]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	60cb      	str	r3, [r1, #12]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	491e      	ldr	r1, [pc, #120]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 800104c:	4013      	ands	r3, r2
 800104e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4918      	ldr	r1, [pc, #96]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	43db      	mvns	r3, r3
 8001072:	4914      	ldr	r1, [pc, #80]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001074:	4013      	ands	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d021      	beq.n	80010c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <HAL_GPIO_Init+0x2d0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
 8001090:	e021      	b.n	80010d6 <HAL_GPIO_Init+0x2e2>
 8001092:	bf00      	nop
 8001094:	10320000 	.word	0x10320000
 8001098:	10310000 	.word	0x10310000
 800109c:	10220000 	.word	0x10220000
 80010a0:	10210000 	.word	0x10210000
 80010a4:	10120000 	.word	0x10120000
 80010a8:	10110000 	.word	0x10110000
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	40010800 	.word	0x40010800
 80010b8:	40010c00 	.word	0x40010c00
 80010bc:	40011000 	.word	0x40011000
 80010c0:	40011400 	.word	0x40011400
 80010c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	4909      	ldr	r1, [pc, #36]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	fa22 f303 	lsr.w	r3, r2, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f47f ae8e 	bne.w	8000e08 <HAL_GPIO_Init+0x14>
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	372c      	adds	r7, #44	@ 0x2c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	611a      	str	r2, [r3, #16]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f806 	bl	800115c <HAL_GPIO_EXTI_Callback>
  }
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e272      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8087 	beq.w	800129e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001190:	4b92      	ldr	r3, [pc, #584]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b04      	cmp	r3, #4
 800119a:	d00c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119c:	4b8f      	ldr	r3, [pc, #572]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d112      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
 80011a8:	4b8c      	ldr	r3, [pc, #560]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b4:	d10b      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4b89      	ldr	r3, [pc, #548]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d06c      	beq.n	800129c <HAL_RCC_OscConfig+0x12c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d168      	bne.n	800129c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e24c      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x76>
 80011d8:	4b80      	ldr	r3, [pc, #512]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a7f      	ldr	r2, [pc, #508]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e02e      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b7b      	ldr	r3, [pc, #492]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7a      	ldr	r2, [pc, #488]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b78      	ldr	r3, [pc, #480]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a77      	ldr	r2, [pc, #476]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0xbc>
 8001212:	4b72      	ldr	r3, [pc, #456]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a71      	ldr	r2, [pc, #452]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6f      	ldr	r3, [pc, #444]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6e      	ldr	r2, [pc, #440]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 800122c:	4b6b      	ldr	r3, [pc, #428]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a6a      	ldr	r2, [pc, #424]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b68      	ldr	r3, [pc, #416]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a67      	ldr	r2, [pc, #412]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc96 	bl	8000b7c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fc92 	bl	8000b7c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	@ 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e200      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5d      	ldr	r3, [pc, #372]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xe4>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc82 	bl	8000b7c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc7e 	bl	8000b7c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	@ 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1ec      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b53      	ldr	r3, [pc, #332]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x10c>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012aa:	4b4c      	ldr	r3, [pc, #304]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012b6:	4b49      	ldr	r3, [pc, #292]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
 80012c2:	4b46      	ldr	r3, [pc, #280]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1c0      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3d      	ldr	r3, [pc, #244]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4939      	ldr	r1, [pc, #228]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b36      	ldr	r3, [pc, #216]	@ (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fc37 	bl	8000b7c <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc33 	bl	8000b7c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1a1      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4927      	ldr	r1, [pc, #156]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc16 	bl	8000b7c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fc12 	bl	8000b7c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e180      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03a      	beq.n	80013f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d019      	beq.n	80013ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_RCC_OscConfig+0x274>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff fbf6 	bl	8000b7c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fbf2 	bl	8000b7c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e160      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 face 	bl	8001954 <RCC_Delay>
 80013b8:	e01c      	b.n	80013f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fbdc 	bl	8000b7c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	e00f      	b.n	80013e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbd8 	bl	8000b7c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d908      	bls.n	80013e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e146      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	42420000 	.word	0x42420000
 80013e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4b92      	ldr	r3, [pc, #584]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e9      	bne.n	80013c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a6 	beq.w	800154e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001406:	4b8b      	ldr	r3, [pc, #556]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b88      	ldr	r3, [pc, #544]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a87      	ldr	r2, [pc, #540]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b85      	ldr	r3, [pc, #532]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b82      	ldr	r3, [pc, #520]	@ (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b7f      	ldr	r3, [pc, #508]	@ (8001638 <HAL_RCC_OscConfig+0x4c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7e      	ldr	r2, [pc, #504]	@ (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fb99 	bl	8000b7c <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fb95 	bl	8000b7c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	@ 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e103      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b75      	ldr	r3, [pc, #468]	@ (8001638 <HAL_RCC_OscConfig+0x4c8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001474:	4b6f      	ldr	r3, [pc, #444]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a6e      	ldr	r2, [pc, #440]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e02d      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x334>
 800148a:	4b6a      	ldr	r3, [pc, #424]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a69      	ldr	r2, [pc, #420]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b67      	ldr	r3, [pc, #412]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a66      	ldr	r2, [pc, #408]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	e01c      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x356>
 80014ac:	4b61      	ldr	r3, [pc, #388]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a60      	ldr	r2, [pc, #384]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	4b58      	ldr	r3, [pc, #352]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a57      	ldr	r2, [pc, #348]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d015      	beq.n	8001512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb49 	bl	8000b7c <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fb45 	bl	8000b7c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0b1      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ee      	beq.n	80014ee <HAL_RCC_OscConfig+0x37e>
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb33 	bl	8000b7c <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb2f 	bl	8000b7c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e09b      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	4b40      	ldr	r3, [pc, #256]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001542:	4b3c      	ldr	r3, [pc, #240]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a3b      	ldr	r2, [pc, #236]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001558:	4b36      	ldr	r3, [pc, #216]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d061      	beq.n	8001628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d146      	bne.n	80015fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b33      	ldr	r3, [pc, #204]	@ (800163c <HAL_RCC_OscConfig+0x4cc>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fb03 	bl	8000b7c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff faff 	bl	8000b7c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e06d      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a0:	d108      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a2:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4921      	ldr	r1, [pc, #132]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a19      	ldr	r1, [r3, #32]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	430b      	orrs	r3, r1
 80015c6:	491b      	ldr	r1, [pc, #108]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fad3 	bl	8000b7c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff facf 	bl	8000b7c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e03d      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
 80015f8:	e035      	b.n	8001666 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fabc 	bl	8000b7c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fab8 	bl	8000b7c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e026      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x498>
 8001626:	e01e      	b.n	8001666 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d107      	bne.n	8001640 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e019      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
 8001634:	40021000 	.word	0x40021000
 8001638:	40007000 	.word	0x40007000
 800163c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_RCC_OscConfig+0x500>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	429a      	cmp	r2, r3
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0d0      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b6a      	ldr	r3, [pc, #424]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d910      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b67      	ldr	r3, [pc, #412]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	4965      	ldr	r1, [pc, #404]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d040      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e073      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4936      	ldr	r1, [pc, #216]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa0a 	bl	8000b7c <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa06 	bl	8000b7c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e053      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d210      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4922      	ldr	r1, [pc, #136]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	@ (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <HAL_RCC_ClockConfig+0x1cc>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1d0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f968 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	40021000 	.word	0x40021000
 800183c:	08002f6c 	.word	0x08002f6c
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x30>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x36>
 8001876:	e027      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800187a:	613b      	str	r3, [r7, #16]
      break;
 800187c:	e027      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c5b      	lsrs	r3, r3, #17
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	4a11      	ldr	r2, [pc, #68]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e004      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	613b      	str	r3, [r7, #16]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ca:	613b      	str	r3, [r7, #16]
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	693b      	ldr	r3, [r7, #16]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	007a1200 	.word	0x007a1200
 80018e4:	08002f84 	.word	0x08002f84
 80018e8:	08002f94 	.word	0x08002f94
 80018ec:	003d0900 	.word	0x003d0900

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b02      	ldr	r3, [pc, #8]	@ (8001900 <HAL_RCC_GetHCLKFreq+0x10>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000000 	.word	0x20000000

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001908:	f7ff fff2 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	@ (8001928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	08002f7c 	.word	0x08002f7c

0800192c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001930:	f7ff ffde 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0adb      	lsrs	r3, r3, #11
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	4903      	ldr	r1, [pc, #12]	@ (8001950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	08002f7c 	.word	0x08002f7c

08001954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <RCC_Delay+0x34>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <RCC_Delay+0x38>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0a5b      	lsrs	r3, r3, #9
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001970:	bf00      	nop
  }
  while (Delay --);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	60fa      	str	r2, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <RCC_Delay+0x1c>
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000000 	.word	0x20000000
 800198c:	10624dd3 	.word	0x10624dd3

08001990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e042      	b.n	8001a28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe ff28 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2224      	movs	r2, #36	@ 0x24
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fa09 	bl	8001dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d175      	bne.n	8001b3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_UART_Transmit+0x2c>
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e06e      	b.n	8001b3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2221      	movs	r2, #33	@ 0x21
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a6e:	f7ff f885 	bl	8000b7c <HAL_GetTick>
 8001a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a88:	d108      	bne.n	8001a9c <HAL_UART_Transmit+0x6c>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e003      	b.n	8001aa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001aa4:	e02e      	b.n	8001b04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	2180      	movs	r1, #128	@ 0x80
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f8df 	bl	8001c74 <UART_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e03a      	b.n	8001b3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10b      	bne.n	8001ae6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001adc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e007      	b.n	8001af6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1cb      	bne.n	8001aa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2140      	movs	r1, #64	@ 0x40
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f8ab 	bl	8001c74 <UART_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e006      	b.n	8001b3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e000      	b.n	8001b3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
  }
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b08a      	sub	sp, #40	@ 0x28
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4613      	mov	r3, r2
 8001b54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	f040 8081 	bne.w	8001c6a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_UART_Receive+0x2e>
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e079      	b.n	8001c6c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2222      	movs	r2, #34	@ 0x22
 8001b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe fff6 	bl	8000b7c <HAL_GetTick>
 8001b90:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ba6:	d108      	bne.n	8001bba <HAL_UART_Receive+0x74>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d104      	bne.n	8001bba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	e003      	b.n	8001bc2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001bc2:	e047      	b.n	8001c54 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2120      	movs	r1, #32
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f850 	bl	8001c74 <UART_WaitOnFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e042      	b.n	8001c6c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10c      	bne.n	8001c06 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	3302      	adds	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	e01f      	b.n	8001c46 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c0e:	d007      	beq.n	8001c20 <HAL_UART_Receive+0xda>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <HAL_UART_Receive+0xe8>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e008      	b.n	8001c40 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1b2      	bne.n	8001bc4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
  }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c84:	e03b      	b.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d037      	beq.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8e:	f7fe ff75 	bl	8000b7c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	6a3a      	ldr	r2, [r7, #32]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e03a      	b.n	8001d1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d023      	beq.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b80      	cmp	r3, #128	@ 0x80
 8001cba:	d020      	beq.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b40      	cmp	r3, #64	@ 0x40
 8001cc0:	d01d      	beq.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d116      	bne.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f81d 	bl	8001d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2208      	movs	r2, #8
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4013      	ands	r3, r2
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	bf0c      	ite	eq
 8001d0e:	2301      	moveq	r3, #1
 8001d10:	2300      	movne	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d0b4      	beq.n	8001c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b095      	sub	sp, #84	@ 0x54
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	330c      	adds	r3, #12
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d38:	e853 3f00 	ldrex	r3, [r3]
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d56:	e841 2300 	strex	r3, r2, [r1]
 8001d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1e5      	bne.n	8001d2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3314      	adds	r3, #20
 8001d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	e853 3f00 	ldrex	r3, [r3]
 8001d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3314      	adds	r3, #20
 8001d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d8a:	e841 2300 	strex	r3, r2, [r1]
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e5      	bne.n	8001d62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d119      	bne.n	8001dd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	330c      	adds	r3, #12
 8001da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	e853 3f00 	ldrex	r3, [r3]
 8001dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f023 0310 	bic.w	r3, r3, #16
 8001db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	330c      	adds	r3, #12
 8001dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dbe:	61ba      	str	r2, [r7, #24]
 8001dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc2:	6979      	ldr	r1, [r7, #20]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	e841 2300 	strex	r3, r2, [r1]
 8001dca:	613b      	str	r3, [r7, #16]
   return(result);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1e5      	bne.n	8001d9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001de0:	bf00      	nop
 8001de2:	3754      	adds	r7, #84	@ 0x54
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
	...

08001dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e26:	f023 030c 	bic.w	r3, r3, #12
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f00 <UART_SetConfig+0x114>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d103      	bne.n	8001e5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e54:	f7ff fd6a 	bl	800192c <HAL_RCC_GetPCLK2Freq>
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	e002      	b.n	8001e62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e5c:	f7ff fd52 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 8001e60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009a      	lsls	r2, r3, #2
 8001e6c:	441a      	add	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <UART_SetConfig+0x118>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	0119      	lsls	r1, r3, #4
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <UART_SetConfig+0x118>)
 8001e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2064      	movs	r0, #100	@ 0x64
 8001ea2:	fb00 f303 	mul.w	r3, r0, r3
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	3332      	adds	r3, #50	@ 0x32
 8001eac:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <UART_SetConfig+0x118>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eb8:	4419      	add	r1, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	441a      	add	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <UART_SetConfig+0x118>)
 8001ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2064      	movs	r0, #100	@ 0x64
 8001eda:	fb00 f303 	mul.w	r3, r0, r3
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	3332      	adds	r3, #50	@ 0x32
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <UART_SetConfig+0x118>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013800 	.word	0x40013800
 8001f04:	51eb851f 	.word	0x51eb851f

08001f08 <rand>:
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <rand+0x5c>)
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	681c      	ldr	r4, [r3, #0]
 8001f0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f10:	b9b3      	cbnz	r3, 8001f40 <rand+0x38>
 8001f12:	2018      	movs	r0, #24
 8001f14:	f000 fa1e 	bl	8002354 <malloc>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6320      	str	r0, [r4, #48]	@ 0x30
 8001f1c:	b920      	cbnz	r0, 8001f28 <rand+0x20>
 8001f1e:	2152      	movs	r1, #82	@ 0x52
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <rand+0x60>)
 8001f22:	4812      	ldr	r0, [pc, #72]	@ (8001f6c <rand+0x64>)
 8001f24:	f000 f9b0 	bl	8002288 <__assert_func>
 8001f28:	4911      	ldr	r1, [pc, #68]	@ (8001f70 <rand+0x68>)
 8001f2a:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <rand+0x6c>)
 8001f2c:	e9c0 1300 	strd	r1, r3, [r0]
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <rand+0x70>)
 8001f32:	2100      	movs	r1, #0
 8001f34:	6083      	str	r3, [r0, #8]
 8001f36:	230b      	movs	r3, #11
 8001f38:	8183      	strh	r3, [r0, #12]
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001f40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001f42:	480e      	ldr	r0, [pc, #56]	@ (8001f7c <rand+0x74>)
 8001f44:	690b      	ldr	r3, [r1, #16]
 8001f46:	694c      	ldr	r4, [r1, #20]
 8001f48:	4358      	muls	r0, r3
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <rand+0x78>)
 8001f4c:	fb02 0004 	mla	r0, r2, r4, r0
 8001f50:	fba3 3202 	umull	r3, r2, r3, r2
 8001f54:	3301      	adds	r3, #1
 8001f56:	eb40 0002 	adc.w	r0, r0, r2
 8001f5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001f5e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	20000018 	.word	0x20000018
 8001f68:	08002f96 	.word	0x08002f96
 8001f6c:	08002fad 	.word	0x08002fad
 8001f70:	abcd330e 	.word	0xabcd330e
 8001f74:	e66d1234 	.word	0xe66d1234
 8001f78:	0005deec 	.word	0x0005deec
 8001f7c:	5851f42d 	.word	0x5851f42d
 8001f80:	4c957f2d 	.word	0x4c957f2d

08001f84 <std>:
 8001f84:	2300      	movs	r3, #0
 8001f86:	b510      	push	{r4, lr}
 8001f88:	4604      	mov	r4, r0
 8001f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8001f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f92:	6083      	str	r3, [r0, #8]
 8001f94:	8181      	strh	r1, [r0, #12]
 8001f96:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f98:	81c2      	strh	r2, [r0, #14]
 8001f9a:	6183      	str	r3, [r0, #24]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	305c      	adds	r0, #92	@ 0x5c
 8001fa2:	f000 f8f4 	bl	800218e <memset>
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <std+0x58>)
 8001fa8:	6224      	str	r4, [r4, #32]
 8001faa:	6263      	str	r3, [r4, #36]	@ 0x24
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <std+0x5c>)
 8001fae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <std+0x60>)
 8001fb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <std+0x64>)
 8001fb6:	6323      	str	r3, [r4, #48]	@ 0x30
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <std+0x68>)
 8001fba:	429c      	cmp	r4, r3
 8001fbc:	d006      	beq.n	8001fcc <std+0x48>
 8001fbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001fc2:	4294      	cmp	r4, r2
 8001fc4:	d002      	beq.n	8001fcc <std+0x48>
 8001fc6:	33d0      	adds	r3, #208	@ 0xd0
 8001fc8:	429c      	cmp	r4, r3
 8001fca:	d105      	bne.n	8001fd8 <std+0x54>
 8001fcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fd4:	f000 b954 	b.w	8002280 <__retarget_lock_init_recursive>
 8001fd8:	bd10      	pop	{r4, pc}
 8001fda:	bf00      	nop
 8001fdc:	08002109 	.word	0x08002109
 8001fe0:	0800212b 	.word	0x0800212b
 8001fe4:	08002163 	.word	0x08002163
 8001fe8:	08002187 	.word	0x08002187
 8001fec:	200000d4 	.word	0x200000d4

08001ff0 <stdio_exit_handler>:
 8001ff0:	4a02      	ldr	r2, [pc, #8]	@ (8001ffc <stdio_exit_handler+0xc>)
 8001ff2:	4903      	ldr	r1, [pc, #12]	@ (8002000 <stdio_exit_handler+0x10>)
 8001ff4:	4803      	ldr	r0, [pc, #12]	@ (8002004 <stdio_exit_handler+0x14>)
 8001ff6:	f000 b869 	b.w	80020cc <_fwalk_sglue>
 8001ffa:	bf00      	nop
 8001ffc:	2000000c 	.word	0x2000000c
 8002000:	080025c1 	.word	0x080025c1
 8002004:	2000001c 	.word	0x2000001c

08002008 <cleanup_stdio>:
 8002008:	6841      	ldr	r1, [r0, #4]
 800200a:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <cleanup_stdio+0x34>)
 800200c:	b510      	push	{r4, lr}
 800200e:	4299      	cmp	r1, r3
 8002010:	4604      	mov	r4, r0
 8002012:	d001      	beq.n	8002018 <cleanup_stdio+0x10>
 8002014:	f000 fad4 	bl	80025c0 <_fflush_r>
 8002018:	68a1      	ldr	r1, [r4, #8]
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <cleanup_stdio+0x38>)
 800201c:	4299      	cmp	r1, r3
 800201e:	d002      	beq.n	8002026 <cleanup_stdio+0x1e>
 8002020:	4620      	mov	r0, r4
 8002022:	f000 facd 	bl	80025c0 <_fflush_r>
 8002026:	68e1      	ldr	r1, [r4, #12]
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <cleanup_stdio+0x3c>)
 800202a:	4299      	cmp	r1, r3
 800202c:	d004      	beq.n	8002038 <cleanup_stdio+0x30>
 800202e:	4620      	mov	r0, r4
 8002030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002034:	f000 bac4 	b.w	80025c0 <_fflush_r>
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	200000d4 	.word	0x200000d4
 8002040:	2000013c 	.word	0x2000013c
 8002044:	200001a4 	.word	0x200001a4

08002048 <global_stdio_init.part.0>:
 8002048:	b510      	push	{r4, lr}
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <global_stdio_init.part.0+0x30>)
 800204c:	4c0b      	ldr	r4, [pc, #44]	@ (800207c <global_stdio_init.part.0+0x34>)
 800204e:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <global_stdio_init.part.0+0x38>)
 8002050:	4620      	mov	r0, r4
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	2104      	movs	r1, #4
 8002056:	2200      	movs	r2, #0
 8002058:	f7ff ff94 	bl	8001f84 <std>
 800205c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002060:	2201      	movs	r2, #1
 8002062:	2109      	movs	r1, #9
 8002064:	f7ff ff8e 	bl	8001f84 <std>
 8002068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800206c:	2202      	movs	r2, #2
 800206e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002072:	2112      	movs	r1, #18
 8002074:	f7ff bf86 	b.w	8001f84 <std>
 8002078:	2000020c 	.word	0x2000020c
 800207c:	200000d4 	.word	0x200000d4
 8002080:	08001ff1 	.word	0x08001ff1

08002084 <__sfp_lock_acquire>:
 8002084:	4801      	ldr	r0, [pc, #4]	@ (800208c <__sfp_lock_acquire+0x8>)
 8002086:	f000 b8fc 	b.w	8002282 <__retarget_lock_acquire_recursive>
 800208a:	bf00      	nop
 800208c:	20000215 	.word	0x20000215

08002090 <__sfp_lock_release>:
 8002090:	4801      	ldr	r0, [pc, #4]	@ (8002098 <__sfp_lock_release+0x8>)
 8002092:	f000 b8f7 	b.w	8002284 <__retarget_lock_release_recursive>
 8002096:	bf00      	nop
 8002098:	20000215 	.word	0x20000215

0800209c <__sinit>:
 800209c:	b510      	push	{r4, lr}
 800209e:	4604      	mov	r4, r0
 80020a0:	f7ff fff0 	bl	8002084 <__sfp_lock_acquire>
 80020a4:	6a23      	ldr	r3, [r4, #32]
 80020a6:	b11b      	cbz	r3, 80020b0 <__sinit+0x14>
 80020a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ac:	f7ff bff0 	b.w	8002090 <__sfp_lock_release>
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__sinit+0x28>)
 80020b2:	6223      	str	r3, [r4, #32]
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__sinit+0x2c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f5      	bne.n	80020a8 <__sinit+0xc>
 80020bc:	f7ff ffc4 	bl	8002048 <global_stdio_init.part.0>
 80020c0:	e7f2      	b.n	80020a8 <__sinit+0xc>
 80020c2:	bf00      	nop
 80020c4:	08002009 	.word	0x08002009
 80020c8:	2000020c 	.word	0x2000020c

080020cc <_fwalk_sglue>:
 80020cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020d0:	4607      	mov	r7, r0
 80020d2:	4688      	mov	r8, r1
 80020d4:	4614      	mov	r4, r2
 80020d6:	2600      	movs	r6, #0
 80020d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020dc:	f1b9 0901 	subs.w	r9, r9, #1
 80020e0:	d505      	bpl.n	80020ee <_fwalk_sglue+0x22>
 80020e2:	6824      	ldr	r4, [r4, #0]
 80020e4:	2c00      	cmp	r4, #0
 80020e6:	d1f7      	bne.n	80020d8 <_fwalk_sglue+0xc>
 80020e8:	4630      	mov	r0, r6
 80020ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020ee:	89ab      	ldrh	r3, [r5, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d907      	bls.n	8002104 <_fwalk_sglue+0x38>
 80020f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020f8:	3301      	adds	r3, #1
 80020fa:	d003      	beq.n	8002104 <_fwalk_sglue+0x38>
 80020fc:	4629      	mov	r1, r5
 80020fe:	4638      	mov	r0, r7
 8002100:	47c0      	blx	r8
 8002102:	4306      	orrs	r6, r0
 8002104:	3568      	adds	r5, #104	@ 0x68
 8002106:	e7e9      	b.n	80020dc <_fwalk_sglue+0x10>

08002108 <__sread>:
 8002108:	b510      	push	{r4, lr}
 800210a:	460c      	mov	r4, r1
 800210c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002110:	f000 f868 	bl	80021e4 <_read_r>
 8002114:	2800      	cmp	r0, #0
 8002116:	bfab      	itete	ge
 8002118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800211a:	89a3      	ldrhlt	r3, [r4, #12]
 800211c:	181b      	addge	r3, r3, r0
 800211e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002122:	bfac      	ite	ge
 8002124:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002126:	81a3      	strhlt	r3, [r4, #12]
 8002128:	bd10      	pop	{r4, pc}

0800212a <__swrite>:
 800212a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800212e:	461f      	mov	r7, r3
 8002130:	898b      	ldrh	r3, [r1, #12]
 8002132:	4605      	mov	r5, r0
 8002134:	05db      	lsls	r3, r3, #23
 8002136:	460c      	mov	r4, r1
 8002138:	4616      	mov	r6, r2
 800213a:	d505      	bpl.n	8002148 <__swrite+0x1e>
 800213c:	2302      	movs	r3, #2
 800213e:	2200      	movs	r2, #0
 8002140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002144:	f000 f83c 	bl	80021c0 <_lseek_r>
 8002148:	89a3      	ldrh	r3, [r4, #12]
 800214a:	4632      	mov	r2, r6
 800214c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002150:	81a3      	strh	r3, [r4, #12]
 8002152:	4628      	mov	r0, r5
 8002154:	463b      	mov	r3, r7
 8002156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800215a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800215e:	f000 b853 	b.w	8002208 <_write_r>

08002162 <__sseek>:
 8002162:	b510      	push	{r4, lr}
 8002164:	460c      	mov	r4, r1
 8002166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800216a:	f000 f829 	bl	80021c0 <_lseek_r>
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	bf15      	itete	ne
 8002174:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800217a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800217e:	81a3      	strheq	r3, [r4, #12]
 8002180:	bf18      	it	ne
 8002182:	81a3      	strhne	r3, [r4, #12]
 8002184:	bd10      	pop	{r4, pc}

08002186 <__sclose>:
 8002186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800218a:	f000 b809 	b.w	80021a0 <_close_r>

0800218e <memset>:
 800218e:	4603      	mov	r3, r0
 8002190:	4402      	add	r2, r0
 8002192:	4293      	cmp	r3, r2
 8002194:	d100      	bne.n	8002198 <memset+0xa>
 8002196:	4770      	bx	lr
 8002198:	f803 1b01 	strb.w	r1, [r3], #1
 800219c:	e7f9      	b.n	8002192 <memset+0x4>
	...

080021a0 <_close_r>:
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	2300      	movs	r3, #0
 80021a4:	4d05      	ldr	r5, [pc, #20]	@ (80021bc <_close_r+0x1c>)
 80021a6:	4604      	mov	r4, r0
 80021a8:	4608      	mov	r0, r1
 80021aa:	602b      	str	r3, [r5, #0]
 80021ac:	f7fe fbfb 	bl	80009a6 <_close>
 80021b0:	1c43      	adds	r3, r0, #1
 80021b2:	d102      	bne.n	80021ba <_close_r+0x1a>
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	b103      	cbz	r3, 80021ba <_close_r+0x1a>
 80021b8:	6023      	str	r3, [r4, #0]
 80021ba:	bd38      	pop	{r3, r4, r5, pc}
 80021bc:	20000210 	.word	0x20000210

080021c0 <_lseek_r>:
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4604      	mov	r4, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	4d05      	ldr	r5, [pc, #20]	@ (80021e0 <_lseek_r+0x20>)
 80021cc:	602a      	str	r2, [r5, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f7fe fc0d 	bl	80009ee <_lseek>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	d102      	bne.n	80021de <_lseek_r+0x1e>
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	b103      	cbz	r3, 80021de <_lseek_r+0x1e>
 80021dc:	6023      	str	r3, [r4, #0]
 80021de:	bd38      	pop	{r3, r4, r5, pc}
 80021e0:	20000210 	.word	0x20000210

080021e4 <_read_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	2200      	movs	r2, #0
 80021ee:	4d05      	ldr	r5, [pc, #20]	@ (8002204 <_read_r+0x20>)
 80021f0:	602a      	str	r2, [r5, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f7fe fb9e 	bl	8000934 <_read>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	d102      	bne.n	8002202 <_read_r+0x1e>
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	b103      	cbz	r3, 8002202 <_read_r+0x1e>
 8002200:	6023      	str	r3, [r4, #0]
 8002202:	bd38      	pop	{r3, r4, r5, pc}
 8002204:	20000210 	.word	0x20000210

08002208 <_write_r>:
 8002208:	b538      	push	{r3, r4, r5, lr}
 800220a:	4604      	mov	r4, r0
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	2200      	movs	r2, #0
 8002212:	4d05      	ldr	r5, [pc, #20]	@ (8002228 <_write_r+0x20>)
 8002214:	602a      	str	r2, [r5, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	f7fe fba9 	bl	800096e <_write>
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	d102      	bne.n	8002226 <_write_r+0x1e>
 8002220:	682b      	ldr	r3, [r5, #0]
 8002222:	b103      	cbz	r3, 8002226 <_write_r+0x1e>
 8002224:	6023      	str	r3, [r4, #0]
 8002226:	bd38      	pop	{r3, r4, r5, pc}
 8002228:	20000210 	.word	0x20000210

0800222c <__errno>:
 800222c:	4b01      	ldr	r3, [pc, #4]	@ (8002234 <__errno+0x8>)
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000018 	.word	0x20000018

08002238 <__libc_init_array>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	2600      	movs	r6, #0
 800223c:	4d0c      	ldr	r5, [pc, #48]	@ (8002270 <__libc_init_array+0x38>)
 800223e:	4c0d      	ldr	r4, [pc, #52]	@ (8002274 <__libc_init_array+0x3c>)
 8002240:	1b64      	subs	r4, r4, r5
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	42a6      	cmp	r6, r4
 8002246:	d109      	bne.n	800225c <__libc_init_array+0x24>
 8002248:	f000 fe44 	bl	8002ed4 <_init>
 800224c:	2600      	movs	r6, #0
 800224e:	4d0a      	ldr	r5, [pc, #40]	@ (8002278 <__libc_init_array+0x40>)
 8002250:	4c0a      	ldr	r4, [pc, #40]	@ (800227c <__libc_init_array+0x44>)
 8002252:	1b64      	subs	r4, r4, r5
 8002254:	10a4      	asrs	r4, r4, #2
 8002256:	42a6      	cmp	r6, r4
 8002258:	d105      	bne.n	8002266 <__libc_init_array+0x2e>
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002260:	4798      	blx	r3
 8002262:	3601      	adds	r6, #1
 8002264:	e7ee      	b.n	8002244 <__libc_init_array+0xc>
 8002266:	f855 3b04 	ldr.w	r3, [r5], #4
 800226a:	4798      	blx	r3
 800226c:	3601      	adds	r6, #1
 800226e:	e7f2      	b.n	8002256 <__libc_init_array+0x1e>
 8002270:	0800307c 	.word	0x0800307c
 8002274:	0800307c 	.word	0x0800307c
 8002278:	0800307c 	.word	0x0800307c
 800227c:	08003080 	.word	0x08003080

08002280 <__retarget_lock_init_recursive>:
 8002280:	4770      	bx	lr

08002282 <__retarget_lock_acquire_recursive>:
 8002282:	4770      	bx	lr

08002284 <__retarget_lock_release_recursive>:
 8002284:	4770      	bx	lr
	...

08002288 <__assert_func>:
 8002288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800228a:	4614      	mov	r4, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <__assert_func+0x2c>)
 8002290:	4605      	mov	r5, r0
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68d8      	ldr	r0, [r3, #12]
 8002296:	b14c      	cbz	r4, 80022ac <__assert_func+0x24>
 8002298:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <__assert_func+0x30>)
 800229a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800229e:	9100      	str	r1, [sp, #0]
 80022a0:	462b      	mov	r3, r5
 80022a2:	4906      	ldr	r1, [pc, #24]	@ (80022bc <__assert_func+0x34>)
 80022a4:	f000 f9b4 	bl	8002610 <fiprintf>
 80022a8:	f000 f9d4 	bl	8002654 <abort>
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__assert_func+0x38>)
 80022ae:	461c      	mov	r4, r3
 80022b0:	e7f3      	b.n	800229a <__assert_func+0x12>
 80022b2:	bf00      	nop
 80022b4:	20000018 	.word	0x20000018
 80022b8:	08003005 	.word	0x08003005
 80022bc:	08003012 	.word	0x08003012
 80022c0:	08003040 	.word	0x08003040

080022c4 <_free_r>:
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	4605      	mov	r5, r0
 80022c8:	2900      	cmp	r1, #0
 80022ca:	d040      	beq.n	800234e <_free_r+0x8a>
 80022cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022d0:	1f0c      	subs	r4, r1, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bfb8      	it	lt
 80022d6:	18e4      	addlt	r4, r4, r3
 80022d8:	f000 f8e6 	bl	80024a8 <__malloc_lock>
 80022dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <_free_r+0x8c>)
 80022de:	6813      	ldr	r3, [r2, #0]
 80022e0:	b933      	cbnz	r3, 80022f0 <_free_r+0x2c>
 80022e2:	6063      	str	r3, [r4, #4]
 80022e4:	6014      	str	r4, [r2, #0]
 80022e6:	4628      	mov	r0, r5
 80022e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022ec:	f000 b8e2 	b.w	80024b4 <__malloc_unlock>
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	d908      	bls.n	8002306 <_free_r+0x42>
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	1821      	adds	r1, r4, r0
 80022f8:	428b      	cmp	r3, r1
 80022fa:	bf01      	itttt	eq
 80022fc:	6819      	ldreq	r1, [r3, #0]
 80022fe:	685b      	ldreq	r3, [r3, #4]
 8002300:	1809      	addeq	r1, r1, r0
 8002302:	6021      	streq	r1, [r4, #0]
 8002304:	e7ed      	b.n	80022e2 <_free_r+0x1e>
 8002306:	461a      	mov	r2, r3
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	b10b      	cbz	r3, 8002310 <_free_r+0x4c>
 800230c:	42a3      	cmp	r3, r4
 800230e:	d9fa      	bls.n	8002306 <_free_r+0x42>
 8002310:	6811      	ldr	r1, [r2, #0]
 8002312:	1850      	adds	r0, r2, r1
 8002314:	42a0      	cmp	r0, r4
 8002316:	d10b      	bne.n	8002330 <_free_r+0x6c>
 8002318:	6820      	ldr	r0, [r4, #0]
 800231a:	4401      	add	r1, r0
 800231c:	1850      	adds	r0, r2, r1
 800231e:	4283      	cmp	r3, r0
 8002320:	6011      	str	r1, [r2, #0]
 8002322:	d1e0      	bne.n	80022e6 <_free_r+0x22>
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4408      	add	r0, r1
 800232a:	6010      	str	r0, [r2, #0]
 800232c:	6053      	str	r3, [r2, #4]
 800232e:	e7da      	b.n	80022e6 <_free_r+0x22>
 8002330:	d902      	bls.n	8002338 <_free_r+0x74>
 8002332:	230c      	movs	r3, #12
 8002334:	602b      	str	r3, [r5, #0]
 8002336:	e7d6      	b.n	80022e6 <_free_r+0x22>
 8002338:	6820      	ldr	r0, [r4, #0]
 800233a:	1821      	adds	r1, r4, r0
 800233c:	428b      	cmp	r3, r1
 800233e:	bf01      	itttt	eq
 8002340:	6819      	ldreq	r1, [r3, #0]
 8002342:	685b      	ldreq	r3, [r3, #4]
 8002344:	1809      	addeq	r1, r1, r0
 8002346:	6021      	streq	r1, [r4, #0]
 8002348:	6063      	str	r3, [r4, #4]
 800234a:	6054      	str	r4, [r2, #4]
 800234c:	e7cb      	b.n	80022e6 <_free_r+0x22>
 800234e:	bd38      	pop	{r3, r4, r5, pc}
 8002350:	2000021c 	.word	0x2000021c

08002354 <malloc>:
 8002354:	4b02      	ldr	r3, [pc, #8]	@ (8002360 <malloc+0xc>)
 8002356:	4601      	mov	r1, r0
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	f000 b825 	b.w	80023a8 <_malloc_r>
 800235e:	bf00      	nop
 8002360:	20000018 	.word	0x20000018

08002364 <sbrk_aligned>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	4e0f      	ldr	r6, [pc, #60]	@ (80023a4 <sbrk_aligned+0x40>)
 8002368:	460c      	mov	r4, r1
 800236a:	6831      	ldr	r1, [r6, #0]
 800236c:	4605      	mov	r5, r0
 800236e:	b911      	cbnz	r1, 8002376 <sbrk_aligned+0x12>
 8002370:	f000 f960 	bl	8002634 <_sbrk_r>
 8002374:	6030      	str	r0, [r6, #0]
 8002376:	4621      	mov	r1, r4
 8002378:	4628      	mov	r0, r5
 800237a:	f000 f95b 	bl	8002634 <_sbrk_r>
 800237e:	1c43      	adds	r3, r0, #1
 8002380:	d103      	bne.n	800238a <sbrk_aligned+0x26>
 8002382:	f04f 34ff 	mov.w	r4, #4294967295
 8002386:	4620      	mov	r0, r4
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	1cc4      	adds	r4, r0, #3
 800238c:	f024 0403 	bic.w	r4, r4, #3
 8002390:	42a0      	cmp	r0, r4
 8002392:	d0f8      	beq.n	8002386 <sbrk_aligned+0x22>
 8002394:	1a21      	subs	r1, r4, r0
 8002396:	4628      	mov	r0, r5
 8002398:	f000 f94c 	bl	8002634 <_sbrk_r>
 800239c:	3001      	adds	r0, #1
 800239e:	d1f2      	bne.n	8002386 <sbrk_aligned+0x22>
 80023a0:	e7ef      	b.n	8002382 <sbrk_aligned+0x1e>
 80023a2:	bf00      	nop
 80023a4:	20000218 	.word	0x20000218

080023a8 <_malloc_r>:
 80023a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023ac:	1ccd      	adds	r5, r1, #3
 80023ae:	f025 0503 	bic.w	r5, r5, #3
 80023b2:	3508      	adds	r5, #8
 80023b4:	2d0c      	cmp	r5, #12
 80023b6:	bf38      	it	cc
 80023b8:	250c      	movcc	r5, #12
 80023ba:	2d00      	cmp	r5, #0
 80023bc:	4606      	mov	r6, r0
 80023be:	db01      	blt.n	80023c4 <_malloc_r+0x1c>
 80023c0:	42a9      	cmp	r1, r5
 80023c2:	d904      	bls.n	80023ce <_malloc_r+0x26>
 80023c4:	230c      	movs	r3, #12
 80023c6:	6033      	str	r3, [r6, #0]
 80023c8:	2000      	movs	r0, #0
 80023ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024a4 <_malloc_r+0xfc>
 80023d2:	f000 f869 	bl	80024a8 <__malloc_lock>
 80023d6:	f8d8 3000 	ldr.w	r3, [r8]
 80023da:	461c      	mov	r4, r3
 80023dc:	bb44      	cbnz	r4, 8002430 <_malloc_r+0x88>
 80023de:	4629      	mov	r1, r5
 80023e0:	4630      	mov	r0, r6
 80023e2:	f7ff ffbf 	bl	8002364 <sbrk_aligned>
 80023e6:	1c43      	adds	r3, r0, #1
 80023e8:	4604      	mov	r4, r0
 80023ea:	d158      	bne.n	800249e <_malloc_r+0xf6>
 80023ec:	f8d8 4000 	ldr.w	r4, [r8]
 80023f0:	4627      	mov	r7, r4
 80023f2:	2f00      	cmp	r7, #0
 80023f4:	d143      	bne.n	800247e <_malloc_r+0xd6>
 80023f6:	2c00      	cmp	r4, #0
 80023f8:	d04b      	beq.n	8002492 <_malloc_r+0xea>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	4639      	mov	r1, r7
 80023fe:	4630      	mov	r0, r6
 8002400:	eb04 0903 	add.w	r9, r4, r3
 8002404:	f000 f916 	bl	8002634 <_sbrk_r>
 8002408:	4581      	cmp	r9, r0
 800240a:	d142      	bne.n	8002492 <_malloc_r+0xea>
 800240c:	6821      	ldr	r1, [r4, #0]
 800240e:	4630      	mov	r0, r6
 8002410:	1a6d      	subs	r5, r5, r1
 8002412:	4629      	mov	r1, r5
 8002414:	f7ff ffa6 	bl	8002364 <sbrk_aligned>
 8002418:	3001      	adds	r0, #1
 800241a:	d03a      	beq.n	8002492 <_malloc_r+0xea>
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	442b      	add	r3, r5
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	f8d8 3000 	ldr.w	r3, [r8]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	bb62      	cbnz	r2, 8002484 <_malloc_r+0xdc>
 800242a:	f8c8 7000 	str.w	r7, [r8]
 800242e:	e00f      	b.n	8002450 <_malloc_r+0xa8>
 8002430:	6822      	ldr	r2, [r4, #0]
 8002432:	1b52      	subs	r2, r2, r5
 8002434:	d420      	bmi.n	8002478 <_malloc_r+0xd0>
 8002436:	2a0b      	cmp	r2, #11
 8002438:	d917      	bls.n	800246a <_malloc_r+0xc2>
 800243a:	1961      	adds	r1, r4, r5
 800243c:	42a3      	cmp	r3, r4
 800243e:	6025      	str	r5, [r4, #0]
 8002440:	bf18      	it	ne
 8002442:	6059      	strne	r1, [r3, #4]
 8002444:	6863      	ldr	r3, [r4, #4]
 8002446:	bf08      	it	eq
 8002448:	f8c8 1000 	streq.w	r1, [r8]
 800244c:	5162      	str	r2, [r4, r5]
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	4630      	mov	r0, r6
 8002452:	f000 f82f 	bl	80024b4 <__malloc_unlock>
 8002456:	f104 000b 	add.w	r0, r4, #11
 800245a:	1d23      	adds	r3, r4, #4
 800245c:	f020 0007 	bic.w	r0, r0, #7
 8002460:	1ac2      	subs	r2, r0, r3
 8002462:	bf1c      	itt	ne
 8002464:	1a1b      	subne	r3, r3, r0
 8002466:	50a3      	strne	r3, [r4, r2]
 8002468:	e7af      	b.n	80023ca <_malloc_r+0x22>
 800246a:	6862      	ldr	r2, [r4, #4]
 800246c:	42a3      	cmp	r3, r4
 800246e:	bf0c      	ite	eq
 8002470:	f8c8 2000 	streq.w	r2, [r8]
 8002474:	605a      	strne	r2, [r3, #4]
 8002476:	e7eb      	b.n	8002450 <_malloc_r+0xa8>
 8002478:	4623      	mov	r3, r4
 800247a:	6864      	ldr	r4, [r4, #4]
 800247c:	e7ae      	b.n	80023dc <_malloc_r+0x34>
 800247e:	463c      	mov	r4, r7
 8002480:	687f      	ldr	r7, [r7, #4]
 8002482:	e7b6      	b.n	80023f2 <_malloc_r+0x4a>
 8002484:	461a      	mov	r2, r3
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	42a3      	cmp	r3, r4
 800248a:	d1fb      	bne.n	8002484 <_malloc_r+0xdc>
 800248c:	2300      	movs	r3, #0
 800248e:	6053      	str	r3, [r2, #4]
 8002490:	e7de      	b.n	8002450 <_malloc_r+0xa8>
 8002492:	230c      	movs	r3, #12
 8002494:	4630      	mov	r0, r6
 8002496:	6033      	str	r3, [r6, #0]
 8002498:	f000 f80c 	bl	80024b4 <__malloc_unlock>
 800249c:	e794      	b.n	80023c8 <_malloc_r+0x20>
 800249e:	6005      	str	r5, [r0, #0]
 80024a0:	e7d6      	b.n	8002450 <_malloc_r+0xa8>
 80024a2:	bf00      	nop
 80024a4:	2000021c 	.word	0x2000021c

080024a8 <__malloc_lock>:
 80024a8:	4801      	ldr	r0, [pc, #4]	@ (80024b0 <__malloc_lock+0x8>)
 80024aa:	f7ff beea 	b.w	8002282 <__retarget_lock_acquire_recursive>
 80024ae:	bf00      	nop
 80024b0:	20000214 	.word	0x20000214

080024b4 <__malloc_unlock>:
 80024b4:	4801      	ldr	r0, [pc, #4]	@ (80024bc <__malloc_unlock+0x8>)
 80024b6:	f7ff bee5 	b.w	8002284 <__retarget_lock_release_recursive>
 80024ba:	bf00      	nop
 80024bc:	20000214 	.word	0x20000214

080024c0 <__sflush_r>:
 80024c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	0716      	lsls	r6, r2, #28
 80024c8:	4605      	mov	r5, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	d454      	bmi.n	8002578 <__sflush_r+0xb8>
 80024ce:	684b      	ldr	r3, [r1, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	dc02      	bgt.n	80024da <__sflush_r+0x1a>
 80024d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	dd48      	ble.n	800256c <__sflush_r+0xac>
 80024da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024dc:	2e00      	cmp	r6, #0
 80024de:	d045      	beq.n	800256c <__sflush_r+0xac>
 80024e0:	2300      	movs	r3, #0
 80024e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80024e6:	682f      	ldr	r7, [r5, #0]
 80024e8:	6a21      	ldr	r1, [r4, #32]
 80024ea:	602b      	str	r3, [r5, #0]
 80024ec:	d030      	beq.n	8002550 <__sflush_r+0x90>
 80024ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	0759      	lsls	r1, r3, #29
 80024f4:	d505      	bpl.n	8002502 <__sflush_r+0x42>
 80024f6:	6863      	ldr	r3, [r4, #4]
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80024fc:	b10b      	cbz	r3, 8002502 <__sflush_r+0x42>
 80024fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002500:	1ad2      	subs	r2, r2, r3
 8002502:	2300      	movs	r3, #0
 8002504:	4628      	mov	r0, r5
 8002506:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002508:	6a21      	ldr	r1, [r4, #32]
 800250a:	47b0      	blx	r6
 800250c:	1c43      	adds	r3, r0, #1
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	d106      	bne.n	8002520 <__sflush_r+0x60>
 8002512:	6829      	ldr	r1, [r5, #0]
 8002514:	291d      	cmp	r1, #29
 8002516:	d82b      	bhi.n	8002570 <__sflush_r+0xb0>
 8002518:	4a28      	ldr	r2, [pc, #160]	@ (80025bc <__sflush_r+0xfc>)
 800251a:	40ca      	lsrs	r2, r1
 800251c:	07d6      	lsls	r6, r2, #31
 800251e:	d527      	bpl.n	8002570 <__sflush_r+0xb0>
 8002520:	2200      	movs	r2, #0
 8002522:	6062      	str	r2, [r4, #4]
 8002524:	6922      	ldr	r2, [r4, #16]
 8002526:	04d9      	lsls	r1, r3, #19
 8002528:	6022      	str	r2, [r4, #0]
 800252a:	d504      	bpl.n	8002536 <__sflush_r+0x76>
 800252c:	1c42      	adds	r2, r0, #1
 800252e:	d101      	bne.n	8002534 <__sflush_r+0x74>
 8002530:	682b      	ldr	r3, [r5, #0]
 8002532:	b903      	cbnz	r3, 8002536 <__sflush_r+0x76>
 8002534:	6560      	str	r0, [r4, #84]	@ 0x54
 8002536:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002538:	602f      	str	r7, [r5, #0]
 800253a:	b1b9      	cbz	r1, 800256c <__sflush_r+0xac>
 800253c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002540:	4299      	cmp	r1, r3
 8002542:	d002      	beq.n	800254a <__sflush_r+0x8a>
 8002544:	4628      	mov	r0, r5
 8002546:	f7ff febd 	bl	80022c4 <_free_r>
 800254a:	2300      	movs	r3, #0
 800254c:	6363      	str	r3, [r4, #52]	@ 0x34
 800254e:	e00d      	b.n	800256c <__sflush_r+0xac>
 8002550:	2301      	movs	r3, #1
 8002552:	4628      	mov	r0, r5
 8002554:	47b0      	blx	r6
 8002556:	4602      	mov	r2, r0
 8002558:	1c50      	adds	r0, r2, #1
 800255a:	d1c9      	bne.n	80024f0 <__sflush_r+0x30>
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0c6      	beq.n	80024f0 <__sflush_r+0x30>
 8002562:	2b1d      	cmp	r3, #29
 8002564:	d001      	beq.n	800256a <__sflush_r+0xaa>
 8002566:	2b16      	cmp	r3, #22
 8002568:	d11d      	bne.n	80025a6 <__sflush_r+0xe6>
 800256a:	602f      	str	r7, [r5, #0]
 800256c:	2000      	movs	r0, #0
 800256e:	e021      	b.n	80025b4 <__sflush_r+0xf4>
 8002570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002574:	b21b      	sxth	r3, r3
 8002576:	e01a      	b.n	80025ae <__sflush_r+0xee>
 8002578:	690f      	ldr	r7, [r1, #16]
 800257a:	2f00      	cmp	r7, #0
 800257c:	d0f6      	beq.n	800256c <__sflush_r+0xac>
 800257e:	0793      	lsls	r3, r2, #30
 8002580:	bf18      	it	ne
 8002582:	2300      	movne	r3, #0
 8002584:	680e      	ldr	r6, [r1, #0]
 8002586:	bf08      	it	eq
 8002588:	694b      	ldreq	r3, [r1, #20]
 800258a:	1bf6      	subs	r6, r6, r7
 800258c:	600f      	str	r7, [r1, #0]
 800258e:	608b      	str	r3, [r1, #8]
 8002590:	2e00      	cmp	r6, #0
 8002592:	ddeb      	ble.n	800256c <__sflush_r+0xac>
 8002594:	4633      	mov	r3, r6
 8002596:	463a      	mov	r2, r7
 8002598:	4628      	mov	r0, r5
 800259a:	6a21      	ldr	r1, [r4, #32]
 800259c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80025a0:	47e0      	blx	ip
 80025a2:	2800      	cmp	r0, #0
 80025a4:	dc07      	bgt.n	80025b6 <__sflush_r+0xf6>
 80025a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ae:	f04f 30ff 	mov.w	r0, #4294967295
 80025b2:	81a3      	strh	r3, [r4, #12]
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b6:	4407      	add	r7, r0
 80025b8:	1a36      	subs	r6, r6, r0
 80025ba:	e7e9      	b.n	8002590 <__sflush_r+0xd0>
 80025bc:	20400001 	.word	0x20400001

080025c0 <_fflush_r>:
 80025c0:	b538      	push	{r3, r4, r5, lr}
 80025c2:	690b      	ldr	r3, [r1, #16]
 80025c4:	4605      	mov	r5, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	b913      	cbnz	r3, 80025d0 <_fflush_r+0x10>
 80025ca:	2500      	movs	r5, #0
 80025cc:	4628      	mov	r0, r5
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
 80025d0:	b118      	cbz	r0, 80025da <_fflush_r+0x1a>
 80025d2:	6a03      	ldr	r3, [r0, #32]
 80025d4:	b90b      	cbnz	r3, 80025da <_fflush_r+0x1a>
 80025d6:	f7ff fd61 	bl	800209c <__sinit>
 80025da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f3      	beq.n	80025ca <_fflush_r+0xa>
 80025e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80025e4:	07d0      	lsls	r0, r2, #31
 80025e6:	d404      	bmi.n	80025f2 <_fflush_r+0x32>
 80025e8:	0599      	lsls	r1, r3, #22
 80025ea:	d402      	bmi.n	80025f2 <_fflush_r+0x32>
 80025ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025ee:	f7ff fe48 	bl	8002282 <__retarget_lock_acquire_recursive>
 80025f2:	4628      	mov	r0, r5
 80025f4:	4621      	mov	r1, r4
 80025f6:	f7ff ff63 	bl	80024c0 <__sflush_r>
 80025fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025fc:	4605      	mov	r5, r0
 80025fe:	07da      	lsls	r2, r3, #31
 8002600:	d4e4      	bmi.n	80025cc <_fflush_r+0xc>
 8002602:	89a3      	ldrh	r3, [r4, #12]
 8002604:	059b      	lsls	r3, r3, #22
 8002606:	d4e1      	bmi.n	80025cc <_fflush_r+0xc>
 8002608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800260a:	f7ff fe3b 	bl	8002284 <__retarget_lock_release_recursive>
 800260e:	e7dd      	b.n	80025cc <_fflush_r+0xc>

08002610 <fiprintf>:
 8002610:	b40e      	push	{r1, r2, r3}
 8002612:	b503      	push	{r0, r1, lr}
 8002614:	4601      	mov	r1, r0
 8002616:	ab03      	add	r3, sp, #12
 8002618:	4805      	ldr	r0, [pc, #20]	@ (8002630 <fiprintf+0x20>)
 800261a:	f853 2b04 	ldr.w	r2, [r3], #4
 800261e:	6800      	ldr	r0, [r0, #0]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	f000 f845 	bl	80026b0 <_vfiprintf_r>
 8002626:	b002      	add	sp, #8
 8002628:	f85d eb04 	ldr.w	lr, [sp], #4
 800262c:	b003      	add	sp, #12
 800262e:	4770      	bx	lr
 8002630:	20000018 	.word	0x20000018

08002634 <_sbrk_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	2300      	movs	r3, #0
 8002638:	4d05      	ldr	r5, [pc, #20]	@ (8002650 <_sbrk_r+0x1c>)
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	602b      	str	r3, [r5, #0]
 8002640:	f7fe f9e2 	bl	8000a08 <_sbrk>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d102      	bne.n	800264e <_sbrk_r+0x1a>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	b103      	cbz	r3, 800264e <_sbrk_r+0x1a>
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	bd38      	pop	{r3, r4, r5, pc}
 8002650:	20000210 	.word	0x20000210

08002654 <abort>:
 8002654:	2006      	movs	r0, #6
 8002656:	b508      	push	{r3, lr}
 8002658:	f000 fb8e 	bl	8002d78 <raise>
 800265c:	2001      	movs	r0, #1
 800265e:	f7fe f95e 	bl	800091e <_exit>

08002662 <__sfputc_r>:
 8002662:	6893      	ldr	r3, [r2, #8]
 8002664:	b410      	push	{r4}
 8002666:	3b01      	subs	r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	da07      	bge.n	800267e <__sfputc_r+0x1c>
 800266e:	6994      	ldr	r4, [r2, #24]
 8002670:	42a3      	cmp	r3, r4
 8002672:	db01      	blt.n	8002678 <__sfputc_r+0x16>
 8002674:	290a      	cmp	r1, #10
 8002676:	d102      	bne.n	800267e <__sfputc_r+0x1c>
 8002678:	bc10      	pop	{r4}
 800267a:	f000 bac1 	b.w	8002c00 <__swbuf_r>
 800267e:	6813      	ldr	r3, [r2, #0]
 8002680:	1c58      	adds	r0, r3, #1
 8002682:	6010      	str	r0, [r2, #0]
 8002684:	7019      	strb	r1, [r3, #0]
 8002686:	4608      	mov	r0, r1
 8002688:	bc10      	pop	{r4}
 800268a:	4770      	bx	lr

0800268c <__sfputs_r>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	4606      	mov	r6, r0
 8002690:	460f      	mov	r7, r1
 8002692:	4614      	mov	r4, r2
 8002694:	18d5      	adds	r5, r2, r3
 8002696:	42ac      	cmp	r4, r5
 8002698:	d101      	bne.n	800269e <__sfputs_r+0x12>
 800269a:	2000      	movs	r0, #0
 800269c:	e007      	b.n	80026ae <__sfputs_r+0x22>
 800269e:	463a      	mov	r2, r7
 80026a0:	4630      	mov	r0, r6
 80026a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026a6:	f7ff ffdc 	bl	8002662 <__sfputc_r>
 80026aa:	1c43      	adds	r3, r0, #1
 80026ac:	d1f3      	bne.n	8002696 <__sfputs_r+0xa>
 80026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026b0 <_vfiprintf_r>:
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	460d      	mov	r5, r1
 80026b6:	4614      	mov	r4, r2
 80026b8:	4698      	mov	r8, r3
 80026ba:	4606      	mov	r6, r0
 80026bc:	b09d      	sub	sp, #116	@ 0x74
 80026be:	b118      	cbz	r0, 80026c8 <_vfiprintf_r+0x18>
 80026c0:	6a03      	ldr	r3, [r0, #32]
 80026c2:	b90b      	cbnz	r3, 80026c8 <_vfiprintf_r+0x18>
 80026c4:	f7ff fcea 	bl	800209c <__sinit>
 80026c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026ca:	07d9      	lsls	r1, r3, #31
 80026cc:	d405      	bmi.n	80026da <_vfiprintf_r+0x2a>
 80026ce:	89ab      	ldrh	r3, [r5, #12]
 80026d0:	059a      	lsls	r2, r3, #22
 80026d2:	d402      	bmi.n	80026da <_vfiprintf_r+0x2a>
 80026d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026d6:	f7ff fdd4 	bl	8002282 <__retarget_lock_acquire_recursive>
 80026da:	89ab      	ldrh	r3, [r5, #12]
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	d501      	bpl.n	80026e4 <_vfiprintf_r+0x34>
 80026e0:	692b      	ldr	r3, [r5, #16]
 80026e2:	b99b      	cbnz	r3, 800270c <_vfiprintf_r+0x5c>
 80026e4:	4629      	mov	r1, r5
 80026e6:	4630      	mov	r0, r6
 80026e8:	f000 fac8 	bl	8002c7c <__swsetup_r>
 80026ec:	b170      	cbz	r0, 800270c <_vfiprintf_r+0x5c>
 80026ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026f0:	07dc      	lsls	r4, r3, #31
 80026f2:	d504      	bpl.n	80026fe <_vfiprintf_r+0x4e>
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	b01d      	add	sp, #116	@ 0x74
 80026fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fe:	89ab      	ldrh	r3, [r5, #12]
 8002700:	0598      	lsls	r0, r3, #22
 8002702:	d4f7      	bmi.n	80026f4 <_vfiprintf_r+0x44>
 8002704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002706:	f7ff fdbd 	bl	8002284 <__retarget_lock_release_recursive>
 800270a:	e7f3      	b.n	80026f4 <_vfiprintf_r+0x44>
 800270c:	2300      	movs	r3, #0
 800270e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002710:	2320      	movs	r3, #32
 8002712:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002716:	2330      	movs	r3, #48	@ 0x30
 8002718:	f04f 0901 	mov.w	r9, #1
 800271c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002720:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80028cc <_vfiprintf_r+0x21c>
 8002724:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002728:	4623      	mov	r3, r4
 800272a:	469a      	mov	sl, r3
 800272c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002730:	b10a      	cbz	r2, 8002736 <_vfiprintf_r+0x86>
 8002732:	2a25      	cmp	r2, #37	@ 0x25
 8002734:	d1f9      	bne.n	800272a <_vfiprintf_r+0x7a>
 8002736:	ebba 0b04 	subs.w	fp, sl, r4
 800273a:	d00b      	beq.n	8002754 <_vfiprintf_r+0xa4>
 800273c:	465b      	mov	r3, fp
 800273e:	4622      	mov	r2, r4
 8002740:	4629      	mov	r1, r5
 8002742:	4630      	mov	r0, r6
 8002744:	f7ff ffa2 	bl	800268c <__sfputs_r>
 8002748:	3001      	adds	r0, #1
 800274a:	f000 80a7 	beq.w	800289c <_vfiprintf_r+0x1ec>
 800274e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002750:	445a      	add	r2, fp
 8002752:	9209      	str	r2, [sp, #36]	@ 0x24
 8002754:	f89a 3000 	ldrb.w	r3, [sl]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 809f 	beq.w	800289c <_vfiprintf_r+0x1ec>
 800275e:	2300      	movs	r3, #0
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002768:	f10a 0a01 	add.w	sl, sl, #1
 800276c:	9304      	str	r3, [sp, #16]
 800276e:	9307      	str	r3, [sp, #28]
 8002770:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002774:	931a      	str	r3, [sp, #104]	@ 0x68
 8002776:	4654      	mov	r4, sl
 8002778:	2205      	movs	r2, #5
 800277a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800277e:	4853      	ldr	r0, [pc, #332]	@ (80028cc <_vfiprintf_r+0x21c>)
 8002780:	f000 fb16 	bl	8002db0 <memchr>
 8002784:	9a04      	ldr	r2, [sp, #16]
 8002786:	b9d8      	cbnz	r0, 80027c0 <_vfiprintf_r+0x110>
 8002788:	06d1      	lsls	r1, r2, #27
 800278a:	bf44      	itt	mi
 800278c:	2320      	movmi	r3, #32
 800278e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002792:	0713      	lsls	r3, r2, #28
 8002794:	bf44      	itt	mi
 8002796:	232b      	movmi	r3, #43	@ 0x2b
 8002798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800279c:	f89a 3000 	ldrb.w	r3, [sl]
 80027a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80027a2:	d015      	beq.n	80027d0 <_vfiprintf_r+0x120>
 80027a4:	4654      	mov	r4, sl
 80027a6:	2000      	movs	r0, #0
 80027a8:	f04f 0c0a 	mov.w	ip, #10
 80027ac:	9a07      	ldr	r2, [sp, #28]
 80027ae:	4621      	mov	r1, r4
 80027b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027b4:	3b30      	subs	r3, #48	@ 0x30
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	d94b      	bls.n	8002852 <_vfiprintf_r+0x1a2>
 80027ba:	b1b0      	cbz	r0, 80027ea <_vfiprintf_r+0x13a>
 80027bc:	9207      	str	r2, [sp, #28]
 80027be:	e014      	b.n	80027ea <_vfiprintf_r+0x13a>
 80027c0:	eba0 0308 	sub.w	r3, r0, r8
 80027c4:	fa09 f303 	lsl.w	r3, r9, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	46a2      	mov	sl, r4
 80027cc:	9304      	str	r3, [sp, #16]
 80027ce:	e7d2      	b.n	8002776 <_vfiprintf_r+0xc6>
 80027d0:	9b03      	ldr	r3, [sp, #12]
 80027d2:	1d19      	adds	r1, r3, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	9103      	str	r1, [sp, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bfbb      	ittet	lt
 80027dc:	425b      	neglt	r3, r3
 80027de:	f042 0202 	orrlt.w	r2, r2, #2
 80027e2:	9307      	strge	r3, [sp, #28]
 80027e4:	9307      	strlt	r3, [sp, #28]
 80027e6:	bfb8      	it	lt
 80027e8:	9204      	strlt	r2, [sp, #16]
 80027ea:	7823      	ldrb	r3, [r4, #0]
 80027ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80027ee:	d10a      	bne.n	8002806 <_vfiprintf_r+0x156>
 80027f0:	7863      	ldrb	r3, [r4, #1]
 80027f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027f4:	d132      	bne.n	800285c <_vfiprintf_r+0x1ac>
 80027f6:	9b03      	ldr	r3, [sp, #12]
 80027f8:	3402      	adds	r4, #2
 80027fa:	1d1a      	adds	r2, r3, #4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	9203      	str	r2, [sp, #12]
 8002800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002804:	9305      	str	r3, [sp, #20]
 8002806:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80028d0 <_vfiprintf_r+0x220>
 800280a:	2203      	movs	r2, #3
 800280c:	4650      	mov	r0, sl
 800280e:	7821      	ldrb	r1, [r4, #0]
 8002810:	f000 face 	bl	8002db0 <memchr>
 8002814:	b138      	cbz	r0, 8002826 <_vfiprintf_r+0x176>
 8002816:	2240      	movs	r2, #64	@ 0x40
 8002818:	9b04      	ldr	r3, [sp, #16]
 800281a:	eba0 000a 	sub.w	r0, r0, sl
 800281e:	4082      	lsls	r2, r0
 8002820:	4313      	orrs	r3, r2
 8002822:	3401      	adds	r4, #1
 8002824:	9304      	str	r3, [sp, #16]
 8002826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800282a:	2206      	movs	r2, #6
 800282c:	4829      	ldr	r0, [pc, #164]	@ (80028d4 <_vfiprintf_r+0x224>)
 800282e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002832:	f000 fabd 	bl	8002db0 <memchr>
 8002836:	2800      	cmp	r0, #0
 8002838:	d03f      	beq.n	80028ba <_vfiprintf_r+0x20a>
 800283a:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <_vfiprintf_r+0x228>)
 800283c:	bb1b      	cbnz	r3, 8002886 <_vfiprintf_r+0x1d6>
 800283e:	9b03      	ldr	r3, [sp, #12]
 8002840:	3307      	adds	r3, #7
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	3308      	adds	r3, #8
 8002848:	9303      	str	r3, [sp, #12]
 800284a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800284c:	443b      	add	r3, r7
 800284e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002850:	e76a      	b.n	8002728 <_vfiprintf_r+0x78>
 8002852:	460c      	mov	r4, r1
 8002854:	2001      	movs	r0, #1
 8002856:	fb0c 3202 	mla	r2, ip, r2, r3
 800285a:	e7a8      	b.n	80027ae <_vfiprintf_r+0xfe>
 800285c:	2300      	movs	r3, #0
 800285e:	f04f 0c0a 	mov.w	ip, #10
 8002862:	4619      	mov	r1, r3
 8002864:	3401      	adds	r4, #1
 8002866:	9305      	str	r3, [sp, #20]
 8002868:	4620      	mov	r0, r4
 800286a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800286e:	3a30      	subs	r2, #48	@ 0x30
 8002870:	2a09      	cmp	r2, #9
 8002872:	d903      	bls.n	800287c <_vfiprintf_r+0x1cc>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0c6      	beq.n	8002806 <_vfiprintf_r+0x156>
 8002878:	9105      	str	r1, [sp, #20]
 800287a:	e7c4      	b.n	8002806 <_vfiprintf_r+0x156>
 800287c:	4604      	mov	r4, r0
 800287e:	2301      	movs	r3, #1
 8002880:	fb0c 2101 	mla	r1, ip, r1, r2
 8002884:	e7f0      	b.n	8002868 <_vfiprintf_r+0x1b8>
 8002886:	ab03      	add	r3, sp, #12
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	462a      	mov	r2, r5
 800288c:	4630      	mov	r0, r6
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <_vfiprintf_r+0x22c>)
 8002890:	a904      	add	r1, sp, #16
 8002892:	f3af 8000 	nop.w
 8002896:	4607      	mov	r7, r0
 8002898:	1c78      	adds	r0, r7, #1
 800289a:	d1d6      	bne.n	800284a <_vfiprintf_r+0x19a>
 800289c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800289e:	07d9      	lsls	r1, r3, #31
 80028a0:	d405      	bmi.n	80028ae <_vfiprintf_r+0x1fe>
 80028a2:	89ab      	ldrh	r3, [r5, #12]
 80028a4:	059a      	lsls	r2, r3, #22
 80028a6:	d402      	bmi.n	80028ae <_vfiprintf_r+0x1fe>
 80028a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028aa:	f7ff fceb 	bl	8002284 <__retarget_lock_release_recursive>
 80028ae:	89ab      	ldrh	r3, [r5, #12]
 80028b0:	065b      	lsls	r3, r3, #25
 80028b2:	f53f af1f 	bmi.w	80026f4 <_vfiprintf_r+0x44>
 80028b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028b8:	e71e      	b.n	80026f8 <_vfiprintf_r+0x48>
 80028ba:	ab03      	add	r3, sp, #12
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	462a      	mov	r2, r5
 80028c0:	4630      	mov	r0, r6
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <_vfiprintf_r+0x22c>)
 80028c4:	a904      	add	r1, sp, #16
 80028c6:	f000 f87d 	bl	80029c4 <_printf_i>
 80028ca:	e7e4      	b.n	8002896 <_vfiprintf_r+0x1e6>
 80028cc:	08003041 	.word	0x08003041
 80028d0:	08003047 	.word	0x08003047
 80028d4:	0800304b 	.word	0x0800304b
 80028d8:	00000000 	.word	0x00000000
 80028dc:	0800268d 	.word	0x0800268d

080028e0 <_printf_common>:
 80028e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	4616      	mov	r6, r2
 80028e6:	4698      	mov	r8, r3
 80028e8:	688a      	ldr	r2, [r1, #8]
 80028ea:	690b      	ldr	r3, [r1, #16]
 80028ec:	4607      	mov	r7, r0
 80028ee:	4293      	cmp	r3, r2
 80028f0:	bfb8      	it	lt
 80028f2:	4613      	movlt	r3, r2
 80028f4:	6033      	str	r3, [r6, #0]
 80028f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028fa:	460c      	mov	r4, r1
 80028fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002900:	b10a      	cbz	r2, 8002906 <_printf_common+0x26>
 8002902:	3301      	adds	r3, #1
 8002904:	6033      	str	r3, [r6, #0]
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	0699      	lsls	r1, r3, #26
 800290a:	bf42      	ittt	mi
 800290c:	6833      	ldrmi	r3, [r6, #0]
 800290e:	3302      	addmi	r3, #2
 8002910:	6033      	strmi	r3, [r6, #0]
 8002912:	6825      	ldr	r5, [r4, #0]
 8002914:	f015 0506 	ands.w	r5, r5, #6
 8002918:	d106      	bne.n	8002928 <_printf_common+0x48>
 800291a:	f104 0a19 	add.w	sl, r4, #25
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	6832      	ldr	r2, [r6, #0]
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	42ab      	cmp	r3, r5
 8002926:	dc2b      	bgt.n	8002980 <_printf_common+0xa0>
 8002928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800292c:	6822      	ldr	r2, [r4, #0]
 800292e:	3b00      	subs	r3, #0
 8002930:	bf18      	it	ne
 8002932:	2301      	movne	r3, #1
 8002934:	0692      	lsls	r2, r2, #26
 8002936:	d430      	bmi.n	800299a <_printf_common+0xba>
 8002938:	4641      	mov	r1, r8
 800293a:	4638      	mov	r0, r7
 800293c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002940:	47c8      	blx	r9
 8002942:	3001      	adds	r0, #1
 8002944:	d023      	beq.n	800298e <_printf_common+0xae>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	6922      	ldr	r2, [r4, #16]
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf14      	ite	ne
 8002952:	2500      	movne	r5, #0
 8002954:	6833      	ldreq	r3, [r6, #0]
 8002956:	f04f 0600 	mov.w	r6, #0
 800295a:	bf08      	it	eq
 800295c:	68e5      	ldreq	r5, [r4, #12]
 800295e:	f104 041a 	add.w	r4, r4, #26
 8002962:	bf08      	it	eq
 8002964:	1aed      	subeq	r5, r5, r3
 8002966:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800296a:	bf08      	it	eq
 800296c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002970:	4293      	cmp	r3, r2
 8002972:	bfc4      	itt	gt
 8002974:	1a9b      	subgt	r3, r3, r2
 8002976:	18ed      	addgt	r5, r5, r3
 8002978:	42b5      	cmp	r5, r6
 800297a:	d11a      	bne.n	80029b2 <_printf_common+0xd2>
 800297c:	2000      	movs	r0, #0
 800297e:	e008      	b.n	8002992 <_printf_common+0xb2>
 8002980:	2301      	movs	r3, #1
 8002982:	4652      	mov	r2, sl
 8002984:	4641      	mov	r1, r8
 8002986:	4638      	mov	r0, r7
 8002988:	47c8      	blx	r9
 800298a:	3001      	adds	r0, #1
 800298c:	d103      	bne.n	8002996 <_printf_common+0xb6>
 800298e:	f04f 30ff 	mov.w	r0, #4294967295
 8002992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002996:	3501      	adds	r5, #1
 8002998:	e7c1      	b.n	800291e <_printf_common+0x3e>
 800299a:	2030      	movs	r0, #48	@ 0x30
 800299c:	18e1      	adds	r1, r4, r3
 800299e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80029a8:	4422      	add	r2, r4
 80029aa:	3302      	adds	r3, #2
 80029ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80029b0:	e7c2      	b.n	8002938 <_printf_common+0x58>
 80029b2:	2301      	movs	r3, #1
 80029b4:	4622      	mov	r2, r4
 80029b6:	4641      	mov	r1, r8
 80029b8:	4638      	mov	r0, r7
 80029ba:	47c8      	blx	r9
 80029bc:	3001      	adds	r0, #1
 80029be:	d0e6      	beq.n	800298e <_printf_common+0xae>
 80029c0:	3601      	adds	r6, #1
 80029c2:	e7d9      	b.n	8002978 <_printf_common+0x98>

080029c4 <_printf_i>:
 80029c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029c8:	7e0f      	ldrb	r7, [r1, #24]
 80029ca:	4691      	mov	r9, r2
 80029cc:	2f78      	cmp	r7, #120	@ 0x78
 80029ce:	4680      	mov	r8, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	469a      	mov	sl, r3
 80029d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029da:	d807      	bhi.n	80029ec <_printf_i+0x28>
 80029dc:	2f62      	cmp	r7, #98	@ 0x62
 80029de:	d80a      	bhi.n	80029f6 <_printf_i+0x32>
 80029e0:	2f00      	cmp	r7, #0
 80029e2:	f000 80d1 	beq.w	8002b88 <_printf_i+0x1c4>
 80029e6:	2f58      	cmp	r7, #88	@ 0x58
 80029e8:	f000 80b8 	beq.w	8002b5c <_printf_i+0x198>
 80029ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029f4:	e03a      	b.n	8002a6c <_printf_i+0xa8>
 80029f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029fa:	2b15      	cmp	r3, #21
 80029fc:	d8f6      	bhi.n	80029ec <_printf_i+0x28>
 80029fe:	a101      	add	r1, pc, #4	@ (adr r1, 8002a04 <_printf_i+0x40>)
 8002a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a04:	08002a5d 	.word	0x08002a5d
 8002a08:	08002a71 	.word	0x08002a71
 8002a0c:	080029ed 	.word	0x080029ed
 8002a10:	080029ed 	.word	0x080029ed
 8002a14:	080029ed 	.word	0x080029ed
 8002a18:	080029ed 	.word	0x080029ed
 8002a1c:	08002a71 	.word	0x08002a71
 8002a20:	080029ed 	.word	0x080029ed
 8002a24:	080029ed 	.word	0x080029ed
 8002a28:	080029ed 	.word	0x080029ed
 8002a2c:	080029ed 	.word	0x080029ed
 8002a30:	08002b6f 	.word	0x08002b6f
 8002a34:	08002a9b 	.word	0x08002a9b
 8002a38:	08002b29 	.word	0x08002b29
 8002a3c:	080029ed 	.word	0x080029ed
 8002a40:	080029ed 	.word	0x080029ed
 8002a44:	08002b91 	.word	0x08002b91
 8002a48:	080029ed 	.word	0x080029ed
 8002a4c:	08002a9b 	.word	0x08002a9b
 8002a50:	080029ed 	.word	0x080029ed
 8002a54:	080029ed 	.word	0x080029ed
 8002a58:	08002b31 	.word	0x08002b31
 8002a5c:	6833      	ldr	r3, [r6, #0]
 8002a5e:	1d1a      	adds	r2, r3, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6032      	str	r2, [r6, #0]
 8002a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e09c      	b.n	8002baa <_printf_i+0x1e6>
 8002a70:	6833      	ldr	r3, [r6, #0]
 8002a72:	6820      	ldr	r0, [r4, #0]
 8002a74:	1d19      	adds	r1, r3, #4
 8002a76:	6031      	str	r1, [r6, #0]
 8002a78:	0606      	lsls	r6, r0, #24
 8002a7a:	d501      	bpl.n	8002a80 <_printf_i+0xbc>
 8002a7c:	681d      	ldr	r5, [r3, #0]
 8002a7e:	e003      	b.n	8002a88 <_printf_i+0xc4>
 8002a80:	0645      	lsls	r5, r0, #25
 8002a82:	d5fb      	bpl.n	8002a7c <_printf_i+0xb8>
 8002a84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	da03      	bge.n	8002a94 <_printf_i+0xd0>
 8002a8c:	232d      	movs	r3, #45	@ 0x2d
 8002a8e:	426d      	negs	r5, r5
 8002a90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a94:	230a      	movs	r3, #10
 8002a96:	4858      	ldr	r0, [pc, #352]	@ (8002bf8 <_printf_i+0x234>)
 8002a98:	e011      	b.n	8002abe <_printf_i+0xfa>
 8002a9a:	6821      	ldr	r1, [r4, #0]
 8002a9c:	6833      	ldr	r3, [r6, #0]
 8002a9e:	0608      	lsls	r0, r1, #24
 8002aa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002aa4:	d402      	bmi.n	8002aac <_printf_i+0xe8>
 8002aa6:	0649      	lsls	r1, r1, #25
 8002aa8:	bf48      	it	mi
 8002aaa:	b2ad      	uxthmi	r5, r5
 8002aac:	2f6f      	cmp	r7, #111	@ 0x6f
 8002aae:	6033      	str	r3, [r6, #0]
 8002ab0:	bf14      	ite	ne
 8002ab2:	230a      	movne	r3, #10
 8002ab4:	2308      	moveq	r3, #8
 8002ab6:	4850      	ldr	r0, [pc, #320]	@ (8002bf8 <_printf_i+0x234>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002abe:	6866      	ldr	r6, [r4, #4]
 8002ac0:	2e00      	cmp	r6, #0
 8002ac2:	60a6      	str	r6, [r4, #8]
 8002ac4:	db05      	blt.n	8002ad2 <_printf_i+0x10e>
 8002ac6:	6821      	ldr	r1, [r4, #0]
 8002ac8:	432e      	orrs	r6, r5
 8002aca:	f021 0104 	bic.w	r1, r1, #4
 8002ace:	6021      	str	r1, [r4, #0]
 8002ad0:	d04b      	beq.n	8002b6a <_printf_i+0x1a6>
 8002ad2:	4616      	mov	r6, r2
 8002ad4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ad8:	fb03 5711 	mls	r7, r3, r1, r5
 8002adc:	5dc7      	ldrb	r7, [r0, r7]
 8002ade:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ae2:	462f      	mov	r7, r5
 8002ae4:	42bb      	cmp	r3, r7
 8002ae6:	460d      	mov	r5, r1
 8002ae8:	d9f4      	bls.n	8002ad4 <_printf_i+0x110>
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d10b      	bne.n	8002b06 <_printf_i+0x142>
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	07df      	lsls	r7, r3, #31
 8002af2:	d508      	bpl.n	8002b06 <_printf_i+0x142>
 8002af4:	6923      	ldr	r3, [r4, #16]
 8002af6:	6861      	ldr	r1, [r4, #4]
 8002af8:	4299      	cmp	r1, r3
 8002afa:	bfde      	ittt	le
 8002afc:	2330      	movle	r3, #48	@ 0x30
 8002afe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b06:	1b92      	subs	r2, r2, r6
 8002b08:	6122      	str	r2, [r4, #16]
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4640      	mov	r0, r8
 8002b10:	f8cd a000 	str.w	sl, [sp]
 8002b14:	aa03      	add	r2, sp, #12
 8002b16:	f7ff fee3 	bl	80028e0 <_printf_common>
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d14a      	bne.n	8002bb4 <_printf_i+0x1f0>
 8002b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b22:	b004      	add	sp, #16
 8002b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	f043 0320 	orr.w	r3, r3, #32
 8002b2e:	6023      	str	r3, [r4, #0]
 8002b30:	2778      	movs	r7, #120	@ 0x78
 8002b32:	4832      	ldr	r0, [pc, #200]	@ (8002bfc <_printf_i+0x238>)
 8002b34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	6831      	ldr	r1, [r6, #0]
 8002b3c:	061f      	lsls	r7, r3, #24
 8002b3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b42:	d402      	bmi.n	8002b4a <_printf_i+0x186>
 8002b44:	065f      	lsls	r7, r3, #25
 8002b46:	bf48      	it	mi
 8002b48:	b2ad      	uxthmi	r5, r5
 8002b4a:	6031      	str	r1, [r6, #0]
 8002b4c:	07d9      	lsls	r1, r3, #31
 8002b4e:	bf44      	itt	mi
 8002b50:	f043 0320 	orrmi.w	r3, r3, #32
 8002b54:	6023      	strmi	r3, [r4, #0]
 8002b56:	b11d      	cbz	r5, 8002b60 <_printf_i+0x19c>
 8002b58:	2310      	movs	r3, #16
 8002b5a:	e7ad      	b.n	8002ab8 <_printf_i+0xf4>
 8002b5c:	4826      	ldr	r0, [pc, #152]	@ (8002bf8 <_printf_i+0x234>)
 8002b5e:	e7e9      	b.n	8002b34 <_printf_i+0x170>
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f023 0320 	bic.w	r3, r3, #32
 8002b66:	6023      	str	r3, [r4, #0]
 8002b68:	e7f6      	b.n	8002b58 <_printf_i+0x194>
 8002b6a:	4616      	mov	r6, r2
 8002b6c:	e7bd      	b.n	8002aea <_printf_i+0x126>
 8002b6e:	6833      	ldr	r3, [r6, #0]
 8002b70:	6825      	ldr	r5, [r4, #0]
 8002b72:	1d18      	adds	r0, r3, #4
 8002b74:	6961      	ldr	r1, [r4, #20]
 8002b76:	6030      	str	r0, [r6, #0]
 8002b78:	062e      	lsls	r6, r5, #24
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	d501      	bpl.n	8002b82 <_printf_i+0x1be>
 8002b7e:	6019      	str	r1, [r3, #0]
 8002b80:	e002      	b.n	8002b88 <_printf_i+0x1c4>
 8002b82:	0668      	lsls	r0, r5, #25
 8002b84:	d5fb      	bpl.n	8002b7e <_printf_i+0x1ba>
 8002b86:	8019      	strh	r1, [r3, #0]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4616      	mov	r6, r2
 8002b8c:	6123      	str	r3, [r4, #16]
 8002b8e:	e7bc      	b.n	8002b0a <_printf_i+0x146>
 8002b90:	6833      	ldr	r3, [r6, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	1d1a      	adds	r2, r3, #4
 8002b96:	6032      	str	r2, [r6, #0]
 8002b98:	681e      	ldr	r6, [r3, #0]
 8002b9a:	6862      	ldr	r2, [r4, #4]
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f000 f907 	bl	8002db0 <memchr>
 8002ba2:	b108      	cbz	r0, 8002ba8 <_printf_i+0x1e4>
 8002ba4:	1b80      	subs	r0, r0, r6
 8002ba6:	6060      	str	r0, [r4, #4]
 8002ba8:	6863      	ldr	r3, [r4, #4]
 8002baa:	6123      	str	r3, [r4, #16]
 8002bac:	2300      	movs	r3, #0
 8002bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bb2:	e7aa      	b.n	8002b0a <_printf_i+0x146>
 8002bb4:	4632      	mov	r2, r6
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	4640      	mov	r0, r8
 8002bba:	6923      	ldr	r3, [r4, #16]
 8002bbc:	47d0      	blx	sl
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	d0ad      	beq.n	8002b1e <_printf_i+0x15a>
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	079b      	lsls	r3, r3, #30
 8002bc6:	d413      	bmi.n	8002bf0 <_printf_i+0x22c>
 8002bc8:	68e0      	ldr	r0, [r4, #12]
 8002bca:	9b03      	ldr	r3, [sp, #12]
 8002bcc:	4298      	cmp	r0, r3
 8002bce:	bfb8      	it	lt
 8002bd0:	4618      	movlt	r0, r3
 8002bd2:	e7a6      	b.n	8002b22 <_printf_i+0x15e>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	4632      	mov	r2, r6
 8002bd8:	4649      	mov	r1, r9
 8002bda:	4640      	mov	r0, r8
 8002bdc:	47d0      	blx	sl
 8002bde:	3001      	adds	r0, #1
 8002be0:	d09d      	beq.n	8002b1e <_printf_i+0x15a>
 8002be2:	3501      	adds	r5, #1
 8002be4:	68e3      	ldr	r3, [r4, #12]
 8002be6:	9903      	ldr	r1, [sp, #12]
 8002be8:	1a5b      	subs	r3, r3, r1
 8002bea:	42ab      	cmp	r3, r5
 8002bec:	dcf2      	bgt.n	8002bd4 <_printf_i+0x210>
 8002bee:	e7eb      	b.n	8002bc8 <_printf_i+0x204>
 8002bf0:	2500      	movs	r5, #0
 8002bf2:	f104 0619 	add.w	r6, r4, #25
 8002bf6:	e7f5      	b.n	8002be4 <_printf_i+0x220>
 8002bf8:	08003052 	.word	0x08003052
 8002bfc:	08003063 	.word	0x08003063

08002c00 <__swbuf_r>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	460e      	mov	r6, r1
 8002c04:	4614      	mov	r4, r2
 8002c06:	4605      	mov	r5, r0
 8002c08:	b118      	cbz	r0, 8002c12 <__swbuf_r+0x12>
 8002c0a:	6a03      	ldr	r3, [r0, #32]
 8002c0c:	b90b      	cbnz	r3, 8002c12 <__swbuf_r+0x12>
 8002c0e:	f7ff fa45 	bl	800209c <__sinit>
 8002c12:	69a3      	ldr	r3, [r4, #24]
 8002c14:	60a3      	str	r3, [r4, #8]
 8002c16:	89a3      	ldrh	r3, [r4, #12]
 8002c18:	071a      	lsls	r2, r3, #28
 8002c1a:	d501      	bpl.n	8002c20 <__swbuf_r+0x20>
 8002c1c:	6923      	ldr	r3, [r4, #16]
 8002c1e:	b943      	cbnz	r3, 8002c32 <__swbuf_r+0x32>
 8002c20:	4621      	mov	r1, r4
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 f82a 	bl	8002c7c <__swsetup_r>
 8002c28:	b118      	cbz	r0, 8002c32 <__swbuf_r+0x32>
 8002c2a:	f04f 37ff 	mov.w	r7, #4294967295
 8002c2e:	4638      	mov	r0, r7
 8002c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	6922      	ldr	r2, [r4, #16]
 8002c36:	b2f6      	uxtb	r6, r6
 8002c38:	1a98      	subs	r0, r3, r2
 8002c3a:	6963      	ldr	r3, [r4, #20]
 8002c3c:	4637      	mov	r7, r6
 8002c3e:	4283      	cmp	r3, r0
 8002c40:	dc05      	bgt.n	8002c4e <__swbuf_r+0x4e>
 8002c42:	4621      	mov	r1, r4
 8002c44:	4628      	mov	r0, r5
 8002c46:	f7ff fcbb 	bl	80025c0 <_fflush_r>
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	d1ed      	bne.n	8002c2a <__swbuf_r+0x2a>
 8002c4e:	68a3      	ldr	r3, [r4, #8]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	60a3      	str	r3, [r4, #8]
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	6022      	str	r2, [r4, #0]
 8002c5a:	701e      	strb	r6, [r3, #0]
 8002c5c:	6962      	ldr	r2, [r4, #20]
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d004      	beq.n	8002c6e <__swbuf_r+0x6e>
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	07db      	lsls	r3, r3, #31
 8002c68:	d5e1      	bpl.n	8002c2e <__swbuf_r+0x2e>
 8002c6a:	2e0a      	cmp	r6, #10
 8002c6c:	d1df      	bne.n	8002c2e <__swbuf_r+0x2e>
 8002c6e:	4621      	mov	r1, r4
 8002c70:	4628      	mov	r0, r5
 8002c72:	f7ff fca5 	bl	80025c0 <_fflush_r>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d0d9      	beq.n	8002c2e <__swbuf_r+0x2e>
 8002c7a:	e7d6      	b.n	8002c2a <__swbuf_r+0x2a>

08002c7c <__swsetup_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4b29      	ldr	r3, [pc, #164]	@ (8002d24 <__swsetup_r+0xa8>)
 8002c80:	4605      	mov	r5, r0
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	460c      	mov	r4, r1
 8002c86:	b118      	cbz	r0, 8002c90 <__swsetup_r+0x14>
 8002c88:	6a03      	ldr	r3, [r0, #32]
 8002c8a:	b90b      	cbnz	r3, 8002c90 <__swsetup_r+0x14>
 8002c8c:	f7ff fa06 	bl	800209c <__sinit>
 8002c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c94:	0719      	lsls	r1, r3, #28
 8002c96:	d422      	bmi.n	8002cde <__swsetup_r+0x62>
 8002c98:	06da      	lsls	r2, r3, #27
 8002c9a:	d407      	bmi.n	8002cac <__swsetup_r+0x30>
 8002c9c:	2209      	movs	r2, #9
 8002c9e:	602a      	str	r2, [r5, #0]
 8002ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	e033      	b.n	8002d14 <__swsetup_r+0x98>
 8002cac:	0758      	lsls	r0, r3, #29
 8002cae:	d512      	bpl.n	8002cd6 <__swsetup_r+0x5a>
 8002cb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cb2:	b141      	cbz	r1, 8002cc6 <__swsetup_r+0x4a>
 8002cb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cb8:	4299      	cmp	r1, r3
 8002cba:	d002      	beq.n	8002cc2 <__swsetup_r+0x46>
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f7ff fb01 	bl	80022c4 <_free_r>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cc6:	89a3      	ldrh	r3, [r4, #12]
 8002cc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ccc:	81a3      	strh	r3, [r4, #12]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	6063      	str	r3, [r4, #4]
 8002cd2:	6923      	ldr	r3, [r4, #16]
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	89a3      	ldrh	r3, [r4, #12]
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	81a3      	strh	r3, [r4, #12]
 8002cde:	6923      	ldr	r3, [r4, #16]
 8002ce0:	b94b      	cbnz	r3, 8002cf6 <__swsetup_r+0x7a>
 8002ce2:	89a3      	ldrh	r3, [r4, #12]
 8002ce4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cec:	d003      	beq.n	8002cf6 <__swsetup_r+0x7a>
 8002cee:	4621      	mov	r1, r4
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f000 f890 	bl	8002e16 <__smakebuf_r>
 8002cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cfa:	f013 0201 	ands.w	r2, r3, #1
 8002cfe:	d00a      	beq.n	8002d16 <__swsetup_r+0x9a>
 8002d00:	2200      	movs	r2, #0
 8002d02:	60a2      	str	r2, [r4, #8]
 8002d04:	6962      	ldr	r2, [r4, #20]
 8002d06:	4252      	negs	r2, r2
 8002d08:	61a2      	str	r2, [r4, #24]
 8002d0a:	6922      	ldr	r2, [r4, #16]
 8002d0c:	b942      	cbnz	r2, 8002d20 <__swsetup_r+0xa4>
 8002d0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002d12:	d1c5      	bne.n	8002ca0 <__swsetup_r+0x24>
 8002d14:	bd38      	pop	{r3, r4, r5, pc}
 8002d16:	0799      	lsls	r1, r3, #30
 8002d18:	bf58      	it	pl
 8002d1a:	6962      	ldrpl	r2, [r4, #20]
 8002d1c:	60a2      	str	r2, [r4, #8]
 8002d1e:	e7f4      	b.n	8002d0a <__swsetup_r+0x8e>
 8002d20:	2000      	movs	r0, #0
 8002d22:	e7f7      	b.n	8002d14 <__swsetup_r+0x98>
 8002d24:	20000018 	.word	0x20000018

08002d28 <_raise_r>:
 8002d28:	291f      	cmp	r1, #31
 8002d2a:	b538      	push	{r3, r4, r5, lr}
 8002d2c:	4605      	mov	r5, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	d904      	bls.n	8002d3c <_raise_r+0x14>
 8002d32:	2316      	movs	r3, #22
 8002d34:	6003      	str	r3, [r0, #0]
 8002d36:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002d3e:	b112      	cbz	r2, 8002d46 <_raise_r+0x1e>
 8002d40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002d44:	b94b      	cbnz	r3, 8002d5a <_raise_r+0x32>
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 f830 	bl	8002dac <_getpid_r>
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	4601      	mov	r1, r0
 8002d50:	4628      	mov	r0, r5
 8002d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d56:	f000 b817 	b.w	8002d88 <_kill_r>
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d00a      	beq.n	8002d74 <_raise_r+0x4c>
 8002d5e:	1c59      	adds	r1, r3, #1
 8002d60:	d103      	bne.n	8002d6a <_raise_r+0x42>
 8002d62:	2316      	movs	r3, #22
 8002d64:	6003      	str	r3, [r0, #0]
 8002d66:	2001      	movs	r0, #1
 8002d68:	e7e7      	b.n	8002d3a <_raise_r+0x12>
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002d72:	4798      	blx	r3
 8002d74:	2000      	movs	r0, #0
 8002d76:	e7e0      	b.n	8002d3a <_raise_r+0x12>

08002d78 <raise>:
 8002d78:	4b02      	ldr	r3, [pc, #8]	@ (8002d84 <raise+0xc>)
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	f7ff bfd3 	b.w	8002d28 <_raise_r>
 8002d82:	bf00      	nop
 8002d84:	20000018 	.word	0x20000018

08002d88 <_kill_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	4d06      	ldr	r5, [pc, #24]	@ (8002da8 <_kill_r+0x20>)
 8002d8e:	4604      	mov	r4, r0
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	602b      	str	r3, [r5, #0]
 8002d96:	f7fd fdb2 	bl	80008fe <_kill>
 8002d9a:	1c43      	adds	r3, r0, #1
 8002d9c:	d102      	bne.n	8002da4 <_kill_r+0x1c>
 8002d9e:	682b      	ldr	r3, [r5, #0]
 8002da0:	b103      	cbz	r3, 8002da4 <_kill_r+0x1c>
 8002da2:	6023      	str	r3, [r4, #0]
 8002da4:	bd38      	pop	{r3, r4, r5, pc}
 8002da6:	bf00      	nop
 8002da8:	20000210 	.word	0x20000210

08002dac <_getpid_r>:
 8002dac:	f7fd bda0 	b.w	80008f0 <_getpid>

08002db0 <memchr>:
 8002db0:	4603      	mov	r3, r0
 8002db2:	b510      	push	{r4, lr}
 8002db4:	b2c9      	uxtb	r1, r1
 8002db6:	4402      	add	r2, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	d101      	bne.n	8002dc2 <memchr+0x12>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e003      	b.n	8002dca <memchr+0x1a>
 8002dc2:	7804      	ldrb	r4, [r0, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	428c      	cmp	r4, r1
 8002dc8:	d1f6      	bne.n	8002db8 <memchr+0x8>
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <__swhatbuf_r>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	460c      	mov	r4, r1
 8002dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd4:	4615      	mov	r5, r2
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	461e      	mov	r6, r3
 8002dda:	b096      	sub	sp, #88	@ 0x58
 8002ddc:	da0c      	bge.n	8002df8 <__swhatbuf_r+0x2c>
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	2100      	movs	r1, #0
 8002de2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002de6:	bf14      	ite	ne
 8002de8:	2340      	movne	r3, #64	@ 0x40
 8002dea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002dee:	2000      	movs	r0, #0
 8002df0:	6031      	str	r1, [r6, #0]
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	b016      	add	sp, #88	@ 0x58
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	466a      	mov	r2, sp
 8002dfa:	f000 f849 	bl	8002e90 <_fstat_r>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	dbed      	blt.n	8002dde <__swhatbuf_r+0x12>
 8002e02:	9901      	ldr	r1, [sp, #4]
 8002e04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002e08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002e0c:	4259      	negs	r1, r3
 8002e0e:	4159      	adcs	r1, r3
 8002e10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e14:	e7eb      	b.n	8002dee <__swhatbuf_r+0x22>

08002e16 <__smakebuf_r>:
 8002e16:	898b      	ldrh	r3, [r1, #12]
 8002e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e1a:	079d      	lsls	r5, r3, #30
 8002e1c:	4606      	mov	r6, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	d507      	bpl.n	8002e32 <__smakebuf_r+0x1c>
 8002e22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002e26:	6023      	str	r3, [r4, #0]
 8002e28:	6123      	str	r3, [r4, #16]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	6163      	str	r3, [r4, #20]
 8002e2e:	b003      	add	sp, #12
 8002e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e32:	466a      	mov	r2, sp
 8002e34:	ab01      	add	r3, sp, #4
 8002e36:	f7ff ffc9 	bl	8002dcc <__swhatbuf_r>
 8002e3a:	9f00      	ldr	r7, [sp, #0]
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	4639      	mov	r1, r7
 8002e40:	4630      	mov	r0, r6
 8002e42:	f7ff fab1 	bl	80023a8 <_malloc_r>
 8002e46:	b948      	cbnz	r0, 8002e5c <__smakebuf_r+0x46>
 8002e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4c:	059a      	lsls	r2, r3, #22
 8002e4e:	d4ee      	bmi.n	8002e2e <__smakebuf_r+0x18>
 8002e50:	f023 0303 	bic.w	r3, r3, #3
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	81a3      	strh	r3, [r4, #12]
 8002e5a:	e7e2      	b.n	8002e22 <__smakebuf_r+0xc>
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e66:	81a3      	strh	r3, [r4, #12]
 8002e68:	9b01      	ldr	r3, [sp, #4]
 8002e6a:	6020      	str	r0, [r4, #0]
 8002e6c:	b15b      	cbz	r3, 8002e86 <__smakebuf_r+0x70>
 8002e6e:	4630      	mov	r0, r6
 8002e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e74:	f000 f81e 	bl	8002eb4 <_isatty_r>
 8002e78:	b128      	cbz	r0, 8002e86 <__smakebuf_r+0x70>
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	f023 0303 	bic.w	r3, r3, #3
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	81a3      	strh	r3, [r4, #12]
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	431d      	orrs	r5, r3
 8002e8a:	81a5      	strh	r5, [r4, #12]
 8002e8c:	e7cf      	b.n	8002e2e <__smakebuf_r+0x18>
	...

08002e90 <_fstat_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	2300      	movs	r3, #0
 8002e94:	4d06      	ldr	r5, [pc, #24]	@ (8002eb0 <_fstat_r+0x20>)
 8002e96:	4604      	mov	r4, r0
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	602b      	str	r3, [r5, #0]
 8002e9e:	f7fd fd8d 	bl	80009bc <_fstat>
 8002ea2:	1c43      	adds	r3, r0, #1
 8002ea4:	d102      	bne.n	8002eac <_fstat_r+0x1c>
 8002ea6:	682b      	ldr	r3, [r5, #0]
 8002ea8:	b103      	cbz	r3, 8002eac <_fstat_r+0x1c>
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	bd38      	pop	{r3, r4, r5, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000210 	.word	0x20000210

08002eb4 <_isatty_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	4d05      	ldr	r5, [pc, #20]	@ (8002ed0 <_isatty_r+0x1c>)
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	602b      	str	r3, [r5, #0]
 8002ec0:	f7fd fd8b 	bl	80009da <_isatty>
 8002ec4:	1c43      	adds	r3, r0, #1
 8002ec6:	d102      	bne.n	8002ece <_isatty_r+0x1a>
 8002ec8:	682b      	ldr	r3, [r5, #0]
 8002eca:	b103      	cbz	r3, 8002ece <_isatty_r+0x1a>
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	20000210 	.word	0x20000210

08002ed4 <_init>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr

08002ee0 <_fini>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr
